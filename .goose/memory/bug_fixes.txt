DroppableDisposedException fix in new_chat_bottom_sheet.dart - Fixed issue where PublicKey objects created by publicKeyFromString() were being disposed before use in fetchKeyPackage(). Solution: Reorganized code to create and use PublicKey objects immediately within the same async block to prevent disposal. Modified both _handleContactTap() and _fetchMetadataForPublicKey() methods to ensure proper object lifecycle management with Rust bindings.

DroppableDisposedException comprehensive fix - Implemented robust retry mechanism for fetchKeyPackage calls based on pattern from dev.dart. Added _fetchKeyPackageWithRetry() method that creates fresh PublicKey objects for each retry attempt (3 attempts max with 200ms delays). Updated both _fetchMetadataForPublicKey() and _handleContactTap() to use the retry mechanism. This addresses the fundamental issue where RustArc objects were being disposed between creation and usage in flutter_rust_bridge.

UI decision logic debugging - Added comprehensive logging to _handleContactTap to diagnose why successful key package fetches were still showing legacy invite. Enhanced logging shows raw fetch results, null checks, type information, and final UI decision logic. This will help identify if the issue is in the fetch result handling or UI logic flow.

# chat messaging ui text_styling consistency
**MESSAGE TEXT INCONSISTENCY BUG FIX**:
- **Problem**: Messages with reactions vs messages without reactions had different text styling, causing inconsistent font sizes/weights in chat bubbles
- **Root Cause**: Duplicate TextStyle definitions in _buildMessageWithTimestamp() method - one for messages without reactions (shared textStyle variable) and another inline TextStyle for messages with reactions
- **Fix**: Moved textStyle definition to top of method as single source of truth, ensuring ALL message text uses identical styling regardless of whether they have reactions
- **Files Modified**: `/lib/ui/chat/widgets/message_widget.dart`
- **Key Change**: Both code paths now use the same `textStyle` variable instead of creating duplicate inline styles
- **Result**: Consistent message text appearance across all chat messages

