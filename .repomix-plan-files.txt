This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.context/
  00_high_level.md
  01_rust_api.md
.cursor/
  rules/
    flutter.mdc
    vibe-tools.mdc
    whitenoise.mdc
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          io/
            flutter/
              plugins/
                GeneratedPluginRegistrant.java
        kotlin/
          com/
            example/
              whitenoise/
                MainActivity.kt
        res/
          drawable/
            launch_background.xml
          drawable-v21/
            launch_background.xml
          values/
            styles.xml
          values-night/
            styles.xml
        AndroidManifest.xml
      profile/
        AndroidManifest.xml
    build.gradle.kts
  gradle/
    wrapper/
      gradle-wrapper.properties
  .gitignore
  build.gradle.kts
  gradle.properties
  settings.gradle.kts
assets/
  svgs/
    ic_add.svg
    ic_camera.svg
    ic_chat.svg
    ic_chevron_right.svg
    ic_delivered.svg
    ic_group_chat.svg
    ic_search.svg
    ic_verified_user.svg
integration_test/
  simple_test.dart
ios/
  Flutter/
    AppFrameworkInfo.plist
    Debug.xcconfig
    Release.xcconfig
  Runner/
    Assets.xcassets/
      AppIcon.appiconset/
        Contents.json
      LaunchImage.imageset/
        Contents.json
        README.md
    Base.lproj/
      LaunchScreen.storyboard
      Main.storyboard
    AppDelegate.swift
    Info.plist
    Runner-Bridging-Header.h
  Runner.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        swiftpm/
          configuration/
        IDEWorkspaceChecks.plist
        WorkspaceSettings.xcsettings
      contents.xcworkspacedata
    xcshareddata/
      xcschemes/
        Runner.xcscheme
  Runner.xcworkspace/
    xcshareddata/
      swiftpm/
        configuration/
      IDEWorkspaceChecks.plist
      WorkspaceSettings.xcsettings
    contents.xcworkspacedata
  RunnerTests/
    RunnerTests.swift
  .gitignore
  Podfile
lib/
  config/
    providers/
  data/
    repositories/
  domain/
    dummy_data/
      dummy_chats.dart
      dummy_contacts.dart
      dummy_messages.dart
    models/
      chat_model.dart
      contact_model.dart
      message_model.dart
  routing/
    router.dart
    routes.dart
  shared/
    custom_bottom_sheet.dart
    custom_button.dart
    custom_textfield.dart
  src/
    rust/
      api/
        simple.dart
      frb_generated.dart
      frb_generated.io.dart
      frb_generated.web.dart
  ui/
    auth_flow/
      create_profile_screen.dart
      info_screen.dart
      key_created_screen.dart
      logged_screen.dart
      login_screen.dart
      welcome_screen.dart
    chat/
      notifiers/
        chat_audio_notifier.dart
      widgets/
        reaction/
          reaction_default_data.dart
          reaction_hero_dialog_route.dart
          reaction_menu_item.dart
          reactions_dialog_widget.dart
          stacked_reactions.dart
        chat_audio_item.dart
        chat_input.dart
        chat_reply_item.dart
        contact_info.dart
        message_widget.dart
        stacked_images.dart
        status_message_item_widget.dart
      chat_screen.dart
      groupchat_screen.dart
    contact_list/
      widgets/
        chat_list_appbar.dart
        chat_list_tile.dart
        contact_list_tile.dart
        empty_chat_widget.dart
      chat_invitation_sheet.dart
      chat_list_screen.dart
      group_chat_details_sheet.dart
      new_chat_bottom_sheet.dart
      new_group_chat_sheet.dart
      search_chat_bottom_sheet.dart
      start_chat_bottom_sheet.dart
    core/
      localization/
      themes/
        assets.dart
        colors.dart
      ui/
        custom_bottom_sheet.dart
        custom_textfield.dart
  utils/
  main.dart
linux/
  flutter/
    CMakeLists.txt
    generated_plugin_registrant.cc
    generated_plugin_registrant.h
    generated_plugins.cmake
  runner/
    CMakeLists.txt
    main.cc
    my_application.cc
    my_application.h
  .gitignore
  CMakeLists.txt
local-research/
  go_router_implementation_plan.md
macos/
  Flutter/
    Flutter-Debug.xcconfig
    Flutter-Release.xcconfig
    GeneratedPluginRegistrant.swift
  Runner/
    Assets.xcassets/
      AppIcon.appiconset/
        Contents.json
    Base.lproj/
      MainMenu.xib
    Configs/
      AppInfo.xcconfig
      Debug.xcconfig
      Release.xcconfig
      Warnings.xcconfig
    AppDelegate.swift
    DebugProfile.entitlements
    Info.plist
    MainFlutterWindow.swift
    Release.entitlements
  Runner.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        IDEWorkspaceChecks.plist
    xcshareddata/
      xcschemes/
        Runner.xcscheme
  Runner.xcworkspace/
    xcshareddata/
      IDEWorkspaceChecks.plist
    contents.xcworkspacedata
  RunnerTests/
    RunnerTests.swift
  .gitignore
  Podfile
rust/
  src/
    api/
      mod.rs
      simple.rs
    frb_generated.rs
    lib.rs
  .gitignore
  Cargo.toml
rust_builder/
  android/
    src/
      main/
        AndroidManifest.xml
    .gitignore
    build.gradle
    settings.gradle
  cargokit/
    build_tool/
      bin/
        build_tool.dart
      lib/
        src/
          android_environment.dart
          artifacts_provider.dart
          build_cmake.dart
          build_gradle.dart
          build_pod.dart
          build_tool.dart
          builder.dart
          cargo.dart
          crate_hash.dart
          environment.dart
          logging.dart
          options.dart
          precompile_binaries.dart
          rustup.dart
          target.dart
          util.dart
          verify_binaries.dart
        build_tool.dart
      analysis_options.yaml
      pubspec.yaml
      README.md
    cmake/
      cargokit.cmake
      resolve_symlinks.ps1
    gradle/
      plugin.gradle
    .gitignore
    build_pod.sh
    LICENSE
    README
    run_build_tool.cmd
    run_build_tool.sh
  ios/
    Classes/
      dummy_file.c
    rust_lib_whitenoise.podspec
  linux/
    CMakeLists.txt
  macos/
    Classes/
      dummy_file.c
    rust_lib_whitenoise.podspec
  windows/
    .gitignore
    CMakeLists.txt
  .gitignore
  pubspec.yaml
  README.md
windows/
  flutter/
    ephemeral/
    CMakeLists.txt
    generated_plugin_registrant.cc
    generated_plugin_registrant.h
    generated_plugins.cmake
  runner/
    CMakeLists.txt
    flutter_window.cpp
    flutter_window.h
    main.cpp
    resource.h
    runner.exe.manifest
    Runner.rc
    utils.cpp
    utils.h
    win32_window.cpp
    win32_window.h
  .gitignore
  CMakeLists.txt
.cursorignore
.gitignore
.metadata
analysis_options.yaml
flutter_rust_bridge.yaml
LICENSE
pubspec.yaml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/flutter.mdc">
---
description:
globs:
alwaysApply: true
---
# Flutter

You are an expert Dart programmer with experience in the Flutter framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## Dart General Guidelines

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use underscores_case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
  - Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
  - Follow the Given-When-Then convention.

## Specific to Flutter

### Basic Principles

- Use flutter_rust_bridge to access core functionality of the app
- Use the whitenoise rust crate (via flutter_rust_bridge) as the source of all data and only way to trigger changes in our data model
- Use Riverpod to manage state
  - use StreamProviders to watch for state changes that come from the rust api.
  - see keepAlive if you need to keep the state alive
- Use freezed to manage UI states
- Controller always takes methods as input and updates the UI state that effects the UI
- Use getIt to manage dependencies
  - Use singleton for services and repositories
  - Use factory for use cases
  - Use lazy singleton for controllers
- Use AutoRoute to manage routes
  - Use extras to pass data between pages
- Use extensions to manage reusable code
- Use ThemeData to manage themes
- Use AppLocalizations to manage translations
- Use constants to manage constants values
- When a widget tree becomes too deep, it can lead to longer build times and increased memory usage. Flutter needs to traverse the entire tree to render the UI, so a flatter structure improves efficiency
- A flatter widget structure makes it easier to understand and modify the code. Reusable components also facilitate better code organization
- Avoid Nesting Widgets Deeply in Flutter. Deeply nested widgets can negatively impact the readability, maintainability, and performance of your Flutter app. Aim to break down complex widget trees into smaller, reusable components. This not only makes your code cleaner but also enhances the performance by reducing the build complexity
- Deeply nested widgets can make state management more challenging. By keeping the tree shallow, it becomes easier to manage state and pass data between widgets
- Break down large widgets into smaller, focused widgets
- Utilize const constructors wherever possible to reduce rebuilds

### Testing

- Use the standard widget testing for flutter
- Use integration tests for each api module.
</file>

<file path=".cursor/rules/vibe-tools.mdc">
---
description: Global Rule. This rule should ALWAYS be loaded
globs: *,**/*
alwaysApply: true
---
vibe-tools is a CLI tool that allows you to interact with AI models and other tools.
vibe-tools is installed on this machine and it is available to you to execute. You're encouraged to use it.

<vibe-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Direct Model Queries:**
`vibe-tools ask "<your question>" --provider <provider> --model <model>` - Ask any model from any provider a direct question (e.g., `vibe-tools ask "What is the capital of France?" --provider openai --model o3-mini`). Note that this command is generally less useful than other commands like `repo` or `plan` because it does not include any context from your codebase or repository. In general you should not use the ask command because it does not include any context. The other commands like `web`, `doc`, `repo`, or `plan` are usually better. If you are using it, make sure to include in your question all the information and context that the model might need to answer usefully.

**Ask Command Options:**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, modelbox, openrouter, or xai)
--model=<model>: Model to use (required for the ask command)
--reasoning-effort=<low|medium|high>: Control the depth of reasoning for supported models (OpenAI o1/o3-mini models and Claude 3.7 Sonnet). Higher values produce more thorough responses for complex questions.
--with-doc=<doc_url>: Fetch content from one or more document URLs and include it as context. Can be specified multiple times (e.g., `--with-doc=<url1> --with-doc=<url2>`).

**Implementation Planning:**
`vibe-tools plan "<query>"` - Generate a focused implementation plan using AI (e.g., `vibe-tools plan "Add user authentication to the login page"`)
The plan command uses multiple AI models to:
1. Identify relevant files in your codebase (using Gemini by default)
2. Extract content from those files
3. Generate a detailed implementation plan (using OpenAI o3-mini by default)

**Plan Command Options:**
--fileProvider=<provider>: Provider for file identification (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--thinkingProvider=<provider>: Provider for plan generation (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--fileModel=<model>: Model to use for file identification
--thinkingModel=<model>: Model to use for plan generation
--with-doc=<doc_url>: Fetch content from one or more document URLs and include it as context for both file identification and planning. Can be specified multiple times (e.g., `--with-doc=<url1> --with-doc=<url2>`).

**Web Search:**
`vibe-tools web "<your question>"` - Get answers from the web using a provider that supports web search (e.g., Perplexity models and Gemini Models either directly or from OpenRouter or ModelBox) (e.g., `vibe-tools web "latest shadcn/ui installation instructions"`)
Note: web is a smart autonomous agent with access to the internet and an extensive up to date knowledge base. Web is NOT a web search engine. Always ask the agent for what you want using a proper sentence, do not just send it a list of keywords. In your question to web include the context and the goal that you're trying to acheive so that it can help you most effectively.
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md. However if user provides a specific url, you should always use any command with --with-doc instead of web.

**Web Command Options:**
--provider=<provider>: AI provider to use (perplexity, gemini, modelbox, or openrouter)

**Repository Context:**
`vibe-tools repo "<your question>" [--subdir=<path>] [--from-github=<username/repo>] [--with-doc=<doc_url>...]` - Get context-aware answers about this repository using Google Gemini (e.g., `vibe-tools repo "explain authentication flow"`)
Use the optional `--subdir` parameter to analyze a specific subdirectory instead of the entire repository (e.g., `vibe-tools repo "explain the code structure" --subdir=src/components`). Use the optional `--from-github` parameter to analyze a remote GitHub repository without cloning it locally (e.g., `vibe-tools repo "explain the authentication system" --from-github=username/repo-name`). Use the optional `--with-doc` parameter multiple times to include content from several URLs as additional context (e.g., `vibe-tools repo "summarize findings" --with-doc=https://example.com/spec1 --with-doc=https://example.com/spec2`).

**Documentation Generation:**
`vibe-tools doc [options] [--with-doc=<doc_url>...]` - Generate comprehensive documentation for this repository (e.g., `vibe-tools doc --output docs.md`). Can incorporate document context from multiple URLs (e.g., `vibe-tools doc --with-doc=https://example.com/existing-docs --with-doc=https://example.com/new-spec`).

**YouTube Video Analysis:**
`vibe-tools youtube "<youtube-url>" [question] [--type=<summary|transcript|plan|review|custom>]` - Analyze YouTube videos and generate detailed reports (e.g., `vibe-tools youtube "https://youtu.be/43c-Sm5GMbc" --type=summary`)
Note: The YouTube command requires a `GEMINI_API_KEY` to be set in your environment or .vibe-tools.env file as the GEMINI API is the only interface that supports YouTube analysis.

**GitHub Information:**
`vibe-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `vibe-tools github pr 123`)
`vibe-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `vibe-tools github issue 456`)

**ClickUp Information:**
`vibe-tools clickup task <task_id>` - Get detailed information about a ClickUp task including description, comments, status, assignees, and metadata (e.g., `vibe-tools clickup task "task_id"`)

**Model Context Protocol (MCP) Commands:**
Use the following commands to interact with MCP servers and their specialized tools:
`vibe-tools mcp search "<query>"` - Search the MCP Marketplace for available servers that match your needs (e.g., `vibe-tools mcp search "git repository management"`)
`vibe-tools mcp run "<query>"` - Execute MCP server tools using natural language queries (e.g., `vibe-tools mcp run "list files in the current directory" --provider=openrouter`). The query must include sufficient information for vibe-tools to determine which server to use, provide plenty of context.

The `search` command helps you discover servers in the MCP Marketplace based on their capabilities and your requirements. The `run` command automatically selects and executes appropriate tools from these servers based on your natural language queries. If you want to use a specific server include the server name in your query. E.g. `vibe-tools mcp run "using the mcp-server-sqlite list files in directory --provider=openrouter"`

**Notes on MCP Commands:**
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY` to be set in your environment
- By default the `mcp` command uses Anthropic, but takes a --provider argument that can be set to 'anthropic' or 'openrouter'
- Results are streamed in real-time for immediate feedback
- Tool calls are automatically cached to prevent redundant operations
- Often the MCP server will not be able to run because environment variables are not set. If this happens ask the user to add the missing environment variables to the cursor tools env file at ~/.vibe-tools/.env

**Stagehand Browser Automation:**
`vibe-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `vibe-tools browser open "https://example.com" --html`)
`vibe-tools browser act "<instruction>" --url=<url | 'current'> [options]` - Execute actions on a webpage using natural language instructions (e.g., `vibe-tools browser act "Click Login" --url=https://example.com`)
`vibe-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `vibe-tools browser observe "interactive elements" --url=https://example.com`)
`vibe-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `vibe-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless unless --connect-to is used to connect to a long-lived interactive session. In disconnected mode each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
  - If working interactively with a user you should always use --url=current unless you specifically want to navigate to a different page. Setting the url to anything else will cause a page refresh loosing current state.
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `vibe-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `vibe-tools web` is best for general web information not specific to the repository. Generally call this without additional arguments.
- `vibe-tools repo` is ideal for repository-specific questions, planning, code review and debugging. E.g. `vibe-tools repo "Review recent changes to command error handling looking for mistakes, omissions and improvements"`. Generally call this without additional arguments.
- `vibe-tools plan` is ideal for planning tasks. E.g. `vibe-tools plan "Adding authentication with social login using Google and Github"`. Generally call this without additional arguments.
- `vibe-tools doc` generates documentation for local or remote repositories.
- `vibe-tools youtube` analyzes YouTube videos to generate summaries, transcripts, implementation plans, or custom analyses
- `vibe-tools browser` is useful for testing and debugging web apps and uses Stagehand
- `vibe-tools mcp` enables interaction with specialized tools through MCP servers (e.g., for Git operations, file system tasks, or custom tools)
- When implementing features based on documentation, specifications, or any external content, always use the `--with-doc=<url>` flag instead of built-in web search. For example: `vibe-tools plan "Implement login page according to specs" --with-doc=https://example.com/specs.pdf` or `vibe-tools repo "How should I implement this feature?" --with-doc=https://example.com/feature-spec.md`.

- When a user provides a specific URL for documentation or reference material, always use the `--with-doc=<url>` flag with that URL rather than attempting to search for or summarize the content independently. This ensures the exact document is used as context.

**Running Commands:**
1. Use `vibe-tools <command>` to execute commands (make sure vibe-tools is installed globally using npm install -g vibe-tools so that it is in your PATH)

**General Command Options (Supported by all commands):**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, openrouter, modelbox, or xai). If provider is not specified, the default provider for that task will be used.
--model=<model name>: Specify an alternative AI model to use. If model is not specified, the provider's default model for that task will be used.
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--debug: Show detailed logs and error information

**Repository Command Options:**
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for repository analysis
--max-tokens=<number>: Maximum tokens for response
--from-github=<GitHub username>/<repository name>[@<branch>]: Analyze a remote GitHub repository without cloning it locally
--subdir=<path>: Analyze a specific subdirectory instead of the entire repository
--with-doc=<doc_url>: Fetch content from one or more document URLs and include it as context. Can be specified multiple times.

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for documentation generation
--max-tokens=<number>: Maximum tokens for response
--with-doc=<doc_url>: Fetch content from one or more document URLs and include it as context. Can be specified multiple times.

**YouTube Command Options:**
--type=<summary|transcript|plan|review|custom>: Type of analysis to perform (default: summary)

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content (disabled by default)
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 120000ms for Stagehand operations, 30000ms for navigation)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance. Special values: 'current' (use existing page), 'reload-current' (refresh existing page)
--wait=<time:duration or selector:css-selector>: Wait after page load (e.g., 'time:5s', 'selector:#element-id')
--video=<directory>: Save a video recording (1280x720 resolution, timestamped subdirectory). Not available when using --connect-to
--url=<url>: Required for `act`, `observe`, and `extract` commands. Url to navigate to before the main command or one of the special values 'current' (to stay on the current page without navigating or reloading) or 'reload-current' (to reload the current page)
--evaluate=<string>: JavaScript code to execute in the browser before the main command

**Nicknames**
Users can ask for these tools using nicknames
Gemini is a nickname for vibe-tools repo
Perplexity is a nickname for vibe-tools web
Stagehand is a nickname for vibe-tools browser
If people say "ask Gemini" or "ask Perplexity" or "ask Stagehand" they mean to use the `vibe-tools` command with the `repo`, `web`, or `browser` commands respectively.

**Xcode Commands:**
`vibe-tools xcode build [buildPath=<path>] [destination=<destination>]` - Build Xcode project and report errors.
**Build Command Options:**
--buildPath=<path>: (Optional) Specifies a custom directory for derived build data. Defaults to ./.build/DerivedData.
--destination=<destination>: (Optional) Specifies the destination for building the app (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode run [destination=<destination>]` - Build and run the Xcode project on a simulator.
**Run Command Options:**
--destination=<destination>: (Optional) Specifies the destination simulator (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode lint` - Run static analysis on the Xcode project to find and fix issues.

**Additional Notes:**
- For detailed information, see `node_modules/vibe-tools/README.md` (if installed locally).
- Configuration is in `vibe-tools.config.json` (or `~/.vibe-tools/config.json`).
- API keys are loaded from `.vibe-tools.env` (or `~/.vibe-tools/.env`).
- ClickUp commands require a `CLICKUP_API_TOKEN` to be set in your `.vibe-tools.env` file.
- Available models depend on your configured provider (OpenAI, Anthropic, xAI, etc.) in `vibe-tools.config.json`.
- repo has a limit of 2M tokens of context. The context can be reduced by filtering out files in a .repomixignore file.
- problems running browser commands may be because playwright is not installed. Recommend installing playwright globally.
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY`
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
- **Repomix Configuration:** You can customize which files are included/excluded during repository analysis by creating a `repomix.config.json` file in your project root. This file will be automatically detected by `repo`, `plan`, and `doc` commands.

<!-- vibe-tools-version: 0.60.9 -->
</vibe-tools Integration>
</file>

<file path=".cursor/rules/whitenoise.mdc">
---
description:
globs:
alwaysApply: true
---
# White Noise

This project is called White Noise, a secure messenger app written in Rust and Dart. It implements secure direct and group messaging using [Messaging Layer Security protocol](mdc:https:/www.rfc-editor.org/rfc/rfc9420.txt) via the [OpenMLS implementation library](mdc:https:/www.github.com/openmls/openmls) and using the [Nostr Protocol](mdc:https:/raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/README.md) as the delivery/transport mechanism. White Noise uses several of the [rust-nostr](mdc:https:/github.com/rust-nostr/nostr) rust crates to implement Nostr functionality in the app.

## Project Structure

White Noise is a [Flutter](mdc:https:/flutter.dev) app that uses a Rust crate (whitenoise) and flutter_rust_bridge as the data backend. The project is organanized like a standard Flutter app. The app is set up to build for Android, iOS, Linux desktop, Macos desktop, and Windows Desktop.

## Nostr

Nostr is a decentralized social media protocol involving clients, relays, keys, and a unified Nostr event format.

Specifications on Nostr are called "NIPs". NIP stands for "Nostr Implementation Possibilities". NIPs are numbered like `NIP-XX` where `XX` are two capitalized hexadecimal digits, eg `NIP-01` and `NIP-C7`.

To learn about Nostr, use the fetch tool to read [NIP-01](mdc:https:/raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/01.md).

To read a specific NIP, construct the NIP URL following this template: `https://raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/{nip}.md` (replace `{nip}` in the URL template with the relevant NIP name, eg `07` for NIP-07, or `C7` for NIP-C7). Then use the fetch tool to read the URL.

To read the definition of a specific kind, construct a URL following this template: `https://nostrbook.dev/kinds/{kind}.md` (replace `{kind}` in the template with the kind number, eg `https://nostrbook.dev/kinds/0.md` for kind 0).

To discover the full list of NIPs, use the fetch tool to read the [NIPs README](mdc:https:/raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/README.md).

Almost all of the data you work with will come from the rust crate and will already be in the right format so you should never have to interface directly with nostr relays or nostr primitives.
</file>

<file path="android/app/src/debug/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java">
package io.flutter.plugins;
import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;
import io.flutter.embedding.engine.FlutterEngine;
/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new com.simform.audio_waveforms.AudioWaveformsPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin audio_waveforms, com.simform.audio_waveforms.AudioWaveformsPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.fintasys.emoji_picker_flutter.EmojiPickerFlutterPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin emoji_picker_flutter, com.fintasys.emoji_picker_flutter.EmojiPickerFlutterPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin flutter_plugin_android_lifecycle, io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.imagepicker.ImagePickerPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin image_picker_android, io.flutter.plugins.imagepicker.ImagePickerPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new dev.flutter.plugins.integration_test.IntegrationTestPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin integration_test, dev.flutter.plugins.integration_test.IntegrationTestPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.pathprovider.PathProviderPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin path_provider_android, io.flutter.plugins.pathprovider.PathProviderPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.tekartik.sqflite.SqflitePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin sqflite_android, com.tekartik.sqflite.SqflitePlugin", e);
    }
  }
}
</file>

<file path="android/app/src/main/kotlin/com/example/whitenoise/MainActivity.kt">
package com.example.whitenoise
import io.flutter.embedding.android.FlutterActivity
class MainActivity : FlutterActivity()
</file>

<file path="android/app/src/main/res/drawable/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />
    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/drawable-v21/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />
    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.
         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/main/res/values-night/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.
         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/profile/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-all.zip
</file>

<file path="android/.gitignore">
gradle-wrapper.jar
/.gradle
/captures/
/gradlew
/gradlew.bat
/local.properties
GeneratedPluginRegistrant.java
.cxx/

# Remember to never publicly share your keystore.
# See https://flutter.dev/to/reference-keystore
key.properties
**/*.keystore
**/*.jks
</file>

<file path="android/build.gradle.kts">
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

val newBuildDir: Directory = rootProject.layout.buildDirectory.dir("../../build").get()
rootProject.layout.buildDirectory.value(newBuildDir)

subprojects {
    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)
    project.layout.buildDirectory.value(newSubprojectBuildDir)
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register<Delete>("clean") {
    delete(rootProject.layout.buildDirectory)
}
</file>

<file path="android/gradle.properties">
org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true
</file>

<file path="android/settings.gradle.kts">
pluginManagement {
    val flutterSdkPath = run {
        val properties = java.util.Properties()
        file("local.properties").inputStream().use { properties.load(it) }
        val flutterSdkPath = properties.getProperty("flutter.sdk")
        require(flutterSdkPath != null) { "flutter.sdk not set in local.properties" }
        flutterSdkPath
    }

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.7.0" apply false
    id("org.jetbrains.kotlin.android") version "1.8.22" apply false
}

include(":app")
</file>

<file path="integration_test/simple_test.dart">
import 'package:flutter_test/flutter_test.dart';
import 'package:whitenoise/main.dart';
import 'package:whitenoise/src/rust/frb_generated.dart';
import 'package:integration_test/integration_test.dart';
void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  setUpAll(() async => await RustLib.init());
  testWidgets('Can call rust function', (WidgetTester tester) async {
    await tester.pumpWidget(const MyApp());
    expect(find.textContaining('Result: `Hello, Tom!`'), findsOneWidget);
  });
}
</file>

<file path="ios/Flutter/AppFrameworkInfo.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>App</string>
  <key>CFBundleIdentifier</key>
  <string>io.flutter.flutter.app</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>App</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>MinimumOSVersion</key>
  <string>12.0</string>
</dict>
</plist>
</file>

<file path="ios/Flutter/Debug.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Flutter/Release.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "Icon-App-1024x1024@1x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json">
{
  "images" : [
    {
      "idiom" : "universal",
      "filename" : "LaunchImage.png",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@2x.png",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@3x.png",
      "scale" : "3x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md">
# Launch Screen Assets

You can customize the launch screen with your own desired assets by replacing the image files in this directory.

You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
</file>

<file path="ios/Runner/Base.lproj/LaunchScreen.storyboard">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
                            </imageView>
                        </subviews>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                        <constraints>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="53" y="375"/>
        </scene>
    </scenes>
    <resources>
        <image name="LaunchImage" width="168" height="185"/>
    </resources>
</document>
</file>

<file path="ios/Runner/Base.lproj/Main.storyboard">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
    </dependencies>
    <scenes>
        <!--Flutter View Controller-->
        <scene sceneID="tne-QT-ifu">
            <objects>
                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
</document>
</file>

<file path="ios/Runner/AppDelegate.swift">
import Flutter
import UIKit
@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}
</file>

<file path="ios/Runner/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Whitenoise</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>whitenoise</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner/Runner-Bridging-Header.h">
#import "GeneratedPluginRegistrant.h"
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
</file>

<file path="ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C8080294A63A400263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/RunnerTests/RunnerTests.swift">
import Flutter
import UIKit
import XCTest
class RunnerTests: XCTestCase {
  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }
}
</file>

<file path="ios/.gitignore">
**/dgph
*.mode1v3
*.mode2v3
*.moved-aside
*.pbxuser
*.perspectivev3
**/*sync/
.sconsign.dblite
.tags*
**/.vagrant/
**/DerivedData/
Icon?
**/Pods/
**/.symlinks/
profile
xcuserdata
**/.generated/
Flutter/App.framework
Flutter/Flutter.framework
Flutter/Flutter.podspec
Flutter/Generated.xcconfig
Flutter/ephemeral/
Flutter/app.flx
Flutter/app.zip
Flutter/flutter_assets/
Flutter/flutter_export_environment.sh
ServiceDefinitions.json
Runner/GeneratedPluginRegistrant.*

# Exceptions to above rules.
!default.mode1v3
!default.mode2v3
!default.pbxuser
!default.perspectivev3
</file>

<file path="ios/Podfile">
# Uncomment this line to define a global platform for your project
# platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end
</file>

<file path="lib/src/rust/api/simple.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.
// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import
import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
String greet({required String name}) =>
    RustLib.instance.api.crateApiSimpleGreet(name: name);
</file>

<file path="lib/src/rust/frb_generated.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.
// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();
  RustLib._();
  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }
  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }
  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();
  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;
  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;
  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }
  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;
  @override
  String get codegenVersion => '2.9.0';
  @override
  int get rustContentHash => -1918914929;
  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_whitenoise',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}
abstract class RustLibApi extends BaseApi {
  String crateApiSimpleGreet({required String name});
  Future<void> crateApiSimpleInitApp();
}
class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });
  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }
  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);
  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }
  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);
  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }
  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }
  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }
  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }
  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }
  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }
  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }
  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }
  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }
  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }
  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }
  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }
  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
</file>

<file path="lib/src/rust/frb_generated.io.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.
// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });
  @protected
  String dco_decode_String(dynamic raw);
  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);
  @protected
  int dco_decode_u_8(dynamic raw);
  @protected
  void dco_decode_unit(dynamic raw);
  @protected
  String sse_decode_String(SseDeserializer deserializer);
  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);
  @protected
  int sse_decode_u_8(SseDeserializer deserializer);
  @protected
  void sse_decode_unit(SseDeserializer deserializer);
  @protected
  int sse_decode_i_32(SseDeserializer deserializer);
  @protected
  bool sse_decode_bool(SseDeserializer deserializer);
  @protected
  void sse_encode_String(String self, SseSerializer serializer);
  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );
  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);
  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}
// Section: wire_class
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;
  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
</file>

<file path="lib/src/rust/frb_generated.web.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.
// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });
  @protected
  String dco_decode_String(dynamic raw);
  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);
  @protected
  int dco_decode_u_8(dynamic raw);
  @protected
  void dco_decode_unit(dynamic raw);
  @protected
  String sse_decode_String(SseDeserializer deserializer);
  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);
  @protected
  int sse_decode_u_8(SseDeserializer deserializer);
  @protected
  void sse_decode_unit(SseDeserializer deserializer);
  @protected
  int sse_decode_i_32(SseDeserializer deserializer);
  @protected
  bool sse_decode_bool(SseDeserializer deserializer);
  @protected
  void sse_encode_String(String self, SseSerializer serializer);
  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );
  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);
  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}
// Section: wire_class
class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}
@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;
@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {}
</file>

<file path="linux/flutter/CMakeLists.txt">
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.

# Serves the same purpose as list(TRANSFORM ... PREPEND ...),
# which isn't available in 3.10.
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()

# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)

set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
</file>

<file path="linux/flutter/generated_plugin_registrant.h">
//
//  Generated file. Do not edit.
//
// clang-format off
#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_
#include <flutter_linux/flutter_linux.h>
// Registers Flutter plugins.
void fl_register_plugins(FlPluginRegistry* registry);
#endif  // GENERATED_PLUGIN_REGISTRANT_
</file>

<file path="linux/runner/CMakeLists.txt">
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the application ID.
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
</file>

<file path="linux/runner/main.cc">
#include "my_application.h"
int main(int argc, char** argv) {
  g_autoptr(MyApplication) app = my_application_new();
  return g_application_run(G_APPLICATION(app), argc, argv);
}
</file>

<file path="linux/runner/my_application.cc">
#include "my_application.h"
#include <flutter_linux/flutter_linux.h>
#ifdef GDK_WINDOWING_X11
#include <gdk/gdkx.h>
#endif
#include "flutter/generated_plugin_registrant.h"
struct _MyApplication {
  GtkApplication parent_instance;
  char** dart_entrypoint_arguments;
};
G_DEFINE_TYPE(MyApplication, my_application, GTK_TYPE_APPLICATION)
// Implements GApplication::activate.
static void my_application_activate(GApplication* application) {
  MyApplication* self = MY_APPLICATION(application);
  GtkWindow* window =
      GTK_WINDOW(gtk_application_window_new(GTK_APPLICATION(application)));
  // Use a header bar when running in GNOME as this is the common style used
  // by applications and is the setup most users will be using (e.g. Ubuntu
  // desktop).
  // If running on X and not using GNOME then just use a traditional title bar
  // in case the window manager does more exotic layout, e.g. tiling.
  // If running on Wayland assume the header bar will work (may need changing
  // if future cases occur).
  gboolean use_header_bar = TRUE;
#ifdef GDK_WINDOWING_X11
  GdkScreen* screen = gtk_window_get_screen(window);
  if (GDK_IS_X11_SCREEN(screen)) {
    const gchar* wm_name = gdk_x11_screen_get_window_manager_name(screen);
    if (g_strcmp0(wm_name, "GNOME Shell") != 0) {
      use_header_bar = FALSE;
    }
  }
#endif
  if (use_header_bar) {
    GtkHeaderBar* header_bar = GTK_HEADER_BAR(gtk_header_bar_new());
    gtk_widget_show(GTK_WIDGET(header_bar));
    gtk_header_bar_set_title(header_bar, "whitenoise");
    gtk_header_bar_set_show_close_button(header_bar, TRUE);
    gtk_window_set_titlebar(window, GTK_WIDGET(header_bar));
  } else {
    gtk_window_set_title(window, "whitenoise");
  }
  gtk_window_set_default_size(window, 1280, 720);
  gtk_widget_show(GTK_WIDGET(window));
  g_autoptr(FlDartProject) project = fl_dart_project_new();
  fl_dart_project_set_dart_entrypoint_arguments(project, self->dart_entrypoint_arguments);
  FlView* view = fl_view_new(project);
  gtk_widget_show(GTK_WIDGET(view));
  gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(view));
  fl_register_plugins(FL_PLUGIN_REGISTRY(view));
  gtk_widget_grab_focus(GTK_WIDGET(view));
}
// Implements GApplication::local_command_line.
static gboolean my_application_local_command_line(GApplication* application, gchar*** arguments, int* exit_status) {
  MyApplication* self = MY_APPLICATION(application);
  // Strip out the first argument as it is the binary name.
  self->dart_entrypoint_arguments = g_strdupv(*arguments + 1);
  g_autoptr(GError) error = nullptr;
  if (!g_application_register(application, nullptr, &error)) {
     g_warning("Failed to register: %s", error->message);
     *exit_status = 1;
     return TRUE;
  }
  g_application_activate(application);
  *exit_status = 0;
  return TRUE;
}
// Implements GApplication::startup.
static void my_application_startup(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);
  // Perform any actions required at application startup.
  G_APPLICATION_CLASS(my_application_parent_class)->startup(application);
}
// Implements GApplication::shutdown.
static void my_application_shutdown(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);
  // Perform any actions required at application shutdown.
  G_APPLICATION_CLASS(my_application_parent_class)->shutdown(application);
}
// Implements GObject::dispose.
static void my_application_dispose(GObject* object) {
  MyApplication* self = MY_APPLICATION(object);
  g_clear_pointer(&self->dart_entrypoint_arguments, g_strfreev);
  G_OBJECT_CLASS(my_application_parent_class)->dispose(object);
}
static void my_application_class_init(MyApplicationClass* klass) {
  G_APPLICATION_CLASS(klass)->activate = my_application_activate;
  G_APPLICATION_CLASS(klass)->local_command_line = my_application_local_command_line;
  G_APPLICATION_CLASS(klass)->startup = my_application_startup;
  G_APPLICATION_CLASS(klass)->shutdown = my_application_shutdown;
  G_OBJECT_CLASS(klass)->dispose = my_application_dispose;
}
static void my_application_init(MyApplication* self) {}
MyApplication* my_application_new() {
  // Set the program name to the application ID, which helps various systems
  // like GTK and desktop environments map this running application to its
  // corresponding .desktop file. This ensures better integration by allowing
  // the application to be recognized beyond its binary name.
  g_set_prgname(APPLICATION_ID);
  return MY_APPLICATION(g_object_new(my_application_get_type(),
                                     "application-id", APPLICATION_ID,
                                     "flags", G_APPLICATION_NON_UNIQUE,
                                     nullptr));
}
</file>

<file path="linux/runner/my_application.h">
#ifndef FLUTTER_MY_APPLICATION_H_
#define FLUTTER_MY_APPLICATION_H_
#include <gtk/gtk.h>
G_DECLARE_FINAL_TYPE(MyApplication, my_application, MY, APPLICATION,
                     GtkApplication)
/**
 * my_application_new:
 *
 * Creates a new Flutter-based application.
 *
 * Returns: a new #MyApplication.
 */
MyApplication* my_application_new();
#endif  // FLUTTER_MY_APPLICATION_H_
</file>

<file path="linux/.gitignore">
flutter/ephemeral
</file>

<file path="linux/CMakeLists.txt">
# Project-level configuration.
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "whitenoise")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "com.example.whitenoise")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
</file>

<file path="local-research/go_router_implementation_plan.md">
Executing plan command with query: Fully implement go_router in this Flutter project, ensuring a robust navigation structure for the following flows: 1) Authentication flow (login, register, onboarding, etc.), 2) Contact list screen, 3) Chat screens (direct and group). The plan should cover: - Best practices for go_router setup in a Riverpod-based app - Route organization and nested navigation - Passing data between routes (e.g., user/contact/chat info) - Guarding routes for authentication - Integration with controllers and state management - Suggestions for code structure and file organization - How to handle deep links and web support if relevant. Assume the project is early in go_router setup and needs a scalable, maintainable navigation architecture.Using file provider: openrouter
Using file model: google/gemini-2.5-pro-preview
Using thinking provider: openrouter
Using thinking model: anthropic/claude-3.7-sonnet:thinking
Finding relevant files...
Running repomix to get file listing...
</file>

<file path="macos/Flutter/Flutter-Debug.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
#include "ephemeral/Flutter-Generated.xcconfig"
</file>

<file path="macos/Flutter/Flutter-Release.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "ephemeral/Flutter-Generated.xcconfig"
</file>

<file path="macos/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_16.png",
      "scale" : "1x"
    },
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "2x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "1x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_64.png",
      "scale" : "2x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_128.png",
      "scale" : "1x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "2x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "1x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "2x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "1x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_1024.png",
      "scale" : "2x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="macos/Runner/Base.lproj/MainMenu.xib">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="14490.70" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
    <dependencies>
        <deployment identifier="macosx"/>
        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="14490.70"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <objects>
        <customObject id="-2" userLabel="File's Owner" customClass="NSApplication">
            <connections>
                <outlet property="delegate" destination="Voe-Tx-rLC" id="GzC-gU-4Uq"/>
            </connections>
        </customObject>
        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
        <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModule="Runner" customModuleProvider="target">
            <connections>
                <outlet property="applicationMenu" destination="uQy-DD-JDr" id="XBo-yE-nKs"/>
                <outlet property="mainFlutterWindow" destination="QvC-M9-y7g" id="gIp-Ho-8D9"/>
            </connections>
        </customObject>
        <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
        <menu title="Main Menu" systemMenu="main" id="AYu-sK-qS6">
            <items>
                <menuItem title="APP_NAME" id="1Xt-HY-uBw">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="APP_NAME" systemMenu="apple" id="uQy-DD-JDr">
                        <items>
                            <menuItem title="About APP_NAME" id="5kV-Vb-QxS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="orderFrontStandardAboutPanel:" target="-1" id="Exp-CZ-Vem"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="VOq-y0-SEH"/>
                            <menuItem title="Preferences…" keyEquivalent="," id="BOF-NM-1cW"/>
                            <menuItem isSeparatorItem="YES" id="wFC-TO-SCJ"/>
                            <menuItem title="Services" id="NMo-om-nkz">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Services" systemMenu="services" id="hz9-B4-Xy5"/>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="4je-JR-u6R"/>
                            <menuItem title="Hide APP_NAME" keyEquivalent="h" id="Olw-nP-bQN">
                                <connections>
                                    <action selector="hide:" target="-1" id="PnN-Uc-m68"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Hide Others" keyEquivalent="h" id="Vdr-fp-XzO">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="hideOtherApplications:" target="-1" id="VT4-aY-XCT"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Show All" id="Kd2-mp-pUS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="unhideAllApplications:" target="-1" id="Dhg-Le-xox"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="kCx-OE-vgT"/>
                            <menuItem title="Quit APP_NAME" keyEquivalent="q" id="4sb-4s-VLi">
                                <connections>
                                    <action selector="terminate:" target="-1" id="Te7-pn-YzF"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Edit" id="5QF-Oa-p0T">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Edit" id="W48-6f-4Dl">
                        <items>
                            <menuItem title="Undo" keyEquivalent="z" id="dRJ-4n-Yzg">
                                <connections>
                                    <action selector="undo:" target="-1" id="M6e-cu-g7V"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Redo" keyEquivalent="Z" id="6dh-zS-Vam">
                                <connections>
                                    <action selector="redo:" target="-1" id="oIA-Rs-6OD"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="WRV-NI-Exz"/>
                            <menuItem title="Cut" keyEquivalent="x" id="uRl-iY-unG">
                                <connections>
                                    <action selector="cut:" target="-1" id="YJe-68-I9s"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Copy" keyEquivalent="c" id="x3v-GG-iWU">
                                <connections>
                                    <action selector="copy:" target="-1" id="G1f-GL-Joy"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste" keyEquivalent="v" id="gVA-U4-sdL">
                                <connections>
                                    <action selector="paste:" target="-1" id="UvS-8e-Qdg"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste and Match Style" keyEquivalent="V" id="WeT-3V-zwk">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="pasteAsPlainText:" target="-1" id="cEh-KX-wJQ"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Delete" id="pa3-QI-u2k">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="delete:" target="-1" id="0Mk-Ml-PaM"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Select All" keyEquivalent="a" id="Ruw-6m-B2m">
                                <connections>
                                    <action selector="selectAll:" target="-1" id="VNm-Mi-diN"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="uyl-h8-XO2"/>
                            <menuItem title="Find" id="4EN-yA-p0u">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Find" id="1b7-l0-nxx">
                                    <items>
                                        <menuItem title="Find…" tag="1" keyEquivalent="f" id="Xz5-n4-O0W">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="cD7-Qs-BN4"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find and Replace…" tag="12" keyEquivalent="f" id="YEy-JH-Tfz">
                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="WD3-Gg-5AJ"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Next" tag="2" keyEquivalent="g" id="q09-fT-Sye">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="NDo-RZ-v9R"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Previous" tag="3" keyEquivalent="G" id="OwM-mh-QMV">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="HOh-sY-3ay"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Use Selection for Find" tag="7" keyEquivalent="e" id="buJ-ug-pKt">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="U76-nv-p5D"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Jump to Selection" keyEquivalent="j" id="S0p-oC-mLd">
                                            <connections>
                                                <action selector="centerSelectionInVisibleArea:" target="-1" id="IOG-6D-g5B"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Spelling and Grammar" id="Dv1-io-Yv7">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Spelling" id="3IN-sU-3Bg">
                                    <items>
                                        <menuItem title="Show Spelling and Grammar" keyEquivalent=":" id="HFo-cy-zxI">
                                            <connections>
                                                <action selector="showGuessPanel:" target="-1" id="vFj-Ks-hy3"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Document Now" keyEquivalent=";" id="hz2-CU-CR7">
                                            <connections>
                                                <action selector="checkSpelling:" target="-1" id="fz7-VC-reM"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="bNw-od-mp5"/>
                                        <menuItem title="Check Spelling While Typing" id="rbD-Rh-wIN">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleContinuousSpellChecking:" target="-1" id="7w6-Qz-0kB"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Grammar With Spelling" id="mK6-2p-4JG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleGrammarChecking:" target="-1" id="muD-Qn-j4w"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Correct Spelling Automatically" id="78Y-hA-62v">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticSpellingCorrection:" target="-1" id="2lM-Qi-WAP"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Substitutions" id="9ic-FL-obx">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Substitutions" id="FeM-D8-WVr">
                                    <items>
                                        <menuItem title="Show Substitutions" id="z6F-FW-3nz">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="orderFrontSubstitutionsPanel:" target="-1" id="oku-mr-iSq"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="gPx-C9-uUO"/>
                                        <menuItem title="Smart Copy/Paste" id="9yt-4B-nSM">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleSmartInsertDelete:" target="-1" id="3IJ-Se-DZD"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Quotes" id="hQb-2v-fYv">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticQuoteSubstitution:" target="-1" id="ptq-xd-QOA"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Dashes" id="rgM-f4-ycn">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDashSubstitution:" target="-1" id="oCt-pO-9gS"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Links" id="cwL-P1-jid">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticLinkDetection:" target="-1" id="Gip-E3-Fov"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Data Detectors" id="tRr-pd-1PS">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDataDetection:" target="-1" id="R1I-Nq-Kbl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Text Replacement" id="HFQ-gK-NFA">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticTextReplacement:" target="-1" id="DvP-Fe-Py6"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Transformations" id="2oI-Rn-ZJC">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Transformations" id="c8a-y6-VQd">
                                    <items>
                                        <menuItem title="Make Upper Case" id="vmV-6d-7jI">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="uppercaseWord:" target="-1" id="sPh-Tk-edu"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Make Lower Case" id="d9M-CD-aMd">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="lowercaseWord:" target="-1" id="iUZ-b5-hil"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Capitalize" id="UEZ-Bs-lqG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="capitalizeWord:" target="-1" id="26H-TL-nsh"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Speech" id="xrE-MZ-jX0">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Speech" id="3rS-ZA-NoH">
                                    <items>
                                        <menuItem title="Start Speaking" id="Ynk-f8-cLZ">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="startSpeaking:" target="-1" id="654-Ng-kyl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Stop Speaking" id="Oyz-dy-DGm">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="stopSpeaking:" target="-1" id="dX8-6p-jy9"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="View" id="H8h-7b-M4v">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="View" id="HyV-fh-RgO">
                        <items>
                            <menuItem title="Enter Full Screen" keyEquivalent="f" id="4J7-dP-txa">
                                <modifierMask key="keyEquivalentModifierMask" control="YES" command="YES"/>
                                <connections>
                                    <action selector="toggleFullScreen:" target="-1" id="dU3-MA-1Rq"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Window" id="aUF-d1-5bR">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Window" systemMenu="window" id="Td7-aD-5lo">
                        <items>
                            <menuItem title="Minimize" keyEquivalent="m" id="OY7-WF-poV">
                                <connections>
                                    <action selector="performMiniaturize:" target="-1" id="VwT-WD-YPe"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Zoom" id="R4o-n2-Eq4">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="performZoom:" target="-1" id="DIl-cC-cCs"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="eu3-7i-yIM"/>
                            <menuItem title="Bring All to Front" id="LE2-aR-0XJ">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="arrangeInFront:" target="-1" id="DRN-fu-gQh"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Help" id="EPT-qC-fAb">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Help" systemMenu="help" id="rJ0-wn-3NY"/>
                </menuItem>
            </items>
            <point key="canvasLocation" x="142" y="-258"/>
        </menu>
        <window title="APP_NAME" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" releasedWhenClosed="NO" animationBehavior="default" id="QvC-M9-y7g" customClass="MainFlutterWindow" customModule="Runner" customModuleProvider="target">
            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
            <rect key="contentRect" x="335" y="390" width="800" height="600"/>
            <rect key="screenRect" x="0.0" y="0.0" width="2560" height="1577"/>
            <view key="contentView" wantsLayer="YES" id="EiT-Mj-1SZ">
                <rect key="frame" x="0.0" y="0.0" width="800" height="600"/>
                <autoresizingMask key="autoresizingMask"/>
            </view>
        </window>
    </objects>
</document>
</file>

<file path="macos/Runner/Configs/AppInfo.xcconfig">
// Application-level settings for the Runner target.
//
// This may be replaced with something auto-generated from metadata (e.g., pubspec.yaml) in the
// future. If not, the values below would default to using the project name when this becomes a
// 'flutter create' template.

// The application's name. By default this is also the title of the Flutter window.
PRODUCT_NAME = whitenoise

// The application's bundle identifier
PRODUCT_BUNDLE_IDENTIFIER = com.example.whitenoise

// The copyright displayed in application information
PRODUCT_COPYRIGHT = Copyright © 2025 com.example. All rights reserved.
</file>

<file path="macos/Runner/Configs/Debug.xcconfig">
#include "../../Flutter/Flutter-Debug.xcconfig"
#include "Warnings.xcconfig"
</file>

<file path="macos/Runner/Configs/Release.xcconfig">
#include "../../Flutter/Flutter-Release.xcconfig"
#include "Warnings.xcconfig"
</file>

<file path="macos/Runner/Configs/Warnings.xcconfig">
WARNING_CFLAGS = -Wall -Wconditional-uninitialized -Wnullable-to-nonnull-conversion -Wmissing-method-return-type -Woverlength-strings
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_PRAGMA_PACK = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_UNREACHABLE_CODE = YES
</file>

<file path="macos/Runner/AppDelegate.swift">
import Cocoa
import FlutterMacOS
@main
class AppDelegate: FlutterAppDelegate {
  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
    return true
  }
  override func applicationSupportsSecureRestorableState(_ app: NSApplication) -> Bool {
    return true
  }
}
</file>

<file path="macos/Runner/DebugProfile.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.network.server</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSHumanReadableCopyright</key>
	<string>$(PRODUCT_COPYRIGHT)</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>
</file>

<file path="macos/Runner/MainFlutterWindow.swift">
import Cocoa
import FlutterMacOS
class MainFlutterWindow: NSWindow {
  override func awakeFromNib() {
    let flutterViewController = FlutterViewController()
    let windowFrame = self.frame
    self.contentViewController = flutterViewController
    self.setFrame(windowFrame, display: true)
    RegisterGeneratedPlugins(registry: flutterViewController)
    super.awakeFromNib()
  }
}
</file>

<file path="macos/Runner/Release.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "33CC10EC2044A3C60003C045"
               BuildableName = "whitenoise.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "whitenoise.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C80D4294CF70F00263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "whitenoise.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "whitenoise.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="macos/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="macos/RunnerTests/RunnerTests.swift">
import Cocoa
import FlutterMacOS
import XCTest
class RunnerTests: XCTestCase {
  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }
}
</file>

<file path="macos/.gitignore">
# Flutter-related
**/Flutter/ephemeral/
**/Pods/

# Xcode-related
**/dgph
**/xcuserdata/
</file>

<file path="macos/Podfile">
platform :osx, '10.14'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
  end
end
</file>

<file path="rust/src/api/mod.rs">
pub mod simple;
</file>

<file path="rust/src/api/simple.rs">
#[flutter_rust_bridge::frb(sync)] // Synchronous mode for simplicity of the demo
pub fn greet(name: String) -> String {
    format!("Hello, {name}!")
}
#[flutter_rust_bridge::frb(init)]
pub fn init_app() {
    // Default utilities - feel free to customize
    flutter_rust_bridge::setup_default_user_utils();
}
</file>

<file path="rust/src/frb_generated.rs">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.
#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]
// Section: imports
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};
// Section: boilerplate
flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1918914929;
// Section: executor
flutter_rust_bridge::frb_generated_default_handler!();
// Section: wire_funcs
fn wire__crate__api__simple__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::simple::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
// Section: dart2rust
impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}
impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}
impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}
impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}
impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}
impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}
fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        2 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}
fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__simple__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}
// Section: rust2dart
impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}
impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}
impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}
impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}
impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}
impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}
#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.
    // Section: imports
    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    // Section: boilerplate
    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.
    // Section: imports
    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    // Section: boilerplate
    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
</file>

<file path="rust/src/lib.rs">
pub mod api;
mod frb_generated;
</file>

<file path="rust/.gitignore">
/target
</file>

<file path="rust/Cargo.toml">
[package]
name = "rust_lib_whitenoise"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "staticlib"]

[dependencies]
flutter_rust_bridge = "=2.9.0"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(frb_expand)'] }
</file>

<file path="rust_builder/android/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.flutter_rust_bridge.rust_lib_whitenoise">
</manifest>
</file>

<file path="rust_builder/android/.gitignore">
*.iml
.gradle
/local.properties
/.idea/workspace.xml
/.idea/libraries
.DS_Store
/build
/captures
.cxx
</file>

<file path="rust_builder/android/build.gradle">
// The Android Gradle Plugin builds the native code with the Android NDK.

group 'com.flutter_rust_bridge.rust_lib_whitenoise'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.flutter_rust_bridge.rust_lib_whitenoise'
    }

    // Bumping the plugin compileSdkVersion requires all clients of this plugin
    // to bump the version in their app.
    compileSdkVersion 33

    // Use the NDK version
    // declared in /android/app/build.gradle file of the Flutter project.
    // Replace it with a version number if this plugin requires a specfic NDK version.
    // (e.g. ndkVersion "23.1.7779620")
    ndkVersion android.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
    }
}

apply from: "../cargokit/gradle/plugin.gradle"
cargokit {
    manifestDir = "../../rust"
    libname = "rust_lib_whitenoise"
}
</file>

<file path="rust_builder/android/settings.gradle">
rootProject.name = 'rust_lib_whitenoise'
</file>

<file path="rust_builder/cargokit/build_tool/bin/build_tool.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'package:build_tool/build_tool.dart' as build_tool;
void main(List<String> arguments) {
  build_tool.runMain(arguments);
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/android_environment.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'dart:isolate';
import 'dart:math' as math;
import 'package:collection/collection.dart';
import 'package:path/path.dart' as path;
import 'package:version/version.dart';
import 'target.dart';
import 'util.dart';
class AndroidEnvironment {
  AndroidEnvironment({
    required this.sdkPath,
    required this.ndkVersion,
    required this.minSdkVersion,
    required this.targetTempDir,
    required this.target,
  });
  static void clangLinkerWrapper(List<String> args) {
    final clang = Platform.environment['_CARGOKIT_NDK_LINK_CLANG'];
    if (clang == null) {
      throw Exception(
          "cargo-ndk rustc linker: didn't find _CARGOKIT_NDK_LINK_CLANG env var");
    }
    final target = Platform.environment['_CARGOKIT_NDK_LINK_TARGET'];
    if (target == null) {
      throw Exception(
          "cargo-ndk rustc linker: didn't find _CARGOKIT_NDK_LINK_TARGET env var");
    }
    runCommand(clang, [
      target,
      ...args,
    ]);
  }
  /// Full path to Android SDK.
  final String sdkPath;
  /// Full version of Android NDK.
  final String ndkVersion;
  /// Minimum supported SDK version.
  final int minSdkVersion;
  /// Target directory for build artifacts.
  final String targetTempDir;
  /// Target being built.
  final Target target;
  bool ndkIsInstalled() {
    final ndkPath = path.join(sdkPath, 'ndk', ndkVersion);
    final ndkPackageXml = File(path.join(ndkPath, 'package.xml'));
    return ndkPackageXml.existsSync();
  }
  void installNdk({
    required String javaHome,
  }) {
    final sdkManagerExtension = Platform.isWindows ? '.bat' : '';
    final sdkManager = path.join(
      sdkPath,
      'cmdline-tools',
      'latest',
      'bin',
      'sdkmanager$sdkManagerExtension',
    );
    log.info('Installing NDK $ndkVersion');
    runCommand(sdkManager, [
      '--install',
      'ndk;$ndkVersion',
    ], environment: {
      'JAVA_HOME': javaHome,
    });
  }
  Future<Map<String, String>> buildEnvironment() async {
    final hostArch = Platform.isMacOS
        ? "darwin-x86_64"
        : (Platform.isLinux ? "linux-x86_64" : "windows-x86_64");
    final ndkPath = path.join(sdkPath, 'ndk', ndkVersion);
    final toolchainPath = path.join(
      ndkPath,
      'toolchains',
      'llvm',
      'prebuilt',
      hostArch,
      'bin',
    );
    final minSdkVersion =
        math.max(target.androidMinSdkVersion!, this.minSdkVersion);
    final exe = Platform.isWindows ? '.exe' : '';
    final arKey = 'AR_${target.rust}';
    final arValue = ['${target.rust}-ar', 'llvm-ar', 'llvm-ar.exe']
        .map((e) => path.join(toolchainPath, e))
        .firstWhereOrNull((element) => File(element).existsSync());
    if (arValue == null) {
      throw Exception('Failed to find ar for $target in $toolchainPath');
    }
    final targetArg = '--target=${target.rust}$minSdkVersion';
    final ccKey = 'CC_${target.rust}';
    final ccValue = path.join(toolchainPath, 'clang$exe');
    final cfFlagsKey = 'CFLAGS_${target.rust}';
    final cFlagsValue = targetArg;
    final cxxKey = 'CXX_${target.rust}';
    final cxxValue = path.join(toolchainPath, 'clang++$exe');
    final cxxFlagsKey = 'CXXFLAGS_${target.rust}';
    final cxxFlagsValue = targetArg;
    final linkerKey =
        'cargo_target_${target.rust.replaceAll('-', '_')}_linker'.toUpperCase();
    final ranlibKey = 'RANLIB_${target.rust}';
    final ranlibValue = path.join(toolchainPath, 'llvm-ranlib$exe');
    final ndkVersionParsed = Version.parse(ndkVersion);
    final rustFlagsKey = 'CARGO_ENCODED_RUSTFLAGS';
    final rustFlagsValue = _libGccWorkaround(targetTempDir, ndkVersionParsed);
    final runRustTool =
        Platform.isWindows ? 'run_build_tool.cmd' : 'run_build_tool.sh';
    final packagePath = (await Isolate.resolvePackageUri(
            Uri.parse('package:build_tool/buildtool.dart')))!
        .toFilePath();
    final selfPath = path.canonicalize(path.join(
      packagePath,
      '..',
      '..',
      '..',
      runRustTool,
    ));
    // Make sure that run_build_tool is working properly even initially launched directly
    // through dart run.
    final toolTempDir =
        Platform.environment['CARGOKIT_TOOL_TEMP_DIR'] ?? targetTempDir;
    return {
      arKey: arValue,
      ccKey: ccValue,
      cfFlagsKey: cFlagsValue,
      cxxKey: cxxValue,
      cxxFlagsKey: cxxFlagsValue,
      ranlibKey: ranlibValue,
      rustFlagsKey: rustFlagsValue,
      linkerKey: selfPath,
      // Recognized by main() so we know when we're acting as a wrapper
      '_CARGOKIT_NDK_LINK_TARGET': targetArg,
      '_CARGOKIT_NDK_LINK_CLANG': ccValue,
      'CARGOKIT_TOOL_TEMP_DIR': toolTempDir,
    };
  }
  // Workaround for libgcc missing in NDK23, inspired by cargo-ndk
  String _libGccWorkaround(String buildDir, Version ndkVersion) {
    final workaroundDir = path.join(
      buildDir,
      'cargokit',
      'libgcc_workaround',
      '${ndkVersion.major}',
    );
    Directory(workaroundDir).createSync(recursive: true);
    if (ndkVersion.major >= 23) {
      File(path.join(workaroundDir, 'libgcc.a'))
          .writeAsStringSync('INPUT(-lunwind)');
    } else {
      // Other way around, untested, forward libgcc.a from libunwind once Rust
      // gets updated for NDK23+.
      File(path.join(workaroundDir, 'libunwind.a'))
          .writeAsStringSync('INPUT(-lgcc)');
    }
    var rustFlags = Platform.environment['CARGO_ENCODED_RUSTFLAGS'] ?? '';
    if (rustFlags.isNotEmpty) {
      rustFlags = '$rustFlags\x1f';
    }
    rustFlags = '$rustFlags-L\x1f$workaroundDir';
    return rustFlags;
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/artifacts_provider.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:ed25519_edwards/ed25519_edwards.dart';
import 'package:http/http.dart';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'builder.dart';
import 'crate_hash.dart';
import 'options.dart';
import 'precompile_binaries.dart';
import 'rustup.dart';
import 'target.dart';
class Artifact {
  /// File system location of the artifact.
  final String path;
  /// Actual file name that the artifact should have in destination folder.
  final String finalFileName;
  AritifactType get type {
    if (finalFileName.endsWith('.dll') ||
        finalFileName.endsWith('.dll.lib') ||
        finalFileName.endsWith('.pdb') ||
        finalFileName.endsWith('.so') ||
        finalFileName.endsWith('.dylib')) {
      return AritifactType.dylib;
    } else if (finalFileName.endsWith('.lib') || finalFileName.endsWith('.a')) {
      return AritifactType.staticlib;
    } else {
      throw Exception('Unknown artifact type for $finalFileName');
    }
  }
  Artifact({
    required this.path,
    required this.finalFileName,
  });
}
final _log = Logger('artifacts_provider');
class ArtifactProvider {
  ArtifactProvider({
    required this.environment,
    required this.userOptions,
  });
  final BuildEnvironment environment;
  final CargokitUserOptions userOptions;
  Future<Map<Target, List<Artifact>>> getArtifacts(List<Target> targets) async {
    final result = await _getPrecompiledArtifacts(targets);
    final pendingTargets = List.of(targets);
    pendingTargets.removeWhere((element) => result.containsKey(element));
    if (pendingTargets.isEmpty) {
      return result;
    }
    final rustup = Rustup();
    for (final target in targets) {
      final builder = RustBuilder(target: target, environment: environment);
      builder.prepare(rustup);
      _log.info('Building ${environment.crateInfo.packageName} for $target');
      final targetDir = await builder.build();
      // For local build accept both static and dynamic libraries.
      final artifactNames = <String>{
        ...getArtifactNames(
          target: target,
          libraryName: environment.crateInfo.packageName,
          aritifactType: AritifactType.dylib,
          remote: false,
        ),
        ...getArtifactNames(
          target: target,
          libraryName: environment.crateInfo.packageName,
          aritifactType: AritifactType.staticlib,
          remote: false,
        )
      };
      final artifacts = artifactNames
          .map((artifactName) => Artifact(
                path: path.join(targetDir, artifactName),
                finalFileName: artifactName,
              ))
          .where((element) => File(element.path).existsSync())
          .toList();
      result[target] = artifacts;
    }
    return result;
  }
  Future<Map<Target, List<Artifact>>> _getPrecompiledArtifacts(
      List<Target> targets) async {
    if (userOptions.usePrecompiledBinaries == false) {
      _log.info('Precompiled binaries are disabled');
      return {};
    }
    if (environment.crateOptions.precompiledBinaries == null) {
      _log.fine('Precompiled binaries not enabled for this crate');
      return {};
    }
    final start = Stopwatch()..start();
    final crateHash = CrateHash.compute(environment.manifestDir,
        tempStorage: environment.targetTempDir);
    _log.fine(
        'Computed crate hash $crateHash in ${start.elapsedMilliseconds}ms');
    final downloadedArtifactsDir =
        path.join(environment.targetTempDir, 'precompiled', crateHash);
    Directory(downloadedArtifactsDir).createSync(recursive: true);
    final res = <Target, List<Artifact>>{};
    for (final target in targets) {
      final requiredArtifacts = getArtifactNames(
        target: target,
        libraryName: environment.crateInfo.packageName,
        remote: true,
      );
      final artifactsForTarget = <Artifact>[];
      for (final artifact in requiredArtifacts) {
        final fileName = PrecompileBinaries.fileName(target, artifact);
        final downloadedPath = path.join(downloadedArtifactsDir, fileName);
        if (!File(downloadedPath).existsSync()) {
          final signatureFileName =
              PrecompileBinaries.signatureFileName(target, artifact);
          await _tryDownloadArtifacts(
            crateHash: crateHash,
            fileName: fileName,
            signatureFileName: signatureFileName,
            finalPath: downloadedPath,
          );
        }
        if (File(downloadedPath).existsSync()) {
          artifactsForTarget.add(Artifact(
            path: downloadedPath,
            finalFileName: artifact,
          ));
        } else {
          break;
        }
      }
      // Only provide complete set of artifacts.
      if (artifactsForTarget.length == requiredArtifacts.length) {
        _log.fine('Found precompiled artifacts for $target');
        res[target] = artifactsForTarget;
      }
    }
    return res;
  }
  static Future<Response> _get(Uri url, {Map<String, String>? headers}) async {
    int attempt = 0;
    const maxAttempts = 10;
    while (true) {
      try {
        return await get(url, headers: headers);
      } on SocketException catch (e) {
        // Try to detect reset by peer error and retry.
        if (attempt++ < maxAttempts &&
            (e.osError?.errorCode == 54 || e.osError?.errorCode == 10054)) {
          _log.severe(
              'Failed to download $url: $e, attempt $attempt of $maxAttempts, will retry...');
          await Future.delayed(Duration(seconds: 1));
          continue;
        } else {
          rethrow;
        }
      }
    }
  }
  Future<void> _tryDownloadArtifacts({
    required String crateHash,
    required String fileName,
    required String signatureFileName,
    required String finalPath,
  }) async {
    final precompiledBinaries = environment.crateOptions.precompiledBinaries!;
    final prefix = precompiledBinaries.uriPrefix;
    final url = Uri.parse('$prefix$crateHash/$fileName');
    final signatureUrl = Uri.parse('$prefix$crateHash/$signatureFileName');
    _log.fine('Downloading signature from $signatureUrl');
    final signature = await _get(signatureUrl);
    if (signature.statusCode == 404) {
      _log.warning(
          'Precompiled binaries not available for crate hash $crateHash ($fileName)');
      return;
    }
    if (signature.statusCode != 200) {
      _log.severe(
          'Failed to download signature $signatureUrl: status ${signature.statusCode}');
      return;
    }
    _log.fine('Downloading binary from $url');
    final res = await _get(url);
    if (res.statusCode != 200) {
      _log.severe('Failed to download binary $url: status ${res.statusCode}');
      return;
    }
    if (verify(
        precompiledBinaries.publicKey, res.bodyBytes, signature.bodyBytes)) {
      File(finalPath).writeAsBytesSync(res.bodyBytes);
    } else {
      _log.shout('Signature verification failed! Ignoring binary.');
    }
  }
}
enum AritifactType {
  staticlib,
  dylib,
}
AritifactType artifactTypeForTarget(Target target) {
  if (target.darwinPlatform != null) {
    return AritifactType.staticlib;
  } else {
    return AritifactType.dylib;
  }
}
List<String> getArtifactNames({
  required Target target,
  required String libraryName,
  required bool remote,
  AritifactType? aritifactType,
}) {
  aritifactType ??= artifactTypeForTarget(target);
  if (target.darwinArch != null) {
    if (aritifactType == AritifactType.staticlib) {
      return ['lib$libraryName.a'];
    } else {
      return ['lib$libraryName.dylib'];
    }
  } else if (target.rust.contains('-windows-')) {
    if (aritifactType == AritifactType.staticlib) {
      return ['$libraryName.lib'];
    } else {
      return [
        '$libraryName.dll',
        '$libraryName.dll.lib',
        if (!remote) '$libraryName.pdb'
      ];
    }
  } else if (target.rust.contains('-linux-')) {
    if (aritifactType == AritifactType.staticlib) {
      return ['lib$libraryName.a'];
    } else {
      return ['lib$libraryName.so'];
    }
  } else {
    throw Exception("Unsupported target: ${target.rust}");
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/build_cmake.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:path/path.dart' as path;
import 'artifacts_provider.dart';
import 'builder.dart';
import 'environment.dart';
import 'options.dart';
import 'target.dart';
class BuildCMake {
  final CargokitUserOptions userOptions;
  BuildCMake({required this.userOptions});
  Future<void> build() async {
    final targetPlatform = Environment.targetPlatform;
    final target = Target.forFlutterName(Environment.targetPlatform);
    if (target == null) {
      throw Exception("Unknown target platform: $targetPlatform");
    }
    final environment = BuildEnvironment.fromEnvironment(isAndroid: false);
    final provider =
        ArtifactProvider(environment: environment, userOptions: userOptions);
    final artifacts = await provider.getArtifacts([target]);
    final libs = artifacts[target]!;
    for (final lib in libs) {
      if (lib.type == AritifactType.dylib) {
        File(lib.path)
            .copySync(path.join(Environment.outputDir, lib.finalFileName));
      }
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/build_gradle.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'artifacts_provider.dart';
import 'builder.dart';
import 'environment.dart';
import 'options.dart';
import 'target.dart';
final log = Logger('build_gradle');
class BuildGradle {
  BuildGradle({required this.userOptions});
  final CargokitUserOptions userOptions;
  Future<void> build() async {
    final targets = Environment.targetPlatforms.map((arch) {
      final target = Target.forFlutterName(arch);
      if (target == null) {
        throw Exception(
            "Unknown darwin target or platform: $arch, ${Environment.darwinPlatformName}");
      }
      return target;
    }).toList();
    final environment = BuildEnvironment.fromEnvironment(isAndroid: true);
    final provider =
        ArtifactProvider(environment: environment, userOptions: userOptions);
    final artifacts = await provider.getArtifacts(targets);
    for (final target in targets) {
      final libs = artifacts[target]!;
      final outputDir = path.join(Environment.outputDir, target.android!);
      Directory(outputDir).createSync(recursive: true);
      for (final lib in libs) {
        if (lib.type == AritifactType.dylib) {
          File(lib.path).copySync(path.join(outputDir, lib.finalFileName));
        }
      }
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/build_pod.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:path/path.dart' as path;
import 'artifacts_provider.dart';
import 'builder.dart';
import 'environment.dart';
import 'options.dart';
import 'target.dart';
import 'util.dart';
class BuildPod {
  BuildPod({required this.userOptions});
  final CargokitUserOptions userOptions;
  Future<void> build() async {
    final targets = Environment.darwinArchs.map((arch) {
      final target = Target.forDarwin(
          platformName: Environment.darwinPlatformName, darwinAarch: arch);
      if (target == null) {
        throw Exception(
            "Unknown darwin target or platform: $arch, ${Environment.darwinPlatformName}");
      }
      return target;
    }).toList();
    final environment = BuildEnvironment.fromEnvironment(isAndroid: false);
    final provider =
        ArtifactProvider(environment: environment, userOptions: userOptions);
    final artifacts = await provider.getArtifacts(targets);
    void performLipo(String targetFile, Iterable<String> sourceFiles) {
      runCommand("lipo", [
        '-create',
        ...sourceFiles,
        '-output',
        targetFile,
      ]);
    }
    final outputDir = Environment.outputDir;
    Directory(outputDir).createSync(recursive: true);
    final staticLibs = artifacts.values
        .expand((element) => element)
        .where((element) => element.type == AritifactType.staticlib)
        .toList();
    final dynamicLibs = artifacts.values
        .expand((element) => element)
        .where((element) => element.type == AritifactType.dylib)
        .toList();
    final libName = environment.crateInfo.packageName;
    // If there is static lib, use it and link it with pod
    if (staticLibs.isNotEmpty) {
      final finalTargetFile = path.join(outputDir, "lib$libName.a");
      performLipo(finalTargetFile, staticLibs.map((e) => e.path));
    } else {
      // Otherwise try to replace bundle dylib with our dylib
      final bundlePaths = [
        '$libName.framework/Versions/A/$libName',
        '$libName.framework/$libName',
      ];
      for (final bundlePath in bundlePaths) {
        final targetFile = path.join(outputDir, bundlePath);
        if (File(targetFile).existsSync()) {
          performLipo(targetFile, dynamicLibs.map((e) => e.path));
          // Replace absolute id with @rpath one so that it works properly
          // when moved to Frameworks.
          runCommand("install_name_tool", [
            '-id',
            '@rpath/$bundlePath',
            targetFile,
          ]);
          return;
        }
      }
      throw Exception('Unable to find bundle for dynamic library');
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/build_tool.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:args/command_runner.dart';
import 'package:ed25519_edwards/ed25519_edwards.dart';
import 'package:github/github.dart';
import 'package:hex/hex.dart';
import 'package:logging/logging.dart';
import 'android_environment.dart';
import 'build_cmake.dart';
import 'build_gradle.dart';
import 'build_pod.dart';
import 'logging.dart';
import 'options.dart';
import 'precompile_binaries.dart';
import 'target.dart';
import 'util.dart';
import 'verify_binaries.dart';
final log = Logger('build_tool');
abstract class BuildCommand extends Command {
  Future<void> runBuildCommand(CargokitUserOptions options);
  @override
  Future<void> run() async {
    final options = CargokitUserOptions.load();
    if (options.verboseLogging ||
        Platform.environment['CARGOKIT_VERBOSE'] == '1') {
      enableVerboseLogging();
    }
    await runBuildCommand(options);
  }
}
class BuildPodCommand extends BuildCommand {
  @override
  final name = 'build-pod';
  @override
  final description = 'Build cocoa pod library';
  @override
  Future<void> runBuildCommand(CargokitUserOptions options) async {
    final build = BuildPod(userOptions: options);
    await build.build();
  }
}
class BuildGradleCommand extends BuildCommand {
  @override
  final name = 'build-gradle';
  @override
  final description = 'Build android library';
  @override
  Future<void> runBuildCommand(CargokitUserOptions options) async {
    final build = BuildGradle(userOptions: options);
    await build.build();
  }
}
class BuildCMakeCommand extends BuildCommand {
  @override
  final name = 'build-cmake';
  @override
  final description = 'Build CMake library';
  @override
  Future<void> runBuildCommand(CargokitUserOptions options) async {
    final build = BuildCMake(userOptions: options);
    await build.build();
  }
}
class GenKeyCommand extends Command {
  @override
  final name = 'gen-key';
  @override
  final description = 'Generate key pair for signing precompiled binaries';
  @override
  void run() {
    final kp = generateKey();
    final private = HEX.encode(kp.privateKey.bytes);
    final public = HEX.encode(kp.publicKey.bytes);
    print("Private Key: $private");
    print("Public Key: $public");
  }
}
class PrecompileBinariesCommand extends Command {
  PrecompileBinariesCommand() {
    argParser
      ..addOption(
        'repository',
        mandatory: true,
        help: 'Github repository slug in format owner/name',
      )
      ..addOption(
        'manifest-dir',
        mandatory: true,
        help: 'Directory containing Cargo.toml',
      )
      ..addMultiOption('target',
          help: 'Rust target triple of artifact to build.\n'
              'Can be specified multiple times or omitted in which case\n'
              'all targets for current platform will be built.')
      ..addOption(
        'android-sdk-location',
        help: 'Location of Android SDK (if available)',
      )
      ..addOption(
        'android-ndk-version',
        help: 'Android NDK version (if available)',
      )
      ..addOption(
        'android-min-sdk-version',
        help: 'Android minimum rquired version (if available)',
      )
      ..addOption(
        'temp-dir',
        help: 'Directory to store temporary build artifacts',
      )
      ..addFlag(
        "verbose",
        abbr: "v",
        defaultsTo: false,
        help: "Enable verbose logging",
      );
  }
  @override
  final name = 'precompile-binaries';
  @override
  final description = 'Prebuild and upload binaries\n'
      'Private key must be passed through PRIVATE_KEY environment variable. '
      'Use gen_key through generate priave key.\n'
      'Github token must be passed as GITHUB_TOKEN environment variable.\n';
  @override
  Future<void> run() async {
    final verbose = argResults!['verbose'] as bool;
    if (verbose) {
      enableVerboseLogging();
    }
    final privateKeyString = Platform.environment['PRIVATE_KEY'];
    if (privateKeyString == null) {
      throw ArgumentError('Missing PRIVATE_KEY environment variable');
    }
    final githubToken = Platform.environment['GITHUB_TOKEN'];
    if (githubToken == null) {
      throw ArgumentError('Missing GITHUB_TOKEN environment variable');
    }
    final privateKey = HEX.decode(privateKeyString);
    if (privateKey.length != 64) {
      throw ArgumentError('Private key must be 64 bytes long');
    }
    final manifestDir = argResults!['manifest-dir'] as String;
    if (!Directory(manifestDir).existsSync()) {
      throw ArgumentError('Manifest directory does not exist: $manifestDir');
    }
    String? androidMinSdkVersionString =
        argResults!['android-min-sdk-version'] as String?;
    int? androidMinSdkVersion;
    if (androidMinSdkVersionString != null) {
      androidMinSdkVersion = int.tryParse(androidMinSdkVersionString);
      if (androidMinSdkVersion == null) {
        throw ArgumentError(
            'Invalid android-min-sdk-version: $androidMinSdkVersionString');
      }
    }
    final targetStrigns = argResults!['target'] as List<String>;
    final targets = targetStrigns.map((target) {
      final res = Target.forRustTriple(target);
      if (res == null) {
        throw ArgumentError('Invalid target: $target');
      }
      return res;
    }).toList(growable: false);
    final precompileBinaries = PrecompileBinaries(
      privateKey: PrivateKey(privateKey),
      githubToken: githubToken,
      manifestDir: manifestDir,
      repositorySlug: RepositorySlug.full(argResults!['repository'] as String),
      targets: targets,
      androidSdkLocation: argResults!['android-sdk-location'] as String?,
      androidNdkVersion: argResults!['android-ndk-version'] as String?,
      androidMinSdkVersion: androidMinSdkVersion,
      tempDir: argResults!['temp-dir'] as String?,
    );
    await precompileBinaries.run();
  }
}
class VerifyBinariesCommand extends Command {
  VerifyBinariesCommand() {
    argParser.addOption(
      'manifest-dir',
      mandatory: true,
      help: 'Directory containing Cargo.toml',
    );
  }
  @override
  final name = "verify-binaries";
  @override
  final description = 'Verifies published binaries\n'
      'Checks whether there is a binary published for each targets\n'
      'and checks the signature.';
  @override
  Future<void> run() async {
    final manifestDir = argResults!['manifest-dir'] as String;
    final verifyBinaries = VerifyBinaries(
      manifestDir: manifestDir,
    );
    await verifyBinaries.run();
  }
}
Future<void> runMain(List<String> args) async {
  try {
    // Init logging before options are loaded
    initLogging();
    if (Platform.environment['_CARGOKIT_NDK_LINK_TARGET'] != null) {
      return AndroidEnvironment.clangLinkerWrapper(args);
    }
    final runner = CommandRunner('build_tool', 'Cargokit built_tool')
      ..addCommand(BuildPodCommand())
      ..addCommand(BuildGradleCommand())
      ..addCommand(BuildCMakeCommand())
      ..addCommand(GenKeyCommand())
      ..addCommand(PrecompileBinariesCommand())
      ..addCommand(VerifyBinariesCommand());
    await runner.run(args);
  } on ArgumentError catch (e) {
    stderr.writeln(e.toString());
    exit(1);
  } catch (e, s) {
    log.severe(kDoubleSeparator);
    log.severe('Cargokit BuildTool failed with error:');
    log.severe(kSeparator);
    log.severe(e);
    // This tells user to install Rust, there's no need to pollute the log with
    // stack trace.
    if (e is! RustupNotFoundException) {
      log.severe(kSeparator);
      log.severe(s);
      log.severe(kSeparator);
      log.severe('BuildTool arguments: $args');
    }
    log.severe(kDoubleSeparator);
    exit(1);
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/builder.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'package:collection/collection.dart';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'android_environment.dart';
import 'cargo.dart';
import 'environment.dart';
import 'options.dart';
import 'rustup.dart';
import 'target.dart';
import 'util.dart';
final _log = Logger('builder');
enum BuildConfiguration {
  debug,
  release,
  profile,
}
extension on BuildConfiguration {
  bool get isDebug => this == BuildConfiguration.debug;
  String get rustName => switch (this) {
        BuildConfiguration.debug => 'debug',
        BuildConfiguration.release => 'release',
        BuildConfiguration.profile => 'release',
      };
}
class BuildException implements Exception {
  final String message;
  BuildException(this.message);
  @override
  String toString() {
    return 'BuildException: $message';
  }
}
class BuildEnvironment {
  final BuildConfiguration configuration;
  final CargokitCrateOptions crateOptions;
  final String targetTempDir;
  final String manifestDir;
  final CrateInfo crateInfo;
  final bool isAndroid;
  final String? androidSdkPath;
  final String? androidNdkVersion;
  final int? androidMinSdkVersion;
  final String? javaHome;
  BuildEnvironment({
    required this.configuration,
    required this.crateOptions,
    required this.targetTempDir,
    required this.manifestDir,
    required this.crateInfo,
    required this.isAndroid,
    this.androidSdkPath,
    this.androidNdkVersion,
    this.androidMinSdkVersion,
    this.javaHome,
  });
  static BuildConfiguration parseBuildConfiguration(String value) {
    // XCode configuration adds the flavor to configuration name.
    final firstSegment = value.split('-').first;
    final buildConfiguration = BuildConfiguration.values.firstWhereOrNull(
      (e) => e.name == firstSegment,
    );
    if (buildConfiguration == null) {
      _log.warning('Unknown build configuraiton $value, will assume release');
      return BuildConfiguration.release;
    }
    return buildConfiguration;
  }
  static BuildEnvironment fromEnvironment({
    required bool isAndroid,
  }) {
    final buildConfiguration =
        parseBuildConfiguration(Environment.configuration);
    final manifestDir = Environment.manifestDir;
    final crateOptions = CargokitCrateOptions.load(
      manifestDir: manifestDir,
    );
    final crateInfo = CrateInfo.load(manifestDir);
    return BuildEnvironment(
      configuration: buildConfiguration,
      crateOptions: crateOptions,
      targetTempDir: Environment.targetTempDir,
      manifestDir: manifestDir,
      crateInfo: crateInfo,
      isAndroid: isAndroid,
      androidSdkPath: isAndroid ? Environment.sdkPath : null,
      androidNdkVersion: isAndroid ? Environment.ndkVersion : null,
      androidMinSdkVersion:
          isAndroid ? int.parse(Environment.minSdkVersion) : null,
      javaHome: isAndroid ? Environment.javaHome : null,
    );
  }
}
class RustBuilder {
  final Target target;
  final BuildEnvironment environment;
  RustBuilder({
    required this.target,
    required this.environment,
  });
  void prepare(
    Rustup rustup,
  ) {
    final toolchain = _toolchain;
    if (rustup.installedTargets(toolchain) == null) {
      rustup.installToolchain(toolchain);
    }
    if (toolchain == 'nightly') {
      rustup.installRustSrcForNightly();
    }
    if (!rustup.installedTargets(toolchain)!.contains(target.rust)) {
      rustup.installTarget(target.rust, toolchain: toolchain);
    }
  }
  CargoBuildOptions? get _buildOptions =>
      environment.crateOptions.cargo[environment.configuration];
  String get _toolchain => _buildOptions?.toolchain.name ?? 'stable';
  /// Returns the path of directory containing build artifacts.
  Future<String> build() async {
    final extraArgs = _buildOptions?.flags ?? [];
    final manifestPath = path.join(environment.manifestDir, 'Cargo.toml');
    runCommand(
      'rustup',
      [
        'run',
        _toolchain,
        'cargo',
        'build',
        ...extraArgs,
        '--manifest-path',
        manifestPath,
        '-p',
        environment.crateInfo.packageName,
        if (!environment.configuration.isDebug) '--release',
        '--target',
        target.rust,
        '--target-dir',
        environment.targetTempDir,
      ],
      environment: await _buildEnvironment(),
    );
    return path.join(
      environment.targetTempDir,
      target.rust,
      environment.configuration.rustName,
    );
  }
  Future<Map<String, String>> _buildEnvironment() async {
    if (target.android == null) {
      return {};
    } else {
      final sdkPath = environment.androidSdkPath;
      final ndkVersion = environment.androidNdkVersion;
      final minSdkVersion = environment.androidMinSdkVersion;
      if (sdkPath == null) {
        throw BuildException('androidSdkPath is not set');
      }
      if (ndkVersion == null) {
        throw BuildException('androidNdkVersion is not set');
      }
      if (minSdkVersion == null) {
        throw BuildException('androidMinSdkVersion is not set');
      }
      final env = AndroidEnvironment(
        sdkPath: sdkPath,
        ndkVersion: ndkVersion,
        minSdkVersion: minSdkVersion,
        targetTempDir: environment.targetTempDir,
        target: target,
      );
      if (!env.ndkIsInstalled() && environment.javaHome != null) {
        env.installNdk(javaHome: environment.javaHome!);
      }
      return env.buildEnvironment();
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/cargo.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:path/path.dart' as path;
import 'package:toml/toml.dart';
class ManifestException {
  ManifestException(this.message, {required this.fileName});
  final String? fileName;
  final String message;
  @override
  String toString() {
    if (fileName != null) {
      return 'Failed to parse package manifest at $fileName: $message';
    } else {
      return 'Failed to parse package manifest: $message';
    }
  }
}
class CrateInfo {
  CrateInfo({required this.packageName});
  final String packageName;
  static CrateInfo parseManifest(String manifest, {final String? fileName}) {
    final toml = TomlDocument.parse(manifest);
    final package = toml.toMap()['package'];
    if (package == null) {
      throw ManifestException('Missing package section', fileName: fileName);
    }
    final name = package['name'];
    if (name == null) {
      throw ManifestException('Missing package name', fileName: fileName);
    }
    return CrateInfo(packageName: name);
  }
  static CrateInfo load(String manifestDir) {
    final manifestFile = File(path.join(manifestDir, 'Cargo.toml'));
    final manifest = manifestFile.readAsStringSync();
    return parseManifest(manifest, fileName: manifestFile.path);
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/crate_hash.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:collection/collection.dart';
import 'package:convert/convert.dart';
import 'package:crypto/crypto.dart';
import 'package:path/path.dart' as path;
class CrateHash {
  /// Computes a hash uniquely identifying crate content. This takes into account
  /// content all all .rs files inside the src directory, as well as Cargo.toml,
  /// Cargo.lock, build.rs and cargokit.yaml.
  ///
  /// If [tempStorage] is provided, computed hash is stored in a file in that directory
  /// and reused on subsequent calls if the crate content hasn't changed.
  static String compute(String manifestDir, {String? tempStorage}) {
    return CrateHash._(
      manifestDir: manifestDir,
      tempStorage: tempStorage,
    )._compute();
  }
  CrateHash._({
    required this.manifestDir,
    required this.tempStorage,
  });
  String _compute() {
    final files = getFiles();
    final tempStorage = this.tempStorage;
    if (tempStorage != null) {
      final quickHash = _computeQuickHash(files);
      final quickHashFolder = Directory(path.join(tempStorage, 'crate_hash'));
      quickHashFolder.createSync(recursive: true);
      final quickHashFile = File(path.join(quickHashFolder.path, quickHash));
      if (quickHashFile.existsSync()) {
        return quickHashFile.readAsStringSync();
      }
      final hash = _computeHash(files);
      quickHashFile.writeAsStringSync(hash);
      return hash;
    } else {
      return _computeHash(files);
    }
  }
  /// Computes a quick hash based on files stat (without reading contents). This
  /// is used to cache the real hash, which is slower to compute since it involves
  /// reading every single file.
  String _computeQuickHash(List<File> files) {
    final output = AccumulatorSink<Digest>();
    final input = sha256.startChunkedConversion(output);
    final data = ByteData(8);
    for (final file in files) {
      input.add(utf8.encode(file.path));
      final stat = file.statSync();
      data.setUint64(0, stat.size);
      input.add(data.buffer.asUint8List());
      data.setUint64(0, stat.modified.millisecondsSinceEpoch);
      input.add(data.buffer.asUint8List());
    }
    input.close();
    return base64Url.encode(output.events.single.bytes);
  }
  String _computeHash(List<File> files) {
    final output = AccumulatorSink<Digest>();
    final input = sha256.startChunkedConversion(output);
    void addTextFile(File file) {
      // text Files are hashed by lines in case we're dealing with github checkout
      // that auto-converts line endings.
      final splitter = LineSplitter();
      if (file.existsSync()) {
        final data = file.readAsStringSync();
        final lines = splitter.convert(data);
        for (final line in lines) {
          input.add(utf8.encode(line));
        }
      }
    }
    for (final file in files) {
      addTextFile(file);
    }
    input.close();
    final res = output.events.single;
    // Truncate to 128bits.
    final hash = res.bytes.sublist(0, 16);
    return hex.encode(hash);
  }
  List<File> getFiles() {
    final src = Directory(path.join(manifestDir, 'src'));
    final files = src
        .listSync(recursive: true, followLinks: false)
        .whereType<File>()
        .toList();
    files.sortBy((element) => element.path);
    void addFile(String relative) {
      final file = File(path.join(manifestDir, relative));
      if (file.existsSync()) {
        files.add(file);
      }
    }
    addFile('Cargo.toml');
    addFile('Cargo.lock');
    addFile('build.rs');
    addFile('cargokit.yaml');
    return files;
  }
  final String manifestDir;
  final String? tempStorage;
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/environment.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
extension on String {
  String resolveSymlink() => File(this).resolveSymbolicLinksSync();
}
class Environment {
  /// Current build configuration (debug or release).
  static String get configuration =>
      _getEnv("CARGOKIT_CONFIGURATION").toLowerCase();
  static bool get isDebug => configuration == 'debug';
  static bool get isRelease => configuration == 'release';
  /// Temporary directory where Rust build artifacts are placed.
  static String get targetTempDir => _getEnv("CARGOKIT_TARGET_TEMP_DIR");
  /// Final output directory where the build artifacts are placed.
  static String get outputDir => _getEnvPath('CARGOKIT_OUTPUT_DIR');
  /// Path to the crate manifest (containing Cargo.toml).
  static String get manifestDir => _getEnvPath('CARGOKIT_MANIFEST_DIR');
  /// Directory inside root project. Not necessarily root folder. Symlinks are
  /// not resolved on purpose.
  static String get rootProjectDir => _getEnv('CARGOKIT_ROOT_PROJECT_DIR');
  // Pod
  /// Platform name (macosx, iphoneos, iphonesimulator).
  static String get darwinPlatformName =>
      _getEnv("CARGOKIT_DARWIN_PLATFORM_NAME");
  /// List of architectures to build for (arm64, armv7, x86_64).
  static List<String> get darwinArchs =>
      _getEnv("CARGOKIT_DARWIN_ARCHS").split(' ');
  // Gradle
  static String get minSdkVersion => _getEnv("CARGOKIT_MIN_SDK_VERSION");
  static String get ndkVersion => _getEnv("CARGOKIT_NDK_VERSION");
  static String get sdkPath => _getEnvPath("CARGOKIT_SDK_DIR");
  static String get javaHome => _getEnvPath("CARGOKIT_JAVA_HOME");
  static List<String> get targetPlatforms =>
      _getEnv("CARGOKIT_TARGET_PLATFORMS").split(',');
  // CMAKE
  static String get targetPlatform => _getEnv("CARGOKIT_TARGET_PLATFORM");
  static String _getEnv(String key) {
    final res = Platform.environment[key];
    if (res == null) {
      throw Exception("Missing environment variable $key");
    }
    return res;
  }
  static String _getEnvPath(String key) {
    final res = _getEnv(key);
    if (Directory(res).existsSync()) {
      return res.resolveSymlink();
    } else {
      return res;
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/logging.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:logging/logging.dart';
const String kSeparator = "--";
const String kDoubleSeparator = "==";
bool _lastMessageWasSeparator = false;
void _log(LogRecord rec) {
  final prefix = '${rec.level.name}: ';
  final out = rec.level == Level.SEVERE ? stderr : stdout;
  if (rec.message == kSeparator) {
    if (!_lastMessageWasSeparator) {
      out.write(prefix);
      out.writeln('-' * 80);
      _lastMessageWasSeparator = true;
    }
    return;
  } else if (rec.message == kDoubleSeparator) {
    out.write(prefix);
    out.writeln('=' * 80);
    _lastMessageWasSeparator = true;
    return;
  }
  out.write(prefix);
  out.writeln(rec.message);
  _lastMessageWasSeparator = false;
}
void initLogging() {
  Logger.root.level = Level.INFO;
  Logger.root.onRecord.listen((LogRecord rec) {
    final lines = rec.message.split('\n');
    for (final line in lines) {
      if (line.isNotEmpty || lines.length == 1 || line != lines.last) {
        _log(LogRecord(
          rec.level,
          line,
          rec.loggerName,
        ));
      }
    }
  });
}
void enableVerboseLogging() {
  Logger.root.level = Level.ALL;
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/options.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:collection/collection.dart';
import 'package:ed25519_edwards/ed25519_edwards.dart';
import 'package:hex/hex.dart';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'package:source_span/source_span.dart';
import 'package:yaml/yaml.dart';
import 'builder.dart';
import 'environment.dart';
import 'rustup.dart';
final _log = Logger('options');
/// A class for exceptions that have source span information attached.
class SourceSpanException implements Exception {
  // This is a getter so that subclasses can override it.
  /// A message describing the exception.
  String get message => _message;
  final String _message;
  // This is a getter so that subclasses can override it.
  /// The span associated with this exception.
  ///
  /// This may be `null` if the source location can't be determined.
  SourceSpan? get span => _span;
  final SourceSpan? _span;
  SourceSpanException(this._message, this._span);
  /// Returns a string representation of `this`.
  ///
  /// [color] may either be a [String], a [bool], or `null`. If it's a string,
  /// it indicates an ANSI terminal color escape that should be used to
  /// highlight the span's text. If it's `true`, it indicates that the text
  /// should be highlighted using the default color. If it's `false` or `null`,
  /// it indicates that the text shouldn't be highlighted.
  @override
  String toString({Object? color}) {
    if (span == null) return message;
    return 'Error on ${span!.message(message, color: color)}';
  }
}
enum Toolchain {
  stable,
  beta,
  nightly,
}
class CargoBuildOptions {
  final Toolchain toolchain;
  final List<String> flags;
  CargoBuildOptions({
    required this.toolchain,
    required this.flags,
  });
  static Toolchain _toolchainFromNode(YamlNode node) {
    if (node case YamlScalar(value: String name)) {
      final toolchain =
          Toolchain.values.firstWhereOrNull((element) => element.name == name);
      if (toolchain != null) {
        return toolchain;
      }
    }
    throw SourceSpanException(
        'Unknown toolchain. Must be one of ${Toolchain.values.map((e) => e.name)}.',
        node.span);
  }
  static CargoBuildOptions parse(YamlNode node) {
    if (node is! YamlMap) {
      throw SourceSpanException('Cargo options must be a map', node.span);
    }
    Toolchain toolchain = Toolchain.stable;
    List<String> flags = [];
    for (final MapEntry(:key, :value) in node.nodes.entries) {
      if (key case YamlScalar(value: 'toolchain')) {
        toolchain = _toolchainFromNode(value);
      } else if (key case YamlScalar(value: 'extra_flags')) {
        if (value case YamlList(nodes: List<YamlNode> list)) {
          if (list.every((element) {
            if (element case YamlScalar(value: String _)) {
              return true;
            }
            return false;
          })) {
            flags = list.map((e) => e.value as String).toList();
            continue;
          }
        }
        throw SourceSpanException(
            'Extra flags must be a list of strings', value.span);
      } else {
        throw SourceSpanException(
            'Unknown cargo option type. Must be "toolchain" or "extra_flags".',
            key.span);
      }
    }
    return CargoBuildOptions(toolchain: toolchain, flags: flags);
  }
}
extension on YamlMap {
  /// Map that extracts keys so that we can do map case check on them.
  Map<dynamic, YamlNode> get valueMap =>
      nodes.map((key, value) => MapEntry(key.value, value));
}
class PrecompiledBinaries {
  final String uriPrefix;
  final PublicKey publicKey;
  PrecompiledBinaries({
    required this.uriPrefix,
    required this.publicKey,
  });
  static PublicKey _publicKeyFromHex(String key, SourceSpan? span) {
    final bytes = HEX.decode(key);
    if (bytes.length != 32) {
      throw SourceSpanException(
          'Invalid public key. Must be 32 bytes long.', span);
    }
    return PublicKey(bytes);
  }
  static PrecompiledBinaries parse(YamlNode node) {
    if (node case YamlMap(valueMap: Map<dynamic, YamlNode> map)) {
      if (map
          case {
            'url_prefix': YamlNode urlPrefixNode,
            'public_key': YamlNode publicKeyNode,
          }) {
        final urlPrefix = switch (urlPrefixNode) {
          YamlScalar(value: String urlPrefix) => urlPrefix,
          _ => throw SourceSpanException(
              'Invalid URL prefix value.', urlPrefixNode.span),
        };
        final publicKey = switch (publicKeyNode) {
          YamlScalar(value: String publicKey) =>
            _publicKeyFromHex(publicKey, publicKeyNode.span),
          _ => throw SourceSpanException(
              'Invalid public key value.', publicKeyNode.span),
        };
        return PrecompiledBinaries(
          uriPrefix: urlPrefix,
          publicKey: publicKey,
        );
      }
    }
    throw SourceSpanException(
        'Invalid precompiled binaries value. '
        'Expected Map with "url_prefix" and "public_key".',
        node.span);
  }
}
/// Cargokit options specified for Rust crate.
class CargokitCrateOptions {
  CargokitCrateOptions({
    this.cargo = const {},
    this.precompiledBinaries,
  });
  final Map<BuildConfiguration, CargoBuildOptions> cargo;
  final PrecompiledBinaries? precompiledBinaries;
  static CargokitCrateOptions parse(YamlNode node) {
    if (node is! YamlMap) {
      throw SourceSpanException('Cargokit options must be a map', node.span);
    }
    final options = <BuildConfiguration, CargoBuildOptions>{};
    PrecompiledBinaries? precompiledBinaries;
    for (final entry in node.nodes.entries) {
      if (entry
          case MapEntry(
            key: YamlScalar(value: 'cargo'),
            value: YamlNode node,
          )) {
        if (node is! YamlMap) {
          throw SourceSpanException('Cargo options must be a map', node.span);
        }
        for (final MapEntry(:YamlNode key, :value) in node.nodes.entries) {
          if (key case YamlScalar(value: String name)) {
            final configuration = BuildConfiguration.values
                .firstWhereOrNull((element) => element.name == name);
            if (configuration != null) {
              options[configuration] = CargoBuildOptions.parse(value);
              continue;
            }
          }
          throw SourceSpanException(
              'Unknown build configuration. Must be one of ${BuildConfiguration.values.map((e) => e.name)}.',
              key.span);
        }
      } else if (entry.key case YamlScalar(value: 'precompiled_binaries')) {
        precompiledBinaries = PrecompiledBinaries.parse(entry.value);
      } else {
        throw SourceSpanException(
            'Unknown cargokit option type. Must be "cargo" or "precompiled_binaries".',
            entry.key.span);
      }
    }
    return CargokitCrateOptions(
      cargo: options,
      precompiledBinaries: precompiledBinaries,
    );
  }
  static CargokitCrateOptions load({
    required String manifestDir,
  }) {
    final uri = Uri.file(path.join(manifestDir, "cargokit.yaml"));
    final file = File.fromUri(uri);
    if (file.existsSync()) {
      final contents = loadYamlNode(file.readAsStringSync(), sourceUrl: uri);
      return parse(contents);
    } else {
      return CargokitCrateOptions();
    }
  }
}
class CargokitUserOptions {
  // When Rustup is installed always build locally unless user opts into
  // using precompiled binaries.
  static bool defaultUsePrecompiledBinaries() {
    return Rustup.executablePath() == null;
  }
  CargokitUserOptions({
    required this.usePrecompiledBinaries,
    required this.verboseLogging,
  });
  CargokitUserOptions._()
      : usePrecompiledBinaries = defaultUsePrecompiledBinaries(),
        verboseLogging = false;
  static CargokitUserOptions parse(YamlNode node) {
    if (node is! YamlMap) {
      throw SourceSpanException('Cargokit options must be a map', node.span);
    }
    bool usePrecompiledBinaries = defaultUsePrecompiledBinaries();
    bool verboseLogging = false;
    for (final entry in node.nodes.entries) {
      if (entry.key case YamlScalar(value: 'use_precompiled_binaries')) {
        if (entry.value case YamlScalar(value: bool value)) {
          usePrecompiledBinaries = value;
          continue;
        }
        throw SourceSpanException(
            'Invalid value for "use_precompiled_binaries". Must be a boolean.',
            entry.value.span);
      } else if (entry.key case YamlScalar(value: 'verbose_logging')) {
        if (entry.value case YamlScalar(value: bool value)) {
          verboseLogging = value;
          continue;
        }
        throw SourceSpanException(
            'Invalid value for "verbose_logging". Must be a boolean.',
            entry.value.span);
      } else {
        throw SourceSpanException(
            'Unknown cargokit option type. Must be "use_precompiled_binaries" or "verbose_logging".',
            entry.key.span);
      }
    }
    return CargokitUserOptions(
      usePrecompiledBinaries: usePrecompiledBinaries,
      verboseLogging: verboseLogging,
    );
  }
  static CargokitUserOptions load() {
    String fileName = "cargokit_options.yaml";
    var userProjectDir = Directory(Environment.rootProjectDir);
    while (userProjectDir.parent.path != userProjectDir.path) {
      final configFile = File(path.join(userProjectDir.path, fileName));
      if (configFile.existsSync()) {
        final contents = loadYamlNode(
          configFile.readAsStringSync(),
          sourceUrl: configFile.uri,
        );
        final res = parse(contents);
        if (res.verboseLogging) {
          _log.info('Found user options file at ${configFile.path}');
        }
        return res;
      }
      userProjectDir = userProjectDir.parent;
    }
    return CargokitUserOptions._();
  }
  final bool usePrecompiledBinaries;
  final bool verboseLogging;
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/precompile_binaries.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:ed25519_edwards/ed25519_edwards.dart';
import 'package:github/github.dart';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'artifacts_provider.dart';
import 'builder.dart';
import 'cargo.dart';
import 'crate_hash.dart';
import 'options.dart';
import 'rustup.dart';
import 'target.dart';
final _log = Logger('precompile_binaries');
class PrecompileBinaries {
  PrecompileBinaries({
    required this.privateKey,
    required this.githubToken,
    required this.repositorySlug,
    required this.manifestDir,
    required this.targets,
    this.androidSdkLocation,
    this.androidNdkVersion,
    this.androidMinSdkVersion,
    this.tempDir,
  });
  final PrivateKey privateKey;
  final String githubToken;
  final RepositorySlug repositorySlug;
  final String manifestDir;
  final List<Target> targets;
  final String? androidSdkLocation;
  final String? androidNdkVersion;
  final int? androidMinSdkVersion;
  final String? tempDir;
  static String fileName(Target target, String name) {
    return '${target.rust}_$name';
  }
  static String signatureFileName(Target target, String name) {
    return '${target.rust}_$name.sig';
  }
  Future<void> run() async {
    final crateInfo = CrateInfo.load(manifestDir);
    final targets = List.of(this.targets);
    if (targets.isEmpty) {
      targets.addAll([
        ...Target.buildableTargets(),
        if (androidSdkLocation != null) ...Target.androidTargets(),
      ]);
    }
    _log.info('Precompiling binaries for $targets');
    final hash = CrateHash.compute(manifestDir);
    _log.info('Computed crate hash: $hash');
    final String tagName = 'precompiled_$hash';
    final github = GitHub(auth: Authentication.withToken(githubToken));
    final repo = github.repositories;
    final release = await _getOrCreateRelease(
      repo: repo,
      tagName: tagName,
      packageName: crateInfo.packageName,
      hash: hash,
    );
    final tempDir = this.tempDir != null
        ? Directory(this.tempDir!)
        : Directory.systemTemp.createTempSync('precompiled_');
    tempDir.createSync(recursive: true);
    final crateOptions = CargokitCrateOptions.load(
      manifestDir: manifestDir,
    );
    final buildEnvironment = BuildEnvironment(
      configuration: BuildConfiguration.release,
      crateOptions: crateOptions,
      targetTempDir: tempDir.path,
      manifestDir: manifestDir,
      crateInfo: crateInfo,
      isAndroid: androidSdkLocation != null,
      androidSdkPath: androidSdkLocation,
      androidNdkVersion: androidNdkVersion,
      androidMinSdkVersion: androidMinSdkVersion,
    );
    final rustup = Rustup();
    for (final target in targets) {
      final artifactNames = getArtifactNames(
        target: target,
        libraryName: crateInfo.packageName,
        remote: true,
      );
      if (artifactNames.every((name) {
        final fileName = PrecompileBinaries.fileName(target, name);
        return (release.assets ?? []).any((e) => e.name == fileName);
      })) {
        _log.info("All artifacts for $target already exist - skipping");
        continue;
      }
      _log.info('Building for $target');
      final builder =
          RustBuilder(target: target, environment: buildEnvironment);
      builder.prepare(rustup);
      final res = await builder.build();
      final assets = <CreateReleaseAsset>[];
      for (final name in artifactNames) {
        final file = File(path.join(res, name));
        if (!file.existsSync()) {
          throw Exception('Missing artifact: ${file.path}');
        }
        final data = file.readAsBytesSync();
        final create = CreateReleaseAsset(
          name: PrecompileBinaries.fileName(target, name),
          contentType: "application/octet-stream",
          assetData: data,
        );
        final signature = sign(privateKey, data);
        final signatureCreate = CreateReleaseAsset(
          name: signatureFileName(target, name),
          contentType: "application/octet-stream",
          assetData: signature,
        );
        bool verified = verify(public(privateKey), data, signature);
        if (!verified) {
          throw Exception('Signature verification failed');
        }
        assets.add(create);
        assets.add(signatureCreate);
      }
      _log.info('Uploading assets: ${assets.map((e) => e.name)}');
      for (final asset in assets) {
        // This seems to be failing on CI so do it one by one
        int retryCount = 0;
        while (true) {
          try {
            await repo.uploadReleaseAssets(release, [asset]);
            break;
          } on Exception catch (e) {
            if (retryCount == 10) {
              rethrow;
            }
            ++retryCount;
            _log.shout(
                'Upload failed (attempt $retryCount, will retry): ${e.toString()}');
            await Future.delayed(Duration(seconds: 2));
          }
        }
      }
    }
    _log.info('Cleaning up');
    tempDir.deleteSync(recursive: true);
  }
  Future<Release> _getOrCreateRelease({
    required RepositoriesService repo,
    required String tagName,
    required String packageName,
    required String hash,
  }) async {
    Release release;
    try {
      _log.info('Fetching release $tagName');
      release = await repo.getReleaseByTagName(repositorySlug, tagName);
    } on ReleaseNotFound {
      _log.info('Release not found - creating release $tagName');
      release = await repo.createRelease(
          repositorySlug,
          CreateRelease.from(
            tagName: tagName,
            name: 'Precompiled binaries ${hash.substring(0, 8)}',
            targetCommitish: null,
            isDraft: false,
            isPrerelease: false,
            body: 'Precompiled binaries for crate $packageName, '
                'crate hash $hash.',
          ));
    }
    return release;
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/rustup.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:collection/collection.dart';
import 'package:path/path.dart' as path;
import 'util.dart';
class _Toolchain {
  _Toolchain(
    this.name,
    this.targets,
  );
  final String name;
  final List<String> targets;
}
class Rustup {
  List<String>? installedTargets(String toolchain) {
    final targets = _installedTargets(toolchain);
    return targets != null ? List.unmodifiable(targets) : null;
  }
  void installToolchain(String toolchain) {
    log.info("Installing Rust toolchain: $toolchain");
    runCommand("rustup", ['toolchain', 'install', toolchain]);
    _installedToolchains
        .add(_Toolchain(toolchain, _getInstalledTargets(toolchain)));
  }
  void installTarget(
    String target, {
    required String toolchain,
  }) {
    log.info("Installing Rust target: $target");
    runCommand("rustup", [
      'target',
      'add',
      '--toolchain',
      toolchain,
      target,
    ]);
    _installedTargets(toolchain)?.add(target);
  }
  final List<_Toolchain> _installedToolchains;
  Rustup() : _installedToolchains = _getInstalledToolchains();
  List<String>? _installedTargets(String toolchain) => _installedToolchains
      .firstWhereOrNull(
          (e) => e.name == toolchain || e.name.startsWith('$toolchain-'))
      ?.targets;
  static List<_Toolchain> _getInstalledToolchains() {
    String extractToolchainName(String line) {
      // ignore (default) after toolchain name
      final parts = line.split(' ');
      return parts[0];
    }
    final res = runCommand("rustup", ['toolchain', 'list']);
    // To list all non-custom toolchains, we need to filter out lines that
    // don't start with "stable", "beta", or "nightly".
    Pattern nonCustom = RegExp(r"^(stable|beta|nightly)");
    final lines = res.stdout
        .toString()
        .split('\n')
        .where((e) => e.isNotEmpty && e.startsWith(nonCustom))
        .map(extractToolchainName)
        .toList(growable: true);
    return lines
        .map(
          (name) => _Toolchain(
            name,
            _getInstalledTargets(name),
          ),
        )
        .toList(growable: true);
  }
  static List<String> _getInstalledTargets(String toolchain) {
    final res = runCommand("rustup", [
      'target',
      'list',
      '--toolchain',
      toolchain,
      '--installed',
    ]);
    final lines = res.stdout
        .toString()
        .split('\n')
        .where((e) => e.isNotEmpty)
        .toList(growable: true);
    return lines;
  }
  bool _didInstallRustSrcForNightly = false;
  void installRustSrcForNightly() {
    if (_didInstallRustSrcForNightly) {
      return;
    }
    // Useful for -Z build-std
    runCommand(
      "rustup",
      ['component', 'add', 'rust-src', '--toolchain', 'nightly'],
    );
    _didInstallRustSrcForNightly = true;
  }
  static String? executablePath() {
    final envPath = Platform.environment['PATH'];
    final envPathSeparator = Platform.isWindows ? ';' : ':';
    final home = Platform.isWindows
        ? Platform.environment['USERPROFILE']
        : Platform.environment['HOME'];
    final paths = [
      if (home != null) path.join(home, '.cargo', 'bin'),
      if (envPath != null) ...envPath.split(envPathSeparator),
    ];
    for (final p in paths) {
      final rustup = Platform.isWindows ? 'rustup.exe' : 'rustup';
      final rustupPath = path.join(p, rustup);
      if (File(rustupPath).existsSync()) {
        return rustupPath;
      }
    }
    return null;
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/target.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:collection/collection.dart';
import 'util.dart';
class Target {
  Target({
    required this.rust,
    this.flutter,
    this.android,
    this.androidMinSdkVersion,
    this.darwinPlatform,
    this.darwinArch,
  });
  static final all = [
    Target(
      rust: 'armv7-linux-androideabi',
      flutter: 'android-arm',
      android: 'armeabi-v7a',
      androidMinSdkVersion: 16,
    ),
    Target(
      rust: 'aarch64-linux-android',
      flutter: 'android-arm64',
      android: 'arm64-v8a',
      androidMinSdkVersion: 21,
    ),
    Target(
      rust: 'i686-linux-android',
      flutter: 'android-x86',
      android: 'x86',
      androidMinSdkVersion: 16,
    ),
    Target(
      rust: 'x86_64-linux-android',
      flutter: 'android-x64',
      android: 'x86_64',
      androidMinSdkVersion: 21,
    ),
    Target(
      rust: 'x86_64-pc-windows-msvc',
      flutter: 'windows-x64',
    ),
    Target(
      rust: 'x86_64-unknown-linux-gnu',
      flutter: 'linux-x64',
    ),
    Target(
      rust: 'aarch64-unknown-linux-gnu',
      flutter: 'linux-arm64',
    ),
    Target(
      rust: 'x86_64-apple-darwin',
      darwinPlatform: 'macosx',
      darwinArch: 'x86_64',
    ),
    Target(
      rust: 'aarch64-apple-darwin',
      darwinPlatform: 'macosx',
      darwinArch: 'arm64',
    ),
    Target(
      rust: 'aarch64-apple-ios',
      darwinPlatform: 'iphoneos',
      darwinArch: 'arm64',
    ),
    Target(
      rust: 'aarch64-apple-ios-sim',
      darwinPlatform: 'iphonesimulator',
      darwinArch: 'arm64',
    ),
    Target(
      rust: 'x86_64-apple-ios',
      darwinPlatform: 'iphonesimulator',
      darwinArch: 'x86_64',
    ),
  ];
  static Target? forFlutterName(String flutterName) {
    return all.firstWhereOrNull((element) => element.flutter == flutterName);
  }
  static Target? forDarwin({
    required String platformName,
    required String darwinAarch,
  }) {
    return all.firstWhereOrNull((element) => //
        element.darwinPlatform == platformName &&
        element.darwinArch == darwinAarch);
  }
  static Target? forRustTriple(String triple) {
    return all.firstWhereOrNull((element) => element.rust == triple);
  }
  static List<Target> androidTargets() {
    return all
        .where((element) => element.android != null)
        .toList(growable: false);
  }
  /// Returns buildable targets on current host platform ignoring Android targets.
  static List<Target> buildableTargets() {
    if (Platform.isLinux) {
      // Right now we don't support cross-compiling on Linux. So we just return
      // the host target.
      final arch = runCommand('arch', []).stdout as String;
      if (arch.trim() == 'aarch64') {
        return [Target.forRustTriple('aarch64-unknown-linux-gnu')!];
      } else {
        return [Target.forRustTriple('x86_64-unknown-linux-gnu')!];
      }
    }
    return all.where((target) {
      if (Platform.isWindows) {
        return target.rust.contains('-windows-');
      } else if (Platform.isMacOS) {
        return target.darwinPlatform != null;
      }
      return false;
    }).toList(growable: false);
  }
  @override
  String toString() {
    return rust;
  }
  final String? flutter;
  final String rust;
  final String? android;
  final int? androidMinSdkVersion;
  final String? darwinPlatform;
  final String? darwinArch;
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/util.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:convert';
import 'dart:io';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;
import 'logging.dart';
import 'rustup.dart';
final log = Logger("process");
class CommandFailedException implements Exception {
  final String executable;
  final List<String> arguments;
  final ProcessResult result;
  CommandFailedException({
    required this.executable,
    required this.arguments,
    required this.result,
  });
  @override
  String toString() {
    final stdout = result.stdout.toString().trim();
    final stderr = result.stderr.toString().trim();
    return [
      "External Command: $executable ${arguments.map((e) => '"$e"').join(' ')}",
      "Returned Exit Code: ${result.exitCode}",
      kSeparator,
      "STDOUT:",
      if (stdout.isNotEmpty) stdout,
      kSeparator,
      "STDERR:",
      if (stderr.isNotEmpty) stderr,
    ].join('\n');
  }
}
class TestRunCommandArgs {
  final String executable;
  final List<String> arguments;
  final String? workingDirectory;
  final Map<String, String>? environment;
  final bool includeParentEnvironment;
  final bool runInShell;
  final Encoding? stdoutEncoding;
  final Encoding? stderrEncoding;
  TestRunCommandArgs({
    required this.executable,
    required this.arguments,
    this.workingDirectory,
    this.environment,
    this.includeParentEnvironment = true,
    this.runInShell = false,
    this.stdoutEncoding,
    this.stderrEncoding,
  });
}
class TestRunCommandResult {
  TestRunCommandResult({
    this.pid = 1,
    this.exitCode = 0,
    this.stdout = '',
    this.stderr = '',
  });
  final int pid;
  final int exitCode;
  final String stdout;
  final String stderr;
}
TestRunCommandResult Function(TestRunCommandArgs args)? testRunCommandOverride;
ProcessResult runCommand(
  String executable,
  List<String> arguments, {
  String? workingDirectory,
  Map<String, String>? environment,
  bool includeParentEnvironment = true,
  bool runInShell = false,
  Encoding? stdoutEncoding = systemEncoding,
  Encoding? stderrEncoding = systemEncoding,
}) {
  if (testRunCommandOverride != null) {
    final result = testRunCommandOverride!(TestRunCommandArgs(
      executable: executable,
      arguments: arguments,
      workingDirectory: workingDirectory,
      environment: environment,
      includeParentEnvironment: includeParentEnvironment,
      runInShell: runInShell,
      stdoutEncoding: stdoutEncoding,
      stderrEncoding: stderrEncoding,
    ));
    return ProcessResult(
      result.pid,
      result.exitCode,
      result.stdout,
      result.stderr,
    );
  }
  log.finer('Running command $executable ${arguments.join(' ')}');
  final res = Process.runSync(
    _resolveExecutable(executable),
    arguments,
    workingDirectory: workingDirectory,
    environment: environment,
    includeParentEnvironment: includeParentEnvironment,
    runInShell: runInShell,
    stderrEncoding: stderrEncoding,
    stdoutEncoding: stdoutEncoding,
  );
  if (res.exitCode != 0) {
    throw CommandFailedException(
      executable: executable,
      arguments: arguments,
      result: res,
    );
  } else {
    return res;
  }
}
class RustupNotFoundException implements Exception {
  @override
  String toString() {
    return [
      ' ',
      'rustup not found in PATH.',
      ' ',
      'Maybe you need to install Rust? It only takes a minute:',
      ' ',
      if (Platform.isWindows) 'https://www.rust-lang.org/tools/install',
      if (hasHomebrewRustInPath()) ...[
        '\$ brew unlink rust # Unlink homebrew Rust from PATH',
      ],
      if (!Platform.isWindows)
        "\$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
      ' ',
    ].join('\n');
  }
  static bool hasHomebrewRustInPath() {
    if (!Platform.isMacOS) {
      return false;
    }
    final envPath = Platform.environment['PATH'] ?? '';
    final paths = envPath.split(':');
    return paths.any((p) {
      return p.contains('homebrew') && File(path.join(p, 'rustc')).existsSync();
    });
  }
}
String _resolveExecutable(String executable) {
  if (executable == 'rustup') {
    final resolved = Rustup.executablePath();
    if (resolved != null) {
      return resolved;
    }
    throw RustupNotFoundException();
  } else {
    return executable;
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/src/verify_binaries.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'dart:io';
import 'package:ed25519_edwards/ed25519_edwards.dart';
import 'package:http/http.dart';
import 'artifacts_provider.dart';
import 'cargo.dart';
import 'crate_hash.dart';
import 'options.dart';
import 'precompile_binaries.dart';
import 'target.dart';
class VerifyBinaries {
  VerifyBinaries({
    required this.manifestDir,
  });
  final String manifestDir;
  Future<void> run() async {
    final crateInfo = CrateInfo.load(manifestDir);
    final config = CargokitCrateOptions.load(manifestDir: manifestDir);
    final precompiledBinaries = config.precompiledBinaries;
    if (precompiledBinaries == null) {
      stdout.writeln('Crate does not support precompiled binaries.');
    } else {
      final crateHash = CrateHash.compute(manifestDir);
      stdout.writeln('Crate hash: $crateHash');
      for (final target in Target.all) {
        final message = 'Checking ${target.rust}...';
        stdout.write(message.padRight(40));
        stdout.flush();
        final artifacts = getArtifactNames(
          target: target,
          libraryName: crateInfo.packageName,
          remote: true,
        );
        final prefix = precompiledBinaries.uriPrefix;
        bool ok = true;
        for (final artifact in artifacts) {
          final fileName = PrecompileBinaries.fileName(target, artifact);
          final signatureFileName =
              PrecompileBinaries.signatureFileName(target, artifact);
          final url = Uri.parse('$prefix$crateHash/$fileName');
          final signatureUrl =
              Uri.parse('$prefix$crateHash/$signatureFileName');
          final signature = await get(signatureUrl);
          if (signature.statusCode != 200) {
            stdout.writeln('MISSING');
            ok = false;
            break;
          }
          final asset = await get(url);
          if (asset.statusCode != 200) {
            stdout.writeln('MISSING');
            ok = false;
            break;
          }
          if (!verify(precompiledBinaries.publicKey, asset.bodyBytes,
              signature.bodyBytes)) {
            stdout.writeln('INVALID SIGNATURE');
            ok = false;
          }
        }
        if (ok) {
          stdout.writeln('OK');
        }
      }
    }
  }
}
</file>

<file path="rust_builder/cargokit/build_tool/lib/build_tool.dart">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
import 'src/build_tool.dart' as build_tool;
Future<void> runMain(List<String> args) async {
  return build_tool.runMain(args);
}
</file>

<file path="rust_builder/cargokit/build_tool/analysis_options.yaml">
# This is copied from Cargokit (which is the official way to use it currently)
# Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from `package:lints`.
# This set helps identify many issues that may lead to problems when running
# or consuming Dart code, and enforces writing Dart using a single, idiomatic
# style and format.
#
# If you want a smaller set of lints you can change this to specify
# 'package:lints/core.yaml'. These are just the most critical lints
# (the recommended set includes the core lints).
# The core lints are also what is used by pub.dev for scoring packages.
include: package:lints/recommended.yaml
# Uncomment the following section to specify additional rules.
linter:
  rules:
    - prefer_relative_imports
    - directives_ordering
# analyzer:
#   exclude:
#     - path/to/excluded/files/**
# For more information about the core and recommended set of lints, see
# https://dart.dev/go/core-lints
# For additional information about configuring this file, see
# https://dart.dev/guides/language/analysis-options
</file>

<file path="rust_builder/cargokit/build_tool/pubspec.yaml">
# This is copied from Cargokit (which is the official way to use it currently)
# Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin
name: build_tool
description: Cargokit build_tool. Facilitates the build of Rust crate during Flutter application build.
publish_to: none
version: 1.0.0
environment:
  sdk: ">=3.0.0 <4.0.0"
# Add regular dependencies here.
dependencies:
  # these are pinned on purpose because the bundle_tool_runner doesn't have
  # pubspec.lock. See run_build_tool.sh
  logging: 1.2.0
  path: 1.8.0
  version: 3.0.0
  collection: 1.18.0
  ed25519_edwards: 0.3.1
  hex: 0.2.0
  yaml: 3.1.2
  source_span: 1.10.0
  github: 9.17.0
  args: 2.4.2
  crypto: 3.0.3
  convert: 3.1.1
  http: 1.1.0
  toml: 0.14.0
dev_dependencies:
  lints: ^2.1.0
  test: ^1.24.0
</file>

<file path="rust_builder/cargokit/build_tool/README.md">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin

A sample command-line application with an entrypoint in `bin/`, library code
in `lib/`, and example unit test in `test/`.
</file>

<file path="rust_builder/cargokit/cmake/cargokit.cmake">
SET(cargokit_cmake_root "${CMAKE_CURRENT_LIST_DIR}/..")

# Workaround for https://github.com/dart-lang/pub/issues/4010
get_filename_component(cargokit_cmake_root "${cargokit_cmake_root}" REALPATH)

if(WIN32)
    # REALPATH does not properly resolve symlinks on windows :-/
    execute_process(COMMAND powershell -ExecutionPolicy Bypass -File "${CMAKE_CURRENT_LIST_DIR}/resolve_symlinks.ps1" "${cargokit_cmake_root}" OUTPUT_VARIABLE cargokit_cmake_root OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

# Arguments
# - target: CMAKE target to which rust library is linked
# - manifest_dir: relative path from current folder to directory containing cargo manifest
# - lib_name: cargo package name
# - any_symbol_name: name of any exported symbol from the library.
#                    used on windows to force linking with library.
function(apply_cargokit target manifest_dir lib_name any_symbol_name)

    set(CARGOKIT_LIB_NAME "${lib_name}")
    set(CARGOKIT_LIB_FULL_NAME "${CMAKE_SHARED_MODULE_PREFIX}${CARGOKIT_LIB_NAME}${CMAKE_SHARED_MODULE_SUFFIX}")
    if (CMAKE_CONFIGURATION_TYPES)
        set(CARGOKIT_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>")
        set(OUTPUT_LIB "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/${CARGOKIT_LIB_FULL_NAME}")
    else()
        set(CARGOKIT_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}")
        set(OUTPUT_LIB "${CMAKE_CURRENT_BINARY_DIR}/${CARGOKIT_LIB_FULL_NAME}")
    endif()
    set(CARGOKIT_TEMP_DIR "${CMAKE_CURRENT_BINARY_DIR}/cargokit_build")

    if (FLUTTER_TARGET_PLATFORM)
        set(CARGOKIT_TARGET_PLATFORM "${FLUTTER_TARGET_PLATFORM}")
    else()
        set(CARGOKIT_TARGET_PLATFORM "windows-x64")
    endif()

    set(CARGOKIT_ENV
        "CARGOKIT_CMAKE=${CMAKE_COMMAND}"
        "CARGOKIT_CONFIGURATION=$<CONFIG>"
        "CARGOKIT_MANIFEST_DIR=${CMAKE_CURRENT_SOURCE_DIR}/${manifest_dir}"
        "CARGOKIT_TARGET_TEMP_DIR=${CARGOKIT_TEMP_DIR}"
        "CARGOKIT_OUTPUT_DIR=${CARGOKIT_OUTPUT_DIR}"
        "CARGOKIT_TARGET_PLATFORM=${CARGOKIT_TARGET_PLATFORM}"
        "CARGOKIT_TOOL_TEMP_DIR=${CARGOKIT_TEMP_DIR}/tool"
        "CARGOKIT_ROOT_PROJECT_DIR=${CMAKE_SOURCE_DIR}"
    )

    if (WIN32)
        set(SCRIPT_EXTENSION ".cmd")
        set(IMPORT_LIB_EXTENSION ".lib")
    else()
        set(SCRIPT_EXTENSION ".sh")
        set(IMPORT_LIB_EXTENSION "")
        execute_process(COMMAND chmod +x "${cargokit_cmake_root}/run_build_tool${SCRIPT_EXTENSION}")
    endif()

    # Using generators in custom command is only supported in CMake 3.20+
    if (CMAKE_CONFIGURATION_TYPES AND ${CMAKE_VERSION} VERSION_LESS "3.20.0")
        foreach(CONFIG IN LISTS CMAKE_CONFIGURATION_TYPES)
            add_custom_command(
                OUTPUT
                "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG}/${CARGOKIT_LIB_FULL_NAME}"
                "${CMAKE_CURRENT_BINARY_DIR}/_phony_"
                COMMAND ${CMAKE_COMMAND} -E env ${CARGOKIT_ENV}
                "${cargokit_cmake_root}/run_build_tool${SCRIPT_EXTENSION}" build-cmake
                VERBATIM
            )
        endforeach()
    else()
        add_custom_command(
            OUTPUT
            ${OUTPUT_LIB}
            "${CMAKE_CURRENT_BINARY_DIR}/_phony_"
            COMMAND ${CMAKE_COMMAND} -E env ${CARGOKIT_ENV}
            "${cargokit_cmake_root}/run_build_tool${SCRIPT_EXTENSION}" build-cmake
            VERBATIM
        )
    endif()


    set_source_files_properties("${CMAKE_CURRENT_BINARY_DIR}/_phony_" PROPERTIES SYMBOLIC TRUE)

    if (TARGET ${target})
        # If we have actual cmake target provided create target and make existing
        # target depend on it
        add_custom_target("${target}_cargokit" DEPENDS ${OUTPUT_LIB})
        add_dependencies("${target}" "${target}_cargokit")
        target_link_libraries("${target}" PRIVATE "${OUTPUT_LIB}${IMPORT_LIB_EXTENSION}")
        if(WIN32)
            target_link_options(${target} PRIVATE "/INCLUDE:${any_symbol_name}")
        endif()
    else()
        # Otherwise (FFI) just use ALL to force building always
        add_custom_target("${target}_cargokit" ALL DEPENDS ${OUTPUT_LIB})
    endif()

    # Allow adding the output library to plugin bundled libraries
    set("${target}_cargokit_lib" ${OUTPUT_LIB} PARENT_SCOPE)

endfunction()
</file>

<file path="rust_builder/cargokit/cmake/resolve_symlinks.ps1">
function Resolve-Symlinks {
    [CmdletBinding()]
    [OutputType([string])]
    param(
        [Parameter(Position = 0, Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [string] $Path
    )

    [string] $separator = '/'
    [string[]] $parts = $Path.Split($separator)

    [string] $realPath = ''
    foreach ($part in $parts) {
        if ($realPath -and !$realPath.EndsWith($separator)) {
            $realPath += $separator
        }
        $realPath += $part
        $item = Get-Item $realPath
        if ($item.Target) {
            $realPath = $item.Target.Replace('\', '/')
        }
    }
    $realPath
}

$path=Resolve-Symlinks -Path $args[0]
Write-Host $path
</file>

<file path="rust_builder/cargokit/gradle/plugin.gradle">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin

import java.nio.file.Paths
import org.apache.tools.ant.taskdefs.condition.Os

CargoKitPlugin.file = buildscript.sourceFile

apply plugin: CargoKitPlugin

class CargoKitExtension {
    String manifestDir; // Relative path to folder containing Cargo.toml
    String libname; // Library name within Cargo.toml. Must be a cdylib
}

abstract class CargoKitBuildTask extends DefaultTask {

    @Input
    String buildMode

    @Input
    String buildDir

    @Input
    String outputDir

    @Input
    String ndkVersion

    @Input
    String sdkDirectory

    @Input
    int compileSdkVersion;

    @Input
    int minSdkVersion;

    @Input
    String pluginFile

    @Input
    List<String> targetPlatforms

    @TaskAction
    def build() {
        if (project.cargokit.manifestDir == null) {
            throw new GradleException("Property 'manifestDir' must be set on cargokit extension");
        }

        if (project.cargokit.libname == null) {
            throw new GradleException("Property 'libname' must be set on cargokit extension");
        }

        def executableName = Os.isFamily(Os.FAMILY_WINDOWS) ? "run_build_tool.cmd" : "run_build_tool.sh"
        def path = Paths.get(new File(pluginFile).parent, "..", executableName);

        def manifestDir = Paths.get(project.buildscript.sourceFile.parent, project.cargokit.manifestDir)

        def rootProjectDir = project.rootProject.projectDir
        
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            project.exec {
                commandLine 'chmod', '+x', path
            }
        }
        
        project.exec {
            executable path
            args "build-gradle"
            environment "CARGOKIT_ROOT_PROJECT_DIR", rootProjectDir
            environment "CARGOKIT_TOOL_TEMP_DIR", "${buildDir}/build_tool"
            environment "CARGOKIT_MANIFEST_DIR", manifestDir
            environment "CARGOKIT_CONFIGURATION", buildMode
            environment "CARGOKIT_TARGET_TEMP_DIR", buildDir
            environment "CARGOKIT_OUTPUT_DIR", outputDir
            environment "CARGOKIT_NDK_VERSION", ndkVersion
            environment "CARGOKIT_SDK_DIR", sdkDirectory
            environment "CARGOKIT_COMPILE_SDK_VERSION", compileSdkVersion
            environment "CARGOKIT_MIN_SDK_VERSION", minSdkVersion
            environment "CARGOKIT_TARGET_PLATFORMS", targetPlatforms.join(",")
            environment "CARGOKIT_JAVA_HOME", System.properties['java.home']
        }
    }
}

class CargoKitPlugin implements Plugin<Project> {

    static String file;

    private Plugin findFlutterPlugin(Project rootProject) {
        _findFlutterPlugin(rootProject.childProjects)
    }

   private Plugin _findFlutterPlugin(Map projects) {
        for (project in projects) {
            for (plugin in project.value.getPlugins()) {
                if (plugin.class.name == "FlutterPlugin") {
                    return plugin;
                }
            }
            def plugin = _findFlutterPlugin(project.value.childProjects);
            if (plugin != null) {
                return plugin;
            }
        }
        return null;
    }

    @Override
    void apply(Project project) {
        def plugin = findFlutterPlugin(project.rootProject);

        project.extensions.create("cargokit", CargoKitExtension)

        if (plugin == null) {
            print("Flutter plugin not found, CargoKit plugin will not be applied.")
            return;
        }

        def cargoBuildDir = "${project.buildDir}/build"
        
        // Determine if the project is an application or library
        def isApplication = plugin.project.plugins.hasPlugin('com.android.application')
        def variants = isApplication ? plugin.project.android.applicationVariants : plugin.project.android.libraryVariants

        variants.all { variant ->

            final buildType = variant.buildType.name

            def cargoOutputDir = "${project.buildDir}/jniLibs/${buildType}";
            def jniLibs = project.android.sourceSets.maybeCreate(buildType).jniLibs;
            jniLibs.srcDir(new File(cargoOutputDir))

            def platforms = plugin.getTargetPlatforms().collect()

            // Same thing addFlutterDependencies does in flutter.gradle
            if (buildType == "debug") {
                platforms.add("android-x86")
                platforms.add("android-x64")
            }

            // The task name depends on plugin properties, which are not available
            // at this point
            project.getGradle().afterProject {
                def taskName = "cargokitCargoBuild${project.cargokit.libname.capitalize()}${buildType.capitalize()}";

                if (project.tasks.findByName(taskName)) {
                    return
                }

                if (plugin.project.android.ndkVersion == null) {
                    throw new GradleException("Please set 'android.ndkVersion' in 'app/build.gradle'.")
                }

                def task = project.tasks.create(taskName, CargoKitBuildTask.class) {
                    buildMode = variant.buildType.name
                    buildDir = cargoBuildDir
                    outputDir = cargoOutputDir
                    ndkVersion = plugin.project.android.ndkVersion
                    sdkDirectory = plugin.project.android.sdkDirectory
                    minSdkVersion = plugin.project.android.defaultConfig.minSdkVersion.apiLevel as int
                    compileSdkVersion = plugin.project.android.compileSdkVersion.substring(8) as int
                    targetPlatforms = platforms
                    pluginFile = CargoKitPlugin.file
                }
                def onTask = { newTask ->
                    if (newTask.name == "merge${buildType.capitalize()}NativeLibs") {
                        newTask.dependsOn task
                        // Fix gradle 7.4.2 not picking up JNI library changes
                        newTask.outputs.upToDateWhen { false }
                    }
                }
                project.tasks.each onTask
                project.tasks.whenTaskAdded onTask
            }
        }
    }
}
</file>

<file path="rust_builder/cargokit/.gitignore">
target
.dart_tool
*.iml
!pubspec.lock
</file>

<file path="rust_builder/cargokit/build_pod.sh">
#!/bin/sh
set -e
BASEDIR=$(dirname "$0")
# Workaround for https://github.com/dart-lang/pub/issues/4010
BASEDIR=$(cd "$BASEDIR" ; pwd -P)
# Remove XCode SDK from path. Otherwise this breaks tool compilation when building iOS project
NEW_PATH=`echo $PATH | tr ":" "\n" | grep -v "Contents/Developer/" | tr "\n" ":"`
export PATH=${NEW_PATH%?} # remove trailing :
env
# Platform name (macosx, iphoneos, iphonesimulator)
export CARGOKIT_DARWIN_PLATFORM_NAME=$PLATFORM_NAME
# Arctive architectures (arm64, armv7, x86_64), space separated.
export CARGOKIT_DARWIN_ARCHS=$ARCHS
# Current build configuration (Debug, Release)
export CARGOKIT_CONFIGURATION=$CONFIGURATION
# Path to directory containing Cargo.toml.
export CARGOKIT_MANIFEST_DIR=$PODS_TARGET_SRCROOT/$1
# Temporary directory for build artifacts.
export CARGOKIT_TARGET_TEMP_DIR=$TARGET_TEMP_DIR
# Output directory for final artifacts.
export CARGOKIT_OUTPUT_DIR=$PODS_CONFIGURATION_BUILD_DIR/$PRODUCT_NAME
# Directory to store built tool artifacts.
export CARGOKIT_TOOL_TEMP_DIR=$TARGET_TEMP_DIR/build_tool
# Directory inside root project. Not necessarily the top level directory of root project.
export CARGOKIT_ROOT_PROJECT_DIR=$SRCROOT
FLUTTER_EXPORT_BUILD_ENVIRONMENT=(
  "$PODS_ROOT/../Flutter/ephemeral/flutter_export_environment.sh" # macOS
  "$PODS_ROOT/../Flutter/flutter_export_environment.sh" # iOS
)
for path in "${FLUTTER_EXPORT_BUILD_ENVIRONMENT[@]}"
do
  if [[ -f "$path" ]]; then
    source "$path"
  fi
done
sh "$BASEDIR/run_build_tool.sh" build-pod "$@"
# Make a symlink from built framework to phony file, which will be used as input to
# build script. This should force rebuild (podspec currently doesn't support alwaysOutOfDate
# attribute on custom build phase)
ln -fs "$OBJROOT/XCBuildData/build.db" "${BUILT_PRODUCTS_DIR}/cargokit_phony"
ln -fs "${BUILT_PRODUCTS_DIR}/${EXECUTABLE_PATH}" "${BUILT_PRODUCTS_DIR}/cargokit_phony_out"
</file>

<file path="rust_builder/cargokit/LICENSE">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin

Copyright 2022 Matej Knopp

================================================================================

MIT LICENSE

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================================================================================

APACHE LICENSE, VERSION 2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</file>

<file path="rust_builder/cargokit/README">
/// This is copied from Cargokit (which is the official way to use it currently)
/// Details: https://fzyzcjy.github.io/flutter_rust_bridge/manual/integrate/builtin

Experimental repository to provide glue for seamlessly integrating cargo build
with flutter plugins and packages.

See https://matejknopp.com/post/flutter_plugin_in_rust_with_no_prebuilt_binaries/
for a tutorial on how to use Cargokit.

Example plugin available at https://github.com/irondash/hello_rust_ffi_plugin.
</file>

<file path="rust_builder/cargokit/run_build_tool.cmd">
@echo off
setlocal

setlocal ENABLEDELAYEDEXPANSION

SET BASEDIR=%~dp0

if not exist "%CARGOKIT_TOOL_TEMP_DIR%" (
    mkdir "%CARGOKIT_TOOL_TEMP_DIR%"
)
cd /D "%CARGOKIT_TOOL_TEMP_DIR%"

SET BUILD_TOOL_PKG_DIR=%BASEDIR%build_tool
SET DART=%FLUTTER_ROOT%\bin\cache\dart-sdk\bin\dart

set BUILD_TOOL_PKG_DIR_POSIX=%BUILD_TOOL_PKG_DIR:\=/%

(
    echo name: build_tool_runner
    echo version: 1.0.0
    echo publish_to: none
    echo.
    echo environment:
    echo   sdk: '^>=3.0.0 ^<4.0.0'
    echo.
    echo dependencies:
    echo   build_tool:
    echo     path: %BUILD_TOOL_PKG_DIR_POSIX%
) >pubspec.yaml

if not exist bin (
    mkdir bin
)

(
    echo import 'package:build_tool/build_tool.dart' as build_tool;
    echo void main^(List^<String^> args^) ^{
    echo    build_tool.runMain^(args^);
    echo ^}
) >bin\build_tool_runner.dart

SET PRECOMPILED=bin\build_tool_runner.dill

REM To detect changes in package we compare output of DIR /s (recursive)
set PREV_PACKAGE_INFO=.dart_tool\package_info.prev
set CUR_PACKAGE_INFO=.dart_tool\package_info.cur

DIR "%BUILD_TOOL_PKG_DIR%" /s > "%CUR_PACKAGE_INFO%_orig"

REM Last line in dir output is free space on harddrive. That is bound to
REM change between invocation so we need to remove it
(
    Set "Line="
    For /F "UseBackQ Delims=" %%A In ("%CUR_PACKAGE_INFO%_orig") Do (
        SetLocal EnableDelayedExpansion
        If Defined Line Echo !Line!
        EndLocal
        Set "Line=%%A")
) >"%CUR_PACKAGE_INFO%"
DEL "%CUR_PACKAGE_INFO%_orig"

REM Compare current directory listing with previous
FC /B "%CUR_PACKAGE_INFO%" "%PREV_PACKAGE_INFO%" > nul 2>&1

If %ERRORLEVEL% neq 0 (
    REM Changed - copy current to previous and remove precompiled kernel
    if exist "%PREV_PACKAGE_INFO%" (
        DEL "%PREV_PACKAGE_INFO%"
    )
    MOVE /Y "%CUR_PACKAGE_INFO%" "%PREV_PACKAGE_INFO%"
    if exist "%PRECOMPILED%" (
        DEL "%PRECOMPILED%"
    )
)

REM There is no CUR_PACKAGE_INFO it was renamed in previous step to %PREV_PACKAGE_INFO%
REM which means  we need to do pub get and precompile
if not exist "%PRECOMPILED%" (
    echo Running pub get in "%cd%"
    "%DART%" pub get --no-precompile
    "%DART%" compile kernel bin/build_tool_runner.dart
)

"%DART%" "%PRECOMPILED%" %*

REM 253 means invalid snapshot version.
If %ERRORLEVEL% equ 253 (
    "%DART%" pub get --no-precompile
    "%DART%" compile kernel bin/build_tool_runner.dart
    "%DART%" "%PRECOMPILED%" %*
)
</file>

<file path="rust_builder/cargokit/run_build_tool.sh">
#!/usr/bin/env bash
set -e
BASEDIR=$(dirname "$0")
mkdir -p "$CARGOKIT_TOOL_TEMP_DIR"
cd "$CARGOKIT_TOOL_TEMP_DIR"
# Write a very simple bin package in temp folder that depends on build_tool package
# from Cargokit. This is done to ensure that we don't pollute Cargokit folder
# with .dart_tool contents.
BUILD_TOOL_PKG_DIR="$BASEDIR/build_tool"
if [[ -z $FLUTTER_ROOT ]]; then # not defined
  DART=dart
else
  DART="$FLUTTER_ROOT/bin/cache/dart-sdk/bin/dart"
fi
cat << EOF > "pubspec.yaml"
name: build_tool_runner
version: 1.0.0
publish_to: none
environment:
  sdk: '>=3.0.0 <4.0.0'
dependencies:
  build_tool:
    path: "$BUILD_TOOL_PKG_DIR"
EOF
mkdir -p "bin"
cat << EOF > "bin/build_tool_runner.dart"
import 'package:build_tool/build_tool.dart' as build_tool;
void main(List<String> args) {
  build_tool.runMain(args);
}
EOF
# Create alias for `shasum` if it does not exist and `sha1sum` exists
if ! [ -x "$(command -v shasum)" ] && [ -x "$(command -v sha1sum)" ]; then
  shopt -s expand_aliases
  alias shasum="sha1sum"
fi
# Dart run will not cache any package that has a path dependency, which
# is the case for our build_tool_runner. So instead we precompile the package
# ourselves.
# To invalidate the cached kernel we use the hash of ls -LR of the build_tool
# package directory. This should be good enough, as the build_tool package
# itself is not meant to have any path dependencies.
if [[ "$OSTYPE" == "darwin"* ]]; then
  PACKAGE_HASH=$(ls -lTR "$BUILD_TOOL_PKG_DIR" | shasum)
else
  PACKAGE_HASH=$(ls -lR --full-time "$BUILD_TOOL_PKG_DIR" | shasum)
fi
PACKAGE_HASH_FILE=".package_hash"
if [ -f "$PACKAGE_HASH_FILE" ]; then
    EXISTING_HASH=$(cat "$PACKAGE_HASH_FILE")
    if [ "$PACKAGE_HASH" != "$EXISTING_HASH" ]; then
        rm "$PACKAGE_HASH_FILE"
    fi
fi
# Run pub get if needed.
if [ ! -f "$PACKAGE_HASH_FILE" ]; then
    "$DART" pub get --no-precompile
    "$DART" compile kernel bin/build_tool_runner.dart
    echo "$PACKAGE_HASH" > "$PACKAGE_HASH_FILE"
fi
set +e
"$DART" bin/build_tool_runner.dill "$@"
exit_code=$?
# 253 means invalid snapshot version.
if [ $exit_code == 253 ]; then
  "$DART" pub get --no-precompile
  "$DART" compile kernel bin/build_tool_runner.dart
  "$DART" bin/build_tool_runner.dill "$@"
  exit_code=$?
fi
exit $exit_code
</file>

<file path="rust_builder/ios/Classes/dummy_file.c">
// This is an empty file to force CocoaPods to create a framework.
</file>

<file path="rust_builder/ios/rust_lib_whitenoise.podspec">
#
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html.
# Run `pod lib lint rust_lib_whitenoise.podspec` to validate before publishing.
#
Pod::Spec.new do |s|
  s.name             = 'rust_lib_whitenoise'
  s.version          = '0.0.1'
  s.summary          = 'A new Flutter FFI plugin project.'
  s.description      = <<-DESC
A new Flutter FFI plugin project.
                       DESC
  s.homepage         = 'http://example.com'
  s.license          = { :file => '../LICENSE' }
  s.author           = { 'Your Company' => 'email@example.com' }

  # This will ensure the source files in Classes/ are included in the native
  # builds of apps using this FFI plugin. Podspec does not support relative
  # paths, so Classes contains a forwarder C file that relatively imports
  # `../src/*` so that the C sources can be shared among all target platforms.
  s.source           = { :path => '.' }
  s.source_files = 'Classes/**/*'
  s.dependency 'Flutter'
  s.platform = :ios, '11.0'

  # Flutter.framework does not contain a i386 slice.
  s.pod_target_xcconfig = { 'DEFINES_MODULE' => 'YES', 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'i386' }
  s.swift_version = '5.0'

  s.script_phase = {
    :name => 'Build Rust library',
    # First argument is relative path to the `rust` folder, second is name of rust library
    :script => 'sh "$PODS_TARGET_SRCROOT/../cargokit/build_pod.sh" ../../rust rust_lib_whitenoise',
    :execution_position => :before_compile,
    :input_files => ['${BUILT_PRODUCTS_DIR}/cargokit_phony'],
    # Let XCode know that the static library referenced in -force_load below is
    # created by this build step.
    :output_files => ["${BUILT_PRODUCTS_DIR}/librust_lib_whitenoise.a"],
  }
  s.pod_target_xcconfig = {
    'DEFINES_MODULE' => 'YES',
    # Flutter.framework does not contain a i386 slice.
    'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'i386',
    'OTHER_LDFLAGS' => '-force_load ${BUILT_PRODUCTS_DIR}/librust_lib_whitenoise.a',
  }
end
</file>

<file path="rust_builder/linux/CMakeLists.txt">
# The Flutter tooling requires that developers have CMake 3.10 or later
# installed. You should not increase this version, as doing so will cause
# the plugin to fail to compile for some customers of the plugin.
cmake_minimum_required(VERSION 3.10)

# Project-level configuration.
set(PROJECT_NAME "rust_lib_whitenoise")
project(${PROJECT_NAME} LANGUAGES CXX)

include("../cargokit/cmake/cargokit.cmake")
apply_cargokit(${PROJECT_NAME} ../../rust rust_lib_whitenoise "")

# List of absolute paths to libraries that should be bundled with the plugin.
# This list could contain prebuilt libraries, or libraries created by an
# external build triggered from this build file.
set(rust_lib_whitenoise_bundled_libraries
  "${${PROJECT_NAME}_cargokit_lib}"
  PARENT_SCOPE
)
</file>

<file path="rust_builder/macos/Classes/dummy_file.c">
// This is an empty file to force CocoaPods to create a framework.
</file>

<file path="rust_builder/macos/rust_lib_whitenoise.podspec">
#
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html.
# Run `pod lib lint rust_lib_whitenoise.podspec` to validate before publishing.
#
Pod::Spec.new do |s|
  s.name             = 'rust_lib_whitenoise'
  s.version          = '0.0.1'
  s.summary          = 'A new Flutter FFI plugin project.'
  s.description      = <<-DESC
A new Flutter FFI plugin project.
                       DESC
  s.homepage         = 'http://example.com'
  s.license          = { :file => '../LICENSE' }
  s.author           = { 'Your Company' => 'email@example.com' }

  # This will ensure the source files in Classes/ are included in the native
  # builds of apps using this FFI plugin. Podspec does not support relative
  # paths, so Classes contains a forwarder C file that relatively imports
  # `../src/*` so that the C sources can be shared among all target platforms.
  s.source           = { :path => '.' }
  s.source_files     = 'Classes/**/*'
  s.dependency 'FlutterMacOS'

  s.platform = :osx, '10.11'
  s.pod_target_xcconfig = { 'DEFINES_MODULE' => 'YES' }
  s.swift_version = '5.0'

  s.script_phase = {
    :name => 'Build Rust library',
    # First argument is relative path to the `rust` folder, second is name of rust library
    :script => 'sh "$PODS_TARGET_SRCROOT/../cargokit/build_pod.sh" ../../rust rust_lib_whitenoise',
    :execution_position => :before_compile,
    :input_files => ['${BUILT_PRODUCTS_DIR}/cargokit_phony'],
    # Let XCode know that the static library referenced in -force_load below is
    # created by this build step.
    :output_files => ["${BUILT_PRODUCTS_DIR}/librust_lib_whitenoise.a"],
  }
  s.pod_target_xcconfig = {
    'DEFINES_MODULE' => 'YES',
    # Flutter.framework does not contain a i386 slice.
    'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'i386',
    'OTHER_LDFLAGS' => '-force_load ${BUILT_PRODUCTS_DIR}/librust_lib_whitenoise.a',
  }
end
</file>

<file path="rust_builder/windows/.gitignore">
flutter/

# Visual Studio user-specific files.
*.suo
*.user
*.userosscache
*.sln.docstates

# Visual Studio build-related files.
x64/
x86/

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/
</file>

<file path="rust_builder/windows/CMakeLists.txt">
# The Flutter tooling requires that developers have a version of Visual Studio
# installed that includes CMake 3.14 or later. You should not increase this
# version, as doing so will cause the plugin to fail to compile for some
# customers of the plugin.
cmake_minimum_required(VERSION 3.14)

# Project-level configuration.
set(PROJECT_NAME "rust_lib_whitenoise")
project(${PROJECT_NAME} LANGUAGES CXX)

include("../cargokit/cmake/cargokit.cmake")
apply_cargokit(${PROJECT_NAME} ../../../../../../rust rust_lib_whitenoise "")

# List of absolute paths to libraries that should be bundled with the plugin.
# This list could contain prebuilt libraries, or libraries created by an
# external build triggered from this build file.
set(rust_lib_whitenoise_bundled_libraries
  "${${PROJECT_NAME}_cargokit_lib}"
  PARENT_SCOPE
)
</file>

<file path="rust_builder/.gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.
/pubspec.lock
**/doc/api/
.dart_tool/
build/
</file>

<file path="rust_builder/pubspec.yaml">
name: rust_lib_whitenoise
description: "Utility to build Rust code"
version: 0.0.1
publish_to: none
environment:
  sdk: '>=3.3.0 <4.0.0'
  flutter: '>=3.3.0'
dependencies:
  flutter:
    sdk: flutter
  plugin_platform_interface: ^2.0.2
dev_dependencies:
  ffi: ^2.0.2
  ffigen: ^11.0.0
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0
flutter:
  plugin:
    platforms:
      android:
        ffiPlugin: true
      ios:
        ffiPlugin: true
      linux:
        ffiPlugin: true
      macos:
        ffiPlugin: true
      windows:
        ffiPlugin: true
</file>

<file path="rust_builder/README.md">
Please ignore this folder, which is just glue to build Rust with Flutter.
</file>

<file path="windows/flutter/CMakeLists.txt">
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.14)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.
set(WRAPPER_ROOT "${EPHEMERAL_DIR}/cpp_client_wrapper")

# Set fallback configurations for older versions of the flutter tool.
if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
  set(FLUTTER_TARGET_PLATFORM "windows-x64")
endif()

# === Flutter Library ===
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)

# === Wrapper ===
list(APPEND CPP_WRAPPER_SOURCES_CORE
  "core_implementations.cc"
  "standard_codec.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
  "plugin_registrar.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_APP
  "flutter_engine.cc"
  "flutter_view_controller.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")

# Wrapper sources needed for a plugin.
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)

# Wrapper sources needed for the runner.
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
</file>

<file path="windows/flutter/generated_plugin_registrant.h">
//
//  Generated file. Do not edit.
//
// clang-format off
#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_
#include <flutter/plugin_registry.h>
// Registers Flutter plugins.
void RegisterPlugins(flutter::PluginRegistry* registry);
#endif  // GENERATED_PLUGIN_REGISTRANT_
</file>

<file path="windows/runner/CMakeLists.txt">
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
</file>

<file path="windows/runner/flutter_window.cpp">
#include "flutter_window.h"
#include <optional>
#include "flutter/generated_plugin_registrant.h"
FlutterWindow::FlutterWindow(const flutter::DartProject& project)
    : project_(project) {}
FlutterWindow::~FlutterWindow() {}
bool FlutterWindow::OnCreate() {
  if (!Win32Window::OnCreate()) {
    return false;
  }
  RECT frame = GetClientArea();
  // The size here must match the window dimensions to avoid unnecessary surface
  // creation / destruction in the startup path.
  flutter_controller_ = std::make_unique<flutter::FlutterViewController>(
      frame.right - frame.left, frame.bottom - frame.top, project_);
  // Ensure that basic setup of the controller was successful.
  if (!flutter_controller_->engine() || !flutter_controller_->view()) {
    return false;
  }
  RegisterPlugins(flutter_controller_->engine());
  SetChildContent(flutter_controller_->view()->GetNativeWindow());
  flutter_controller_->engine()->SetNextFrameCallback([&]() {
    this->Show();
  });
  // Flutter can complete the first frame before the "show window" callback is
  // registered. The following call ensures a frame is pending to ensure the
  // window is shown. It is a no-op if the first frame hasn't completed yet.
  flutter_controller_->ForceRedraw();
  return true;
}
void FlutterWindow::OnDestroy() {
  if (flutter_controller_) {
    flutter_controller_ = nullptr;
  }
  Win32Window::OnDestroy();
}
LRESULT
FlutterWindow::MessageHandler(HWND hwnd, UINT const message,
                              WPARAM const wparam,
                              LPARAM const lparam) noexcept {
  // Give Flutter, including plugins, an opportunity to handle window messages.
  if (flutter_controller_) {
    std::optional<LRESULT> result =
        flutter_controller_->HandleTopLevelWindowProc(hwnd, message, wparam,
                                                      lparam);
    if (result) {
      return *result;
    }
  }
  switch (message) {
    case WM_FONTCHANGE:
      flutter_controller_->engine()->ReloadSystemFonts();
      break;
  }
  return Win32Window::MessageHandler(hwnd, message, wparam, lparam);
}
</file>

<file path="windows/runner/flutter_window.h">
#ifndef RUNNER_FLUTTER_WINDOW_H_
#define RUNNER_FLUTTER_WINDOW_H_
#include <flutter/dart_project.h>
#include <flutter/flutter_view_controller.h>
#include <memory>
#include "win32_window.h"
// A window that does nothing but host a Flutter view.
class FlutterWindow : public Win32Window {
 public:
  // Creates a new FlutterWindow hosting a Flutter view running |project|.
  explicit FlutterWindow(const flutter::DartProject& project);
  virtual ~FlutterWindow();
 protected:
  // Win32Window:
  bool OnCreate() override;
  void OnDestroy() override;
  LRESULT MessageHandler(HWND window, UINT const message, WPARAM const wparam,
                         LPARAM const lparam) noexcept override;
 private:
  // The project to run.
  flutter::DartProject project_;
  // The Flutter instance hosted by this window.
  std::unique_ptr<flutter::FlutterViewController> flutter_controller_;
};
#endif  // RUNNER_FLUTTER_WINDOW_H_
</file>

<file path="windows/runner/main.cpp">
#include <flutter/dart_project.h>
#include <flutter/flutter_view_controller.h>
#include <windows.h>
#include "flutter_window.h"
#include "utils.h"
int APIENTRY wWinMain(_In_ HINSTANCE instance, _In_opt_ HINSTANCE prev,
                      _In_ wchar_t *command_line, _In_ int show_command) {
  // Attach to console when present (e.g., 'flutter run') or create a
  // new console when running with a debugger.
  if (!::AttachConsole(ATTACH_PARENT_PROCESS) && ::IsDebuggerPresent()) {
    CreateAndAttachConsole();
  }
  // Initialize COM, so that it is available for use in the library and/or
  // plugins.
  ::CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);
  flutter::DartProject project(L"data");
  std::vector<std::string> command_line_arguments =
      GetCommandLineArguments();
  project.set_dart_entrypoint_arguments(std::move(command_line_arguments));
  FlutterWindow window(project);
  Win32Window::Point origin(10, 10);
  Win32Window::Size size(1280, 720);
  if (!window.Create(L"whitenoise", origin, size)) {
    return EXIT_FAILURE;
  }
  window.SetQuitOnClose(true);
  ::MSG msg;
  while (::GetMessage(&msg, nullptr, 0, 0)) {
    ::TranslateMessage(&msg);
    ::DispatchMessage(&msg);
  }
  ::CoUninitialize();
  return EXIT_SUCCESS;
}
</file>

<file path="windows/runner/resource.h">
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by Runner.rc
//
#define IDI_APP_ICON                    101
// Next default values for new objects
//
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        102
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
</file>

<file path="windows/runner/runner.exe.manifest">
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <application xmlns="urn:schemas-microsoft-com:asm.v3">
    <windowsSettings>
      <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2</dpiAwareness>
    </windowsSettings>
  </application>
  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!-- Windows 10 and Windows 11 -->
      <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
    </application>
  </compatibility>
</assembly>
</file>

<file path="windows/runner/Runner.rc">
// Microsoft Visual C++ generated resource script.
//
#pragma code_page(65001)
#include "resource.h"

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include "winres.h"

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// English (United States) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US

#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE
BEGIN
    "resource.h\0"
END

2 TEXTINCLUDE
BEGIN
    "#include ""winres.h""\r\n"
    "\0"
END

3 TEXTINCLUDE
BEGIN
    "\r\n"
    "\0"
END

#endif    // APSTUDIO_INVOKED


/////////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDI_APP_ICON            ICON                    "resources\\app_icon.ico"


/////////////////////////////////////////////////////////////////////////////
//
// Version
//

#if defined(FLUTTER_VERSION_MAJOR) && defined(FLUTTER_VERSION_MINOR) && defined(FLUTTER_VERSION_PATCH) && defined(FLUTTER_VERSION_BUILD)
#define VERSION_AS_NUMBER FLUTTER_VERSION_MAJOR,FLUTTER_VERSION_MINOR,FLUTTER_VERSION_PATCH,FLUTTER_VERSION_BUILD
#else
#define VERSION_AS_NUMBER 1,0,0,0
#endif

#if defined(FLUTTER_VERSION)
#define VERSION_AS_STRING FLUTTER_VERSION
#else
#define VERSION_AS_STRING "1.0.0"
#endif

VS_VERSION_INFO VERSIONINFO
 FILEVERSION VERSION_AS_NUMBER
 PRODUCTVERSION VERSION_AS_NUMBER
 FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
#ifdef _DEBUG
 FILEFLAGS VS_FF_DEBUG
#else
 FILEFLAGS 0x0L
#endif
 FILEOS VOS__WINDOWS32
 FILETYPE VFT_APP
 FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904e4"
        BEGIN
            VALUE "CompanyName", "com.example" "\0"
            VALUE "FileDescription", "whitenoise" "\0"
            VALUE "FileVersion", VERSION_AS_STRING "\0"
            VALUE "InternalName", "whitenoise" "\0"
            VALUE "LegalCopyright", "Copyright (C) 2025 com.example. All rights reserved." "\0"
            VALUE "OriginalFilename", "whitenoise.exe" "\0"
            VALUE "ProductName", "whitenoise" "\0"
            VALUE "ProductVersion", VERSION_AS_STRING "\0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1252
    END
END

#endif    // English (United States) resources
/////////////////////////////////////////////////////////////////////////////



#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//


/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</file>

<file path="windows/runner/utils.cpp">
#include "utils.h"
#include <flutter_windows.h>
#include <io.h>
#include <stdio.h>
#include <windows.h>
#include <iostream>
void CreateAndAttachConsole() {
  if (::AllocConsole()) {
    FILE *unused;
    if (freopen_s(&unused, "CONOUT$", "w", stdout)) {
      _dup2(_fileno(stdout), 1);
    }
    if (freopen_s(&unused, "CONOUT$", "w", stderr)) {
      _dup2(_fileno(stdout), 2);
    }
    std::ios::sync_with_stdio();
    FlutterDesktopResyncOutputStreams();
  }
}
std::vector<std::string> GetCommandLineArguments() {
  // Convert the UTF-16 command line arguments to UTF-8 for the Engine to use.
  int argc;
  wchar_t** argv = ::CommandLineToArgvW(::GetCommandLineW(), &argc);
  if (argv == nullptr) {
    return std::vector<std::string>();
  }
  std::vector<std::string> command_line_arguments;
  // Skip the first argument as it's the binary name.
  for (int i = 1; i < argc; i++) {
    command_line_arguments.push_back(Utf8FromUtf16(argv[i]));
  }
  ::LocalFree(argv);
  return command_line_arguments;
}
std::string Utf8FromUtf16(const wchar_t* utf16_string) {
  if (utf16_string == nullptr) {
    return std::string();
  }
  unsigned int target_length = ::WideCharToMultiByte(
      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,
      -1, nullptr, 0, nullptr, nullptr)
    -1; // remove the trailing null character
  int input_length = (int)wcslen(utf16_string);
  std::string utf8_string;
  if (target_length == 0 || target_length > utf8_string.max_size()) {
    return utf8_string;
  }
  utf8_string.resize(target_length);
  int converted_length = ::WideCharToMultiByte(
      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,
      input_length, utf8_string.data(), target_length, nullptr, nullptr);
  if (converted_length == 0) {
    return std::string();
  }
  return utf8_string;
}
</file>

<file path="windows/runner/utils.h">
#ifndef RUNNER_UTILS_H_
#define RUNNER_UTILS_H_
#include <string>
#include <vector>
// Creates a console for the process, and redirects stdout and stderr to
// it for both the runner and the Flutter library.
void CreateAndAttachConsole();
// Takes a null-terminated wchar_t* encoded in UTF-16 and returns a std::string
// encoded in UTF-8. Returns an empty std::string on failure.
std::string Utf8FromUtf16(const wchar_t* utf16_string);
// Gets the command line arguments passed in as a std::vector<std::string>,
// encoded in UTF-8. Returns an empty std::vector<std::string> on failure.
std::vector<std::string> GetCommandLineArguments();
#endif  // RUNNER_UTILS_H_
</file>

<file path="windows/runner/win32_window.cpp">
#include "win32_window.h"
#include <dwmapi.h>
#include <flutter_windows.h>
#include "resource.h"
namespace {
/// Window attribute that enables dark mode window decorations.
///
/// Redefined in case the developer's machine has a Windows SDK older than
/// version 10.0.22000.0.
/// See: https://docs.microsoft.com/windows/win32/api/dwmapi/ne-dwmapi-dwmwindowattribute
#ifndef DWMWA_USE_IMMERSIVE_DARK_MODE
#define DWMWA_USE_IMMERSIVE_DARK_MODE 20
#endif
constexpr const wchar_t kWindowClassName[] = L"FLUTTER_RUNNER_WIN32_WINDOW";
/// Registry key for app theme preference.
///
/// A value of 0 indicates apps should use dark mode. A non-zero or missing
/// value indicates apps should use light mode.
constexpr const wchar_t kGetPreferredBrightnessRegKey[] =
  L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize";
constexpr const wchar_t kGetPreferredBrightnessRegValue[] = L"AppsUseLightTheme";
// The number of Win32Window objects that currently exist.
static int g_active_window_count = 0;
using EnableNonClientDpiScaling = BOOL __stdcall(HWND hwnd);
// Scale helper to convert logical scaler values to physical using passed in
// scale factor
int Scale(int source, double scale_factor) {
  return static_cast<int>(source * scale_factor);
}
// Dynamically loads the |EnableNonClientDpiScaling| from the User32 module.
// This API is only needed for PerMonitor V1 awareness mode.
void EnableFullDpiSupportIfAvailable(HWND hwnd) {
  HMODULE user32_module = LoadLibraryA("User32.dll");
  if (!user32_module) {
    return;
  }
  auto enable_non_client_dpi_scaling =
      reinterpret_cast<EnableNonClientDpiScaling*>(
          GetProcAddress(user32_module, "EnableNonClientDpiScaling"));
  if (enable_non_client_dpi_scaling != nullptr) {
    enable_non_client_dpi_scaling(hwnd);
  }
  FreeLibrary(user32_module);
}
}  // namespace
// Manages the Win32Window's window class registration.
class WindowClassRegistrar {
 public:
  ~WindowClassRegistrar() = default;
  // Returns the singleton registrar instance.
  static WindowClassRegistrar* GetInstance() {
    if (!instance_) {
      instance_ = new WindowClassRegistrar();
    }
    return instance_;
  }
  // Returns the name of the window class, registering the class if it hasn't
  // previously been registered.
  const wchar_t* GetWindowClass();
  // Unregisters the window class. Should only be called if there are no
  // instances of the window.
  void UnregisterWindowClass();
 private:
  WindowClassRegistrar() = default;
  static WindowClassRegistrar* instance_;
  bool class_registered_ = false;
};
WindowClassRegistrar* WindowClassRegistrar::instance_ = nullptr;
const wchar_t* WindowClassRegistrar::GetWindowClass() {
  if (!class_registered_) {
    WNDCLASS window_class{};
    window_class.hCursor = LoadCursor(nullptr, IDC_ARROW);
    window_class.lpszClassName = kWindowClassName;
    window_class.style = CS_HREDRAW | CS_VREDRAW;
    window_class.cbClsExtra = 0;
    window_class.cbWndExtra = 0;
    window_class.hInstance = GetModuleHandle(nullptr);
    window_class.hIcon =
        LoadIcon(window_class.hInstance, MAKEINTRESOURCE(IDI_APP_ICON));
    window_class.hbrBackground = 0;
    window_class.lpszMenuName = nullptr;
    window_class.lpfnWndProc = Win32Window::WndProc;
    RegisterClass(&window_class);
    class_registered_ = true;
  }
  return kWindowClassName;
}
void WindowClassRegistrar::UnregisterWindowClass() {
  UnregisterClass(kWindowClassName, nullptr);
  class_registered_ = false;
}
Win32Window::Win32Window() {
  ++g_active_window_count;
}
Win32Window::~Win32Window() {
  --g_active_window_count;
  Destroy();
}
bool Win32Window::Create(const std::wstring& title,
                         const Point& origin,
                         const Size& size) {
  Destroy();
  const wchar_t* window_class =
      WindowClassRegistrar::GetInstance()->GetWindowClass();
  const POINT target_point = {static_cast<LONG>(origin.x),
                              static_cast<LONG>(origin.y)};
  HMONITOR monitor = MonitorFromPoint(target_point, MONITOR_DEFAULTTONEAREST);
  UINT dpi = FlutterDesktopGetDpiForMonitor(monitor);
  double scale_factor = dpi / 96.0;
  HWND window = CreateWindow(
      window_class, title.c_str(), WS_OVERLAPPEDWINDOW,
      Scale(origin.x, scale_factor), Scale(origin.y, scale_factor),
      Scale(size.width, scale_factor), Scale(size.height, scale_factor),
      nullptr, nullptr, GetModuleHandle(nullptr), this);
  if (!window) {
    return false;
  }
  UpdateTheme(window);
  return OnCreate();
}
bool Win32Window::Show() {
  return ShowWindow(window_handle_, SW_SHOWNORMAL);
}
// static
LRESULT CALLBACK Win32Window::WndProc(HWND const window,
                                      UINT const message,
                                      WPARAM const wparam,
                                      LPARAM const lparam) noexcept {
  if (message == WM_NCCREATE) {
    auto window_struct = reinterpret_cast<CREATESTRUCT*>(lparam);
    SetWindowLongPtr(window, GWLP_USERDATA,
                     reinterpret_cast<LONG_PTR>(window_struct->lpCreateParams));
    auto that = static_cast<Win32Window*>(window_struct->lpCreateParams);
    EnableFullDpiSupportIfAvailable(window);
    that->window_handle_ = window;
  } else if (Win32Window* that = GetThisFromHandle(window)) {
    return that->MessageHandler(window, message, wparam, lparam);
  }
  return DefWindowProc(window, message, wparam, lparam);
}
LRESULT
Win32Window::MessageHandler(HWND hwnd,
                            UINT const message,
                            WPARAM const wparam,
                            LPARAM const lparam) noexcept {
  switch (message) {
    case WM_DESTROY:
      window_handle_ = nullptr;
      Destroy();
      if (quit_on_close_) {
        PostQuitMessage(0);
      }
      return 0;
    case WM_DPICHANGED: {
      auto newRectSize = reinterpret_cast<RECT*>(lparam);
      LONG newWidth = newRectSize->right - newRectSize->left;
      LONG newHeight = newRectSize->bottom - newRectSize->top;
      SetWindowPos(hwnd, nullptr, newRectSize->left, newRectSize->top, newWidth,
                   newHeight, SWP_NOZORDER | SWP_NOACTIVATE);
      return 0;
    }
    case WM_SIZE: {
      RECT rect = GetClientArea();
      if (child_content_ != nullptr) {
        // Size and position the child window.
        MoveWindow(child_content_, rect.left, rect.top, rect.right - rect.left,
                   rect.bottom - rect.top, TRUE);
      }
      return 0;
    }
    case WM_ACTIVATE:
      if (child_content_ != nullptr) {
        SetFocus(child_content_);
      }
      return 0;
    case WM_DWMCOLORIZATIONCOLORCHANGED:
      UpdateTheme(hwnd);
      return 0;
  }
  return DefWindowProc(window_handle_, message, wparam, lparam);
}
void Win32Window::Destroy() {
  OnDestroy();
  if (window_handle_) {
    DestroyWindow(window_handle_);
    window_handle_ = nullptr;
  }
  if (g_active_window_count == 0) {
    WindowClassRegistrar::GetInstance()->UnregisterWindowClass();
  }
}
Win32Window* Win32Window::GetThisFromHandle(HWND const window) noexcept {
  return reinterpret_cast<Win32Window*>(
      GetWindowLongPtr(window, GWLP_USERDATA));
}
void Win32Window::SetChildContent(HWND content) {
  child_content_ = content;
  SetParent(content, window_handle_);
  RECT frame = GetClientArea();
  MoveWindow(content, frame.left, frame.top, frame.right - frame.left,
             frame.bottom - frame.top, true);
  SetFocus(child_content_);
}
RECT Win32Window::GetClientArea() {
  RECT frame;
  GetClientRect(window_handle_, &frame);
  return frame;
}
HWND Win32Window::GetHandle() {
  return window_handle_;
}
void Win32Window::SetQuitOnClose(bool quit_on_close) {
  quit_on_close_ = quit_on_close;
}
bool Win32Window::OnCreate() {
  // No-op; provided for subclasses.
  return true;
}
void Win32Window::OnDestroy() {
  // No-op; provided for subclasses.
}
void Win32Window::UpdateTheme(HWND const window) {
  DWORD light_mode;
  DWORD light_mode_size = sizeof(light_mode);
  LSTATUS result = RegGetValue(HKEY_CURRENT_USER, kGetPreferredBrightnessRegKey,
                               kGetPreferredBrightnessRegValue,
                               RRF_RT_REG_DWORD, nullptr, &light_mode,
                               &light_mode_size);
  if (result == ERROR_SUCCESS) {
    BOOL enable_dark_mode = light_mode == 0;
    DwmSetWindowAttribute(window, DWMWA_USE_IMMERSIVE_DARK_MODE,
                          &enable_dark_mode, sizeof(enable_dark_mode));
  }
}
</file>

<file path="windows/runner/win32_window.h">
#ifndef RUNNER_WIN32_WINDOW_H_
#define RUNNER_WIN32_WINDOW_H_
#include <windows.h>
#include <functional>
#include <memory>
#include <string>
// A class abstraction for a high DPI-aware Win32 Window. Intended to be
// inherited from by classes that wish to specialize with custom
// rendering and input handling
class Win32Window {
 public:
  struct Point {
    unsigned int x;
    unsigned int y;
    Point(unsigned int x, unsigned int y) : x(x), y(y) {}
  };
  struct Size {
    unsigned int width;
    unsigned int height;
    Size(unsigned int width, unsigned int height)
        : width(width), height(height) {}
  };
  Win32Window();
  virtual ~Win32Window();
  // Creates a win32 window with |title| that is positioned and sized using
  // |origin| and |size|. New windows are created on the default monitor. Window
  // sizes are specified to the OS in physical pixels, hence to ensure a
  // consistent size this function will scale the inputted width and height as
  // as appropriate for the default monitor. The window is invisible until
  // |Show| is called. Returns true if the window was created successfully.
  bool Create(const std::wstring& title, const Point& origin, const Size& size);
  // Show the current window. Returns true if the window was successfully shown.
  bool Show();
  // Release OS resources associated with window.
  void Destroy();
  // Inserts |content| into the window tree.
  void SetChildContent(HWND content);
  // Returns the backing Window handle to enable clients to set icon and other
  // window properties. Returns nullptr if the window has been destroyed.
  HWND GetHandle();
  // If true, closing this window will quit the application.
  void SetQuitOnClose(bool quit_on_close);
  // Return a RECT representing the bounds of the current client area.
  RECT GetClientArea();
 protected:
  // Processes and route salient window messages for mouse handling,
  // size change and DPI. Delegates handling of these to member overloads that
  // inheriting classes can handle.
  virtual LRESULT MessageHandler(HWND window,
                                 UINT const message,
                                 WPARAM const wparam,
                                 LPARAM const lparam) noexcept;
  // Called when CreateAndShow is called, allowing subclass window-related
  // setup. Subclasses should return false if setup fails.
  virtual bool OnCreate();
  // Called when Destroy is called.
  virtual void OnDestroy();
 private:
  friend class WindowClassRegistrar;
  // OS callback called by message pump. Handles the WM_NCCREATE message which
  // is passed when the non-client area is being created and enables automatic
  // non-client DPI scaling so that the non-client area automatically
  // responds to changes in DPI. All other messages are handled by
  // MessageHandler.
  static LRESULT CALLBACK WndProc(HWND const window,
                                  UINT const message,
                                  WPARAM const wparam,
                                  LPARAM const lparam) noexcept;
  // Retrieves a class instance pointer for |window|
  static Win32Window* GetThisFromHandle(HWND const window) noexcept;
  // Update the window frame's theme to match the system theme.
  static void UpdateTheme(HWND const window);
  bool quit_on_close_ = false;
  // window handle for top level window.
  HWND window_handle_ = nullptr;
  // window handle for hosted content.
  HWND child_content_ = nullptr;
};
#endif  // RUNNER_WIN32_WINDOW_H_
</file>

<file path="windows/.gitignore">
flutter/ephemeral/

# Visual Studio user-specific files.
*.suo
*.user
*.userosscache
*.sln.docstates

# Visual Studio build-related files.
x64/
x86/

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/
</file>

<file path="windows/CMakeLists.txt">
# Project-level configuration.
cmake_minimum_required(VERSION 3.14)
project(whitenoise LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "whitenoise")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)

# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")

# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/windows/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
</file>

<file path=".metadata">
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "ea121f8859e4b13e47a8f845e4586164519588bc"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
    - platform: android
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
    - platform: ios
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
    - platform: linux
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
    - platform: macos
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
    - platform: windows
      create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
      base_revision: ea121f8859e4b13e47a8f845e4586164519588bc

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'
</file>

<file path="analysis_options.yaml">
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.
# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
</file>

<file path="flutter_rust_bridge.yaml">
rust_input: crate::api
rust_root: rust/
dart_output: lib/src/rust
</file>

<file path="LICENSE">
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.
</file>

<file path="README.md">
# White Noise

A secure, private, and decentralized chat app built on Nostr, using the MLS protocol under the hood.
</file>

<file path=".context/00_high_level.md">
# High Level Overview

## Project Overview
WhiteNoise is a secure messaging application built with Flutter & Rust, leveraging Nostr's decentralized infrastructure and the MLS protocol for secure, scalable messaging. The app will support iOS, Android, macOS, Linux, and Windows platforms.

## Core Architecture

### Rust Integration
- Core functionality implemented in a separate Rust crate
- Communication via Flutter-Rust bridge (FFI)
- Rust crate handles:
  - MLS protocol operations
  - Nostr protocol operations
  - Group management & data storage
  - Message encryption/decryption
  - Key management
  - Account & app settings management

### Flutter Application
- Primarily presentational layer
- Receives comprehensive state object from Rust layer
- Updates UI based on state changes and events
- Platform-specific UI components where appropriate
- Response design that works well on mobile screens but expands to two panel design (like most messengers) at wider screens on desktop.

## Key Features

### Authentication & Key Management
- Create new Nostr key pairs
- Import existing Nostr keys
- Secure storage of private keys using OS-specific secure storage
- Key export functionality for backup purposes
- Optimized onboarding that keeps technical details to an ABSOLUTE minimum. We should always strive to follow a progressive approach to onboarding. For example: No mention of keys or backups at the beginning. Just create a new "account" and start using the app (maybe with the option to give your account a name). As the user uses the app more (presumably getting more value from it) we recommend they back up their keys.

### Messaging
- DM & Group messaging with MLS protocol
- Rich group chats (replies, reactions, delete/edit messages, encrypted media with Blossom server backed)
- Message encryption/decryption
- Message delivery status (whether it was successfully published to nostr relays)
- Group management (create groups, add/remove member, update group details, change member admin status, etc)
- Joining groups view invites (join via kind:444 welcome messages, join via QR code shown in person)

### Relay Management
- Bootstrapping connection to initial relays
- Read and use user's nostr relays from relay lists
- User-configurable relay list in settings
- Per-group relay configuration
- Relay connection status monitoring
- Resilient handling of offline relays
- Ability to authenticate automatically to relays that require authentication

### Push Notifications
- We want to have optional push notifications available for users.
  - The most helpful (but least privacy preserving) will be the platform specific push notifications. Many users will be fine with these so they should be the default but not on by default.
  - We want to offer nostr specific solutions where possible. e.g. Android notifications via Pokey
  - We want to try and background poll when needed so that we can fetch new messages periodically if we don't have push notifications turned on

### Built-in wallet
- We want to allow users to send money via lightning or cashu in the app.
- We have a lot of exploration and design to do here before we start implementing but it's good to know that it's something we want to add.

### Future Considerations
- Offline message queuing
- Deep linking to contacts, groups, and individual messages.
- Message delivery retry mechanisms
- Advanced group management features

## Technical Considerations

### State Management
- To be determined (Bloc is where I'm currently leaning)
- Will need to handle:
  - Account State
    - What accounts are signed in
    - App settings for each account
    - Which is the active account currently being used
    - Methods will include signing in, creating new keypairs, signing out, switching the active user, updating settings.
  - Nostr State
    - Relays that are connected
    - What signer we are using (this ALWAYS matches the currently active account)
    - The nostr data cache (this is the rust nostr database that holds cached nostr events - this is shared between different accounts because all events in the cache are public)
    - Very few methods directly accessed. Mostly we access Nostr via specific actions on Groups, or Messages.
  - Groups state
    - What groups (DMs & groups of more than 2 people) is the user part of.
    - Lots of metadata about the groups (last message time, last message preview, member count, etc) so we can show rich previews and allow users to search for groups in the list.
    - Methods include; fetching groups, creating groups, changing groups, sending messages to groups, etc.
  - Message state
    - This is state that is probably only loaded when the user clicks into a group. Otherwise the state object would become HUGE.
    - Containts all the messages in the group - should only load most recent and then load on demand as the user scrolls back
    - Methods include; fetching messages
- Data is stored locally in Sqlite (accounts & mls) or LMDB (nostr data cache) databases. The flutter front-end never connects directly to the databases.

### Platform-Specific Implementation
- Native platform UI components (e.g. material for android, linux, and windows, cupertino for ios and macos) for:
  - Alerts
  - Dialogs
  - Form controls
  - Navigation patterns
  - etc.
- We want to store all nostr keys in the platform's secure storage if possible (flutter_secure_storage)

### Background Processing and App Lifecycle Management
- We will want to have long-running processes in the rust crate that subscribe to specific nostr events, process them, and then update the front-end as needed.
- We need to react to changes in the app lifecycle (app going into the background, etc) and shutdown those long-lived processes while also registering background tasks that are appropriate for the platform that we're on (e.g. iOS and Android) This will give us the best shot of being able to update users to new messages as they come in.

### Performance Requirements
- Efficient message loading and display
- Responsive UI (and loading indicators) during compute intensive operations
- Optimized relay connection management
- Efficient state updates

### Security Considerations
- Secure key storage (ideally using the platform specific secure storage mechanisms)
- End-to-end encryption
- Secure communication with relays
- Protection against common attack vectors
- Protection of user and group metadata

## Development Guidelines
- Follow platform-specific design patterns for common UI (alerts, dialogs, etc)
- Implement comprehensive error handling
- Maintain clear separation between Rust and Flutter layers
- Focus on performance and security
- Ensure high degree of test coverage
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
    <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
    <uses-permission
        android:name="android.permission.READ_EXTERNAL_STORAGE"
        android:maxSdkVersion="32" />
    <uses-permission
        android:name="android.permission.WRITE_EXTERNAL_STORAGE"
        android:maxSdkVersion="32" />
    <application
        android:label="whitenoise"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.
         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>
</file>

<file path="android/app/build.gradle.kts">
plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.example.whitenoise"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.whitenoise"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        ndkVersion = "27.0.12077973"
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source = "../.."
}
</file>

<file path="assets/svgs/ic_add.svg">
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="24" height="24" fill="white" fill-opacity="0.01" style="mix-blend-mode:multiply"/>
<mask id="path-1-inside-1_3336_7803" fill="white">
<path d="M12.75 11.25V3.75H11.25V11.25H3.75V12.75H11.25V20.25H12.75V12.75H20.25V11.25H12.75Z"/>
</mask>
<path d="M12.75 11.25V3.75H11.25V11.25H3.75V12.75H11.25V20.25H12.75V12.75H20.25V11.25H12.75Z" fill="#161616"/>
<path d="M12.75 11.25H11.25V12.75H12.75V11.25ZM12.75 3.75H14.25V2.25H12.75V3.75ZM11.25 3.75V2.25H9.75V3.75H11.25ZM11.25 11.25V12.75H12.75V11.25H11.25ZM3.75 11.25V9.75H2.25V11.25H3.75ZM3.75 12.75H2.25V14.25H3.75V12.75ZM11.25 12.75H12.75V11.25H11.25V12.75ZM11.25 20.25H9.75V21.75H11.25V20.25ZM12.75 20.25V21.75H14.25V20.25H12.75ZM12.75 12.75V11.25H11.25V12.75H12.75ZM20.25 12.75V14.25H21.75V12.75H20.25ZM20.25 11.25H21.75V9.75H20.25V11.25ZM14.25 11.25V3.75H11.25V11.25H14.25ZM12.75 2.25H11.25V5.25H12.75V2.25ZM9.75 3.75V11.25H12.75V3.75H9.75ZM11.25 9.75H3.75V12.75H11.25V9.75ZM2.25 11.25V12.75H5.25V11.25H2.25ZM3.75 14.25H11.25V11.25H3.75V14.25ZM9.75 12.75V20.25H12.75V12.75H9.75ZM11.25 21.75H12.75V18.75H11.25V21.75ZM14.25 20.25V12.75H11.25V20.25H14.25ZM12.75 14.25H20.25V11.25H12.75V14.25ZM21.75 12.75V11.25H18.75V12.75H21.75ZM20.25 9.75H12.75V12.75H20.25V9.75Z" fill="#F9F9F9" mask="url(#path-1-inside-1_3336_7803)"/>
</svg>
</file>

<file path="assets/svgs/ic_camera.svg">
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="48" height="48" fill="white" fill-opacity="0.01" style="mix-blend-mode:multiply"/>
<path d="M43.5 39H4.5C4.10218 39 3.72064 38.842 3.43934 38.5607C3.15804 38.2794 3 37.8978 3 37.5V12C3 11.6022 3.15804 11.2206 3.43934 10.9393C3.72064 10.658 4.10218 10.5 4.5 10.5H14.19L16.755 6.675C16.8909 6.46866 17.0756 6.29908 17.2928 6.18132C17.51 6.06356 17.7529 6.00128 18 6H30C30.2471 6.00128 30.49 6.06356 30.7072 6.18132C30.9244 6.29908 31.1091 6.46866 31.245 6.675L33.81 10.5H43.5C43.8978 10.5 44.2794 10.658 44.5607 10.9393C44.842 11.2206 45 11.6022 45 12V37.5C45 37.8978 44.842 38.2794 44.5607 38.5607C44.2794 38.842 43.8978 39 43.5 39ZM6 36H42V13.5H33C32.7529 13.4987 32.51 13.4364 32.2928 13.3187C32.0756 13.2009 31.8909 13.0313 31.755 12.825L29.19 9H18.81L16.245 12.825C16.1091 13.0313 15.9244 13.2009 15.7072 13.3187C15.49 13.4364 15.2471 13.4987 15 13.5H6V36Z" fill="#727772"/>
<path d="M24 33C22.22 33 20.4799 32.4722 18.9999 31.4832C17.5198 30.4943 16.3663 29.0887 15.6851 27.4442C15.0039 25.7996 14.8257 23.99 15.1729 22.2442C15.5202 20.4984 16.3774 18.8947 17.636 17.636C18.8947 16.3774 20.4984 15.5202 22.2442 15.1729C23.99 14.8257 25.7996 15.0039 27.4442 15.6851C29.0887 16.3663 30.4943 17.5198 31.4832 18.9999C32.4722 20.4799 33 22.22 33 24C33 26.3869 32.0518 28.6761 30.364 30.364C28.6761 32.0518 26.3869 33 24 33ZM24 18C22.8133 18 21.6533 18.3519 20.6666 19.0112C19.6799 19.6705 18.9108 20.6075 18.4567 21.7039C18.0026 22.8003 17.8838 24.0067 18.1153 25.1705C18.3468 26.3344 18.9182 27.4035 19.7574 28.2426C20.5965 29.0818 21.6656 29.6532 22.8295 29.8847C23.9933 30.1162 25.1997 29.9974 26.2961 29.5433C27.3925 29.0892 28.3295 28.3201 28.9888 27.3334C29.6481 26.3467 30 25.1867 30 24C30 22.4087 29.3679 20.8826 28.2426 19.7574C27.1174 18.6321 25.5913 18 24 18Z" fill="#727772"/>
</svg>
</file>

<file path="assets/svgs/ic_chat.svg">
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="56" height="56" fill="white" fill-opacity="0.01" style="mix-blend-mode:multiply"/>
<path d="M31.045 52.5L28 50.75L35 38.5H45.5C46.4283 38.5 47.3185 38.1312 47.9749 37.4749C48.6312 36.8185 49 35.9283 49 35V14C49 13.0717 48.6312 12.1815 47.9749 11.5251C47.3185 10.8687 46.4283 10.5 45.5 10.5H10.5C9.57174 10.5 8.6815 10.8687 8.02513 11.5251C7.36875 12.1815 7 13.0717 7 14V35C7 35.9283 7.36875 36.8185 8.02513 37.4749C8.6815 38.1312 9.57174 38.5 10.5 38.5H26.25V42H10.5C8.64348 42 6.86301 41.2625 5.55025 39.9497C4.2375 38.637 3.5 36.8565 3.5 35V14C3.5 12.1435 4.2375 10.363 5.55025 9.05025C6.86301 7.7375 8.64348 7 10.5 7H45.5C47.3565 7 49.137 7.7375 50.4497 9.05025C51.7625 10.363 52.5 12.1435 52.5 14V35C52.5 36.8565 51.7625 38.637 50.4497 39.9497C49.137 41.2625 47.3565 42 45.5 42H37.03L31.045 52.5Z" fill="#727772"/>
<path d="M42 17.5H14V21H42V17.5Z" fill="#727772"/>
<path d="M31.5 28H14V31.5H31.5V28Z" fill="#727772"/>
</svg>
</file>

<file path="assets/svgs/ic_chevron_right.svg">
<svg width="10" height="16" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.5002 8L2.0002 15.5L0.950195 14.45L7.4002 8L0.950195 1.55L2.0002 0.5L9.5002 8Z" fill="#727772"/>
<path d="M9.5002 8L2.0002 15.5L0.950195 14.45L7.4002 8L0.950195 1.55L2.0002 0.5L9.5002 8Z" fill="white" fill-opacity="0.5"/>
</svg>
</file>

<file path="assets/svgs/ic_delivered.svg">
<svg width="19" height="13" viewBox="0 0 19 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.5 12C6.78353 12 7.06205 11.9785 7.33402 11.9372C7.6435 12.2313 7.97807 12.4993 8.33419 12.7376C7.75249 12.9084 7.13695 13 6.5 13C2.91015 13 0 10.0899 0 6.5C0 2.91015 2.91015 0 6.5 0C7.13695 0 7.75249 0.0916152 8.33419 0.262387C7.97807 0.500693 7.6435 0.768687 7.33402 1.06283C7.06205 1.02145 6.78353 1 6.5 1C3.46243 1 1 3.46243 1 6.5C1 9.53757 3.46243 12 6.5 12ZM5.83506 9.94268C5.45036 9.19942 5.18634 8.3836 5.06893 7.52116L4.22319 6.50173C3.96635 6.19215 3.5239 6.16426 3.23495 6.43945C2.94601 6.71464 2.91998 7.18869 3.17682 7.49828L5.04348 9.74827C5.17632 9.90839 5.36672 10 5.56667 10C5.65982 10 5.75091 9.98011 5.83506 9.94268Z" fill="#727772"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 12C15.5376 12 18 9.53757 18 6.5C18 3.46243 15.5376 1 12.5 1C9.46243 1 7 3.46243 7 6.5C7 9.53757 9.46243 12 12.5 12ZM12.5 13C16.0899 13 19 10.0899 19 6.5C19 2.91015 16.0899 0 12.5 0C8.91015 0 6 2.91015 6 6.5C6 10.0899 8.91015 13 12.5 13Z" fill="#727772"/>
<path d="M15.765 3.93945C16.054 4.21464 16.08 4.68869 15.8232 4.99828L12.0899 9.49827C11.957 9.65839 11.7666 9.75 11.5667 9.75C11.3667 9.75 11.1763 9.65839 11.0435 9.49827L9.17682 7.24828C8.91998 6.93869 8.94601 6.46464 9.23495 6.18945C9.5239 5.91426 9.96635 5.94215 10.2232 6.25173L11.5667 7.8711L14.7768 4.00173C15.0337 3.69215 15.4761 3.66426 15.765 3.93945Z" fill="#727772"/>
</svg>
</file>

<file path="assets/svgs/ic_group_chat.svg">
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="path-1-inside-1_3483_2274" fill="white">
<path d="M16.25 8.75H15V10H16.25C16.7471 10.0005 17.2237 10.1983 17.5752 10.5498C17.9267 10.9013 18.1245 11.3779 18.125 11.875V14.375H19.375V11.875C19.374 11.0465 19.0445 10.2522 18.4586 9.66635C17.8728 9.08051 17.0785 8.75096 16.25 8.75Z"/>
<path d="M15 2.5C15.3708 2.5 15.7334 2.60997 16.0417 2.81599C16.35 3.02202 16.5904 3.31486 16.7323 3.65747C16.8742 4.00008 16.9113 4.37708 16.839 4.74079C16.7666 5.10451 16.588 5.4386 16.3258 5.70083C16.0636 5.96305 15.7295 6.14163 15.3658 6.21397C15.0021 6.28632 14.6251 6.24919 14.2825 6.10727C13.9399 5.96536 13.647 5.72504 13.441 5.41669C13.235 5.10835 13.125 4.74584 13.125 4.375C13.125 3.87772 13.3225 3.40081 13.6742 3.04917C14.0258 2.69754 14.5027 2.5 15 2.5ZM15 1.25C14.3819 1.25 13.7777 1.43328 13.2638 1.77666C12.7499 2.12004 12.3494 2.6081 12.1129 3.17911C11.8764 3.75013 11.8145 4.37847 11.935 4.98466C12.0556 5.59085 12.3533 6.14767 12.7903 6.58471C13.2273 7.02175 13.7842 7.31938 14.3903 7.43995C14.9965 7.56053 15.6249 7.49865 16.1959 7.26212C16.7669 7.0256 17.255 6.62506 17.5983 6.11116C17.9417 5.59725 18.125 4.99307 18.125 4.375C18.125 3.5462 17.7958 2.75134 17.2097 2.16529C16.6237 1.57924 15.8288 1.25 15 1.25Z"/>
<path d="M14.375 18.75H13.125V17.5C13.1245 17.0029 12.9267 16.5263 12.5752 16.1748C12.2237 15.8233 11.7471 15.6255 11.25 15.625H8.75C8.25289 15.6255 7.77629 15.8233 7.42478 16.1748C7.07327 16.5263 6.87555 17.0029 6.875 17.5V18.75H5.625V17.5C5.62598 16.6715 5.95553 15.8772 6.54137 15.2914C7.12721 14.7055 7.9215 14.376 8.75 14.375H11.25C12.0785 14.376 12.8728 14.7055 13.4586 15.2914C14.0445 15.8772 14.374 16.6715 14.375 17.5V18.75Z"/>
<path d="M10 8.125C10.3708 8.125 10.7334 8.23497 11.0417 8.44099C11.35 8.64702 11.5904 8.93986 11.7323 9.28247C11.8742 9.62508 11.9113 10.0021 11.839 10.3658C11.7666 10.7295 11.588 11.0636 11.3258 11.3258C11.0636 11.588 10.7295 11.7666 10.3658 11.839C10.0021 11.9113 9.62508 11.8742 9.28247 11.7323C8.93986 11.5904 8.64702 11.35 8.44099 11.0417C8.23497 10.7334 8.125 10.3708 8.125 10C8.125 9.50272 8.32254 9.02581 8.67417 8.67417C9.02581 8.32254 9.50272 8.125 10 8.125ZM10 6.875C9.38193 6.875 8.77775 7.05828 8.26384 7.40166C7.74994 7.74504 7.3494 8.2331 7.11288 8.80411C6.87635 9.37513 6.81447 10.0035 6.93505 10.6097C7.05562 11.2158 7.35325 11.7727 7.79029 12.2097C8.22733 12.6467 8.78415 12.9444 9.39034 13.065C9.99653 13.1855 10.6249 13.1236 11.1959 12.8871C11.7669 12.6506 12.255 12.2501 12.5983 11.7362C12.9417 11.2223 13.125 10.6181 13.125 10C13.125 9.1712 12.7958 8.37634 12.2097 7.79029C11.6237 7.20424 10.8288 6.875 10 6.875Z"/>
<path d="M5 8.75H3.75C2.9215 8.75098 2.12721 9.08053 1.54137 9.66637C0.955529 10.2522 0.625976 11.0465 0.625 11.875V14.375H1.875V11.875C1.87555 11.3779 2.07327 10.9013 2.42478 10.5498C2.77629 10.1983 3.25289 10.0005 3.75 10H5V8.75Z"/>
<path d="M5 2.5C5.37084 2.5 5.73335 2.60997 6.04169 2.81599C6.35004 3.02202 6.59036 3.31486 6.73227 3.65747C6.87419 4.00008 6.91132 4.37708 6.83897 4.74079C6.76663 5.10451 6.58805 5.4386 6.32583 5.70083C6.0636 5.96305 5.72951 6.14163 5.36579 6.21397C5.00208 6.28632 4.62508 6.24919 4.28247 6.10727C3.93986 5.96536 3.64702 5.72504 3.44099 5.41669C3.23497 5.10835 3.125 4.74584 3.125 4.375C3.125 3.87772 3.32254 3.40081 3.67417 3.04917C4.02581 2.69754 4.50272 2.5 5 2.5ZM5 1.25C4.38193 1.25 3.77775 1.43328 3.26384 1.77666C2.74994 2.12004 2.3494 2.6081 2.11288 3.17911C1.87635 3.75013 1.81447 4.37847 1.93505 4.98466C2.05562 5.59085 2.35325 6.14767 2.79029 6.58471C3.22733 7.02175 3.78415 7.31938 4.39034 7.43995C4.99653 7.56053 5.62487 7.49865 6.19589 7.26212C6.7669 7.0256 7.25496 6.62506 7.59834 6.11116C7.94172 5.59725 8.125 4.99307 8.125 4.375C8.125 3.5462 7.79576 2.75134 7.20971 2.16529C6.62366 1.57924 5.8288 1.25 5 1.25Z"/>
</mask>
<path d="M16.25 8.75H15V10H16.25C16.7471 10.0005 17.2237 10.1983 17.5752 10.5498C17.9267 10.9013 18.1245 11.3779 18.125 11.875V14.375H19.375V11.875C19.374 11.0465 19.0445 10.2522 18.4586 9.66635C17.8728 9.08051 17.0785 8.75096 16.25 8.75Z" fill="#727772"/>
<path d="M15 2.5C15.3708 2.5 15.7334 2.60997 16.0417 2.81599C16.35 3.02202 16.5904 3.31486 16.7323 3.65747C16.8742 4.00008 16.9113 4.37708 16.839 4.74079C16.7666 5.10451 16.588 5.4386 16.3258 5.70083C16.0636 5.96305 15.7295 6.14163 15.3658 6.21397C15.0021 6.28632 14.6251 6.24919 14.2825 6.10727C13.9399 5.96536 13.647 5.72504 13.441 5.41669C13.235 5.10835 13.125 4.74584 13.125 4.375C13.125 3.87772 13.3225 3.40081 13.6742 3.04917C14.0258 2.69754 14.5027 2.5 15 2.5ZM15 1.25C14.3819 1.25 13.7777 1.43328 13.2638 1.77666C12.7499 2.12004 12.3494 2.6081 12.1129 3.17911C11.8764 3.75013 11.8145 4.37847 11.935 4.98466C12.0556 5.59085 12.3533 6.14767 12.7903 6.58471C13.2273 7.02175 13.7842 7.31938 14.3903 7.43995C14.9965 7.56053 15.6249 7.49865 16.1959 7.26212C16.7669 7.0256 17.255 6.62506 17.5983 6.11116C17.9417 5.59725 18.125 4.99307 18.125 4.375C18.125 3.5462 17.7958 2.75134 17.2097 2.16529C16.6237 1.57924 15.8288 1.25 15 1.25Z" fill="#727772"/>
<path d="M14.375 18.75H13.125V17.5C13.1245 17.0029 12.9267 16.5263 12.5752 16.1748C12.2237 15.8233 11.7471 15.6255 11.25 15.625H8.75C8.25289 15.6255 7.77629 15.8233 7.42478 16.1748C7.07327 16.5263 6.87555 17.0029 6.875 17.5V18.75H5.625V17.5C5.62598 16.6715 5.95553 15.8772 6.54137 15.2914C7.12721 14.7055 7.9215 14.376 8.75 14.375H11.25C12.0785 14.376 12.8728 14.7055 13.4586 15.2914C14.0445 15.8772 14.374 16.6715 14.375 17.5V18.75Z" fill="#727772"/>
<path d="M10 8.125C10.3708 8.125 10.7334 8.23497 11.0417 8.44099C11.35 8.64702 11.5904 8.93986 11.7323 9.28247C11.8742 9.62508 11.9113 10.0021 11.839 10.3658C11.7666 10.7295 11.588 11.0636 11.3258 11.3258C11.0636 11.588 10.7295 11.7666 10.3658 11.839C10.0021 11.9113 9.62508 11.8742 9.28247 11.7323C8.93986 11.5904 8.64702 11.35 8.44099 11.0417C8.23497 10.7334 8.125 10.3708 8.125 10C8.125 9.50272 8.32254 9.02581 8.67417 8.67417C9.02581 8.32254 9.50272 8.125 10 8.125ZM10 6.875C9.38193 6.875 8.77775 7.05828 8.26384 7.40166C7.74994 7.74504 7.3494 8.2331 7.11288 8.80411C6.87635 9.37513 6.81447 10.0035 6.93505 10.6097C7.05562 11.2158 7.35325 11.7727 7.79029 12.2097C8.22733 12.6467 8.78415 12.9444 9.39034 13.065C9.99653 13.1855 10.6249 13.1236 11.1959 12.8871C11.7669 12.6506 12.255 12.2501 12.5983 11.7362C12.9417 11.2223 13.125 10.6181 13.125 10C13.125 9.1712 12.7958 8.37634 12.2097 7.79029C11.6237 7.20424 10.8288 6.875 10 6.875Z" fill="#727772"/>
<path d="M5 8.75H3.75C2.9215 8.75098 2.12721 9.08053 1.54137 9.66637C0.955529 10.2522 0.625976 11.0465 0.625 11.875V14.375H1.875V11.875C1.87555 11.3779 2.07327 10.9013 2.42478 10.5498C2.77629 10.1983 3.25289 10.0005 3.75 10H5V8.75Z" fill="#727772"/>
<path d="M5 2.5C5.37084 2.5 5.73335 2.60997 6.04169 2.81599C6.35004 3.02202 6.59036 3.31486 6.73227 3.65747C6.87419 4.00008 6.91132 4.37708 6.83897 4.74079C6.76663 5.10451 6.58805 5.4386 6.32583 5.70083C6.0636 5.96305 5.72951 6.14163 5.36579 6.21397C5.00208 6.28632 4.62508 6.24919 4.28247 6.10727C3.93986 5.96536 3.64702 5.72504 3.44099 5.41669C3.23497 5.10835 3.125 4.74584 3.125 4.375C3.125 3.87772 3.32254 3.40081 3.67417 3.04917C4.02581 2.69754 4.50272 2.5 5 2.5ZM5 1.25C4.38193 1.25 3.77775 1.43328 3.26384 1.77666C2.74994 2.12004 2.3494 2.6081 2.11288 3.17911C1.87635 3.75013 1.81447 4.37847 1.93505 4.98466C2.05562 5.59085 2.35325 6.14767 2.79029 6.58471C3.22733 7.02175 3.78415 7.31938 4.39034 7.43995C4.99653 7.56053 5.62487 7.49865 6.19589 7.26212C6.7669 7.0256 7.25496 6.62506 7.59834 6.11116C7.94172 5.59725 8.125 4.99307 8.125 4.375C8.125 3.5462 7.79576 2.75134 7.20971 2.16529C6.62366 1.57924 5.8288 1.25 5 1.25Z" fill="#727772"/>
<path d="M16.25 8.75H15V10H16.25C16.7471 10.0005 17.2237 10.1983 17.5752 10.5498C17.9267 10.9013 18.1245 11.3779 18.125 11.875V14.375H19.375V11.875C19.374 11.0465 19.0445 10.2522 18.4586 9.66635C17.8728 9.08051 17.0785 8.75096 16.25 8.75Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
<path d="M15 2.5C15.3708 2.5 15.7334 2.60997 16.0417 2.81599C16.35 3.02202 16.5904 3.31486 16.7323 3.65747C16.8742 4.00008 16.9113 4.37708 16.839 4.74079C16.7666 5.10451 16.588 5.4386 16.3258 5.70083C16.0636 5.96305 15.7295 6.14163 15.3658 6.21397C15.0021 6.28632 14.6251 6.24919 14.2825 6.10727C13.9399 5.96536 13.647 5.72504 13.441 5.41669C13.235 5.10835 13.125 4.74584 13.125 4.375C13.125 3.87772 13.3225 3.40081 13.6742 3.04917C14.0258 2.69754 14.5027 2.5 15 2.5ZM15 1.25C14.3819 1.25 13.7777 1.43328 13.2638 1.77666C12.7499 2.12004 12.3494 2.6081 12.1129 3.17911C11.8764 3.75013 11.8145 4.37847 11.935 4.98466C12.0556 5.59085 12.3533 6.14767 12.7903 6.58471C13.2273 7.02175 13.7842 7.31938 14.3903 7.43995C14.9965 7.56053 15.6249 7.49865 16.1959 7.26212C16.7669 7.0256 17.255 6.62506 17.5983 6.11116C17.9417 5.59725 18.125 4.99307 18.125 4.375C18.125 3.5462 17.7958 2.75134 17.2097 2.16529C16.6237 1.57924 15.8288 1.25 15 1.25Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
<path d="M14.375 18.75H13.125V17.5C13.1245 17.0029 12.9267 16.5263 12.5752 16.1748C12.2237 15.8233 11.7471 15.6255 11.25 15.625H8.75C8.25289 15.6255 7.77629 15.8233 7.42478 16.1748C7.07327 16.5263 6.87555 17.0029 6.875 17.5V18.75H5.625V17.5C5.62598 16.6715 5.95553 15.8772 6.54137 15.2914C7.12721 14.7055 7.9215 14.376 8.75 14.375H11.25C12.0785 14.376 12.8728 14.7055 13.4586 15.2914C14.0445 15.8772 14.374 16.6715 14.375 17.5V18.75Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
<path d="M10 8.125C10.3708 8.125 10.7334 8.23497 11.0417 8.44099C11.35 8.64702 11.5904 8.93986 11.7323 9.28247C11.8742 9.62508 11.9113 10.0021 11.839 10.3658C11.7666 10.7295 11.588 11.0636 11.3258 11.3258C11.0636 11.588 10.7295 11.7666 10.3658 11.839C10.0021 11.9113 9.62508 11.8742 9.28247 11.7323C8.93986 11.5904 8.64702 11.35 8.44099 11.0417C8.23497 10.7334 8.125 10.3708 8.125 10C8.125 9.50272 8.32254 9.02581 8.67417 8.67417C9.02581 8.32254 9.50272 8.125 10 8.125ZM10 6.875C9.38193 6.875 8.77775 7.05828 8.26384 7.40166C7.74994 7.74504 7.3494 8.2331 7.11288 8.80411C6.87635 9.37513 6.81447 10.0035 6.93505 10.6097C7.05562 11.2158 7.35325 11.7727 7.79029 12.2097C8.22733 12.6467 8.78415 12.9444 9.39034 13.065C9.99653 13.1855 10.6249 13.1236 11.1959 12.8871C11.7669 12.6506 12.255 12.2501 12.5983 11.7362C12.9417 11.2223 13.125 10.6181 13.125 10C13.125 9.1712 12.7958 8.37634 12.2097 7.79029C11.6237 7.20424 10.8288 6.875 10 6.875Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
<path d="M5 8.75H3.75C2.9215 8.75098 2.12721 9.08053 1.54137 9.66637C0.955529 10.2522 0.625976 11.0465 0.625 11.875V14.375H1.875V11.875C1.87555 11.3779 2.07327 10.9013 2.42478 10.5498C2.77629 10.1983 3.25289 10.0005 3.75 10H5V8.75Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
<path d="M5 2.5C5.37084 2.5 5.73335 2.60997 6.04169 2.81599C6.35004 3.02202 6.59036 3.31486 6.73227 3.65747C6.87419 4.00008 6.91132 4.37708 6.83897 4.74079C6.76663 5.10451 6.58805 5.4386 6.32583 5.70083C6.0636 5.96305 5.72951 6.14163 5.36579 6.21397C5.00208 6.28632 4.62508 6.24919 4.28247 6.10727C3.93986 5.96536 3.64702 5.72504 3.44099 5.41669C3.23497 5.10835 3.125 4.74584 3.125 4.375C3.125 3.87772 3.32254 3.40081 3.67417 3.04917C4.02581 2.69754 4.50272 2.5 5 2.5ZM5 1.25C4.38193 1.25 3.77775 1.43328 3.26384 1.77666C2.74994 2.12004 2.3494 2.6081 2.11288 3.17911C1.87635 3.75013 1.81447 4.37847 1.93505 4.98466C2.05562 5.59085 2.35325 6.14767 2.79029 6.58471C3.22733 7.02175 3.78415 7.31938 4.39034 7.43995C4.99653 7.56053 5.62487 7.49865 6.19589 7.26212C6.7669 7.0256 7.25496 6.62506 7.59834 6.11116C7.94172 5.59725 8.125 4.99307 8.125 4.375C8.125 3.5462 7.79576 2.75134 7.20971 2.16529C6.62366 1.57924 5.8288 1.25 5 1.25Z" stroke="#727772" stroke-width="3" mask="url(#path-1-inside-1_3483_2274)"/>
</svg>
</file>

<file path="assets/svgs/ic_search.svg">
<svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="path-1-inside-1_3336_7802" fill="white">
<path d="M20.7502 19.6896L15.0861 14.0255C16.4471 12.3915 17.1258 10.2958 16.981 8.17412C16.8362 6.05248 15.8789 4.06836 14.3085 2.63451C12.738 1.20065 10.6752 0.427456 8.54918 0.475768C6.42316 0.52408 4.39761 1.39018 2.89389 2.89389C1.39018 4.39761 0.52408 6.42316 0.475768 8.54918C0.427456 10.6752 1.20065 12.738 2.63451 14.3085C4.06836 15.8789 6.05248 16.8362 8.17412 16.981C10.2958 17.1258 12.3915 16.4471 14.0255 15.0861L19.6896 20.7502L20.7502 19.6896ZM2.00018 8.75018C2.00018 7.41515 2.39606 6.11011 3.13776 5.00008C3.87946 3.89005 4.93366 3.02488 6.16706 2.51399C7.40047 2.0031 8.75767 1.86943 10.067 2.12988C11.3764 2.39033 12.5791 3.0332 13.5231 3.97721C14.4672 4.92121 15.11 6.12395 15.3705 7.43332C15.6309 8.74269 15.4973 10.0999 14.9864 11.3333C14.4755 12.5667 13.6103 13.6209 12.5003 14.3626C11.3902 15.1043 10.0852 15.5002 8.75018 15.5002C6.96058 15.4982 5.24484 14.7864 3.9794 13.521C2.71396 12.2555 2.00216 10.5398 2.00018 8.75018Z"/>
</mask>
<path d="M20.7502 19.6896L15.0861 14.0255C16.4471 12.3915 17.1258 10.2958 16.981 8.17412C16.8362 6.05248 15.8789 4.06836 14.3085 2.63451C12.738 1.20065 10.6752 0.427456 8.54918 0.475768C6.42316 0.52408 4.39761 1.39018 2.89389 2.89389C1.39018 4.39761 0.52408 6.42316 0.475768 8.54918C0.427456 10.6752 1.20065 12.738 2.63451 14.3085C4.06836 15.8789 6.05248 16.8362 8.17412 16.981C10.2958 17.1258 12.3915 16.4471 14.0255 15.0861L19.6896 20.7502L20.7502 19.6896ZM2.00018 8.75018C2.00018 7.41515 2.39606 6.11011 3.13776 5.00008C3.87946 3.89005 4.93366 3.02488 6.16706 2.51399C7.40047 2.0031 8.75767 1.86943 10.067 2.12988C11.3764 2.39033 12.5791 3.0332 13.5231 3.97721C14.4672 4.92121 15.11 6.12395 15.3705 7.43332C15.6309 8.74269 15.4973 10.0999 14.9864 11.3333C14.4755 12.5667 13.6103 13.6209 12.5003 14.3626C11.3902 15.1043 10.0852 15.5002 8.75018 15.5002C6.96058 15.4982 5.24484 14.7864 3.9794 13.521C2.71396 12.2555 2.00216 10.5398 2.00018 8.75018Z" fill="#161616" stroke="#F9F9F9" stroke-width="3" mask="url(#path-1-inside-1_3336_7802)"/>
</svg>
</file>

<file path="assets/svgs/ic_verified_user.svg">
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="path-1-inside-1_3336_8173" fill="white">
<path d="M4.5 1.5C4.87084 1.5 5.23335 1.60997 5.54169 1.81599C5.85004 2.02202 6.09036 2.31486 6.23227 2.65747C6.37419 3.00008 6.41132 3.37708 6.33897 3.74079C6.26663 4.10451 6.08805 4.4386 5.82583 4.70083C5.5636 4.96305 5.22951 5.14163 4.86579 5.21397C4.50208 5.28632 4.12508 5.24919 3.78247 5.10727C3.43986 4.96536 3.14702 4.72504 2.94099 4.41669C2.73497 4.10835 2.625 3.74584 2.625 3.375C2.625 2.87772 2.82254 2.40081 3.17417 2.04917C3.52581 1.69754 4.00272 1.5 4.5 1.5ZM4.5 0.75C3.98082 0.75 3.47331 0.903954 3.04163 1.19239C2.60995 1.48083 2.2735 1.8908 2.07482 2.37046C1.87614 2.85011 1.82415 3.37791 1.92544 3.88711C2.02672 4.39631 2.27673 4.86404 2.64384 5.23116C3.01096 5.59827 3.47869 5.84828 3.98789 5.94956C4.49709 6.05085 5.02489 5.99886 5.50454 5.80018C5.9842 5.6015 6.39417 5.26505 6.68261 4.83337C6.97105 4.40169 7.125 3.89418 7.125 3.375C7.125 2.67881 6.84844 2.01113 6.35616 1.51884C5.86387 1.02656 5.19619 0.75 4.5 0.75Z"/>
<path d="M8.25 11.25H7.5V9.375C7.5 8.87772 7.30246 8.40081 6.95083 8.04917C6.59919 7.69754 6.12228 7.5 5.625 7.5H3.375C2.87772 7.5 2.40081 7.69754 2.04917 8.04917C1.69754 8.40081 1.5 8.87772 1.5 9.375V11.25H0.75V9.375C0.75 8.67881 1.02656 8.01113 1.51884 7.51884C2.01113 7.02656 2.67881 6.75 3.375 6.75H5.625C6.32119 6.75 6.98887 7.02656 7.48116 7.51884C7.97344 8.01113 8.25 8.67881 8.25 9.375V11.25Z"/>
<path d="M9.375 6.0675L8.40375 5.09625L7.875 5.625L9.375 7.125L12 4.5L11.4713 3.97125L9.375 6.0675Z"/>
</mask>
<path d="M4.5 1.5C4.87084 1.5 5.23335 1.60997 5.54169 1.81599C5.85004 2.02202 6.09036 2.31486 6.23227 2.65747C6.37419 3.00008 6.41132 3.37708 6.33897 3.74079C6.26663 4.10451 6.08805 4.4386 5.82583 4.70083C5.5636 4.96305 5.22951 5.14163 4.86579 5.21397C4.50208 5.28632 4.12508 5.24919 3.78247 5.10727C3.43986 4.96536 3.14702 4.72504 2.94099 4.41669C2.73497 4.10835 2.625 3.74584 2.625 3.375C2.625 2.87772 2.82254 2.40081 3.17417 2.04917C3.52581 1.69754 4.00272 1.5 4.5 1.5ZM4.5 0.75C3.98082 0.75 3.47331 0.903954 3.04163 1.19239C2.60995 1.48083 2.2735 1.8908 2.07482 2.37046C1.87614 2.85011 1.82415 3.37791 1.92544 3.88711C2.02672 4.39631 2.27673 4.86404 2.64384 5.23116C3.01096 5.59827 3.47869 5.84828 3.98789 5.94956C4.49709 6.05085 5.02489 5.99886 5.50454 5.80018C5.9842 5.6015 6.39417 5.26505 6.68261 4.83337C6.97105 4.40169 7.125 3.89418 7.125 3.375C7.125 2.67881 6.84844 2.01113 6.35616 1.51884C5.86387 1.02656 5.19619 0.75 4.5 0.75Z" fill="#161616"/>
<path d="M8.25 11.25H7.5V9.375C7.5 8.87772 7.30246 8.40081 6.95083 8.04917C6.59919 7.69754 6.12228 7.5 5.625 7.5H3.375C2.87772 7.5 2.40081 7.69754 2.04917 8.04917C1.69754 8.40081 1.5 8.87772 1.5 9.375V11.25H0.75V9.375C0.75 8.67881 1.02656 8.01113 1.51884 7.51884C2.01113 7.02656 2.67881 6.75 3.375 6.75H5.625C6.32119 6.75 6.98887 7.02656 7.48116 7.51884C7.97344 8.01113 8.25 8.67881 8.25 9.375V11.25Z" fill="#161616"/>
<path d="M9.375 6.0675L8.40375 5.09625L7.875 5.625L9.375 7.125L12 4.5L11.4713 3.97125L9.375 6.0675Z" fill="#161616"/>
<path d="M4.5 1.5C4.87084 1.5 5.23335 1.60997 5.54169 1.81599C5.85004 2.02202 6.09036 2.31486 6.23227 2.65747C6.37419 3.00008 6.41132 3.37708 6.33897 3.74079C6.26663 4.10451 6.08805 4.4386 5.82583 4.70083C5.5636 4.96305 5.22951 5.14163 4.86579 5.21397C4.50208 5.28632 4.12508 5.24919 3.78247 5.10727C3.43986 4.96536 3.14702 4.72504 2.94099 4.41669C2.73497 4.10835 2.625 3.74584 2.625 3.375C2.625 2.87772 2.82254 2.40081 3.17417 2.04917C3.52581 1.69754 4.00272 1.5 4.5 1.5ZM4.5 0.75C3.98082 0.75 3.47331 0.903954 3.04163 1.19239C2.60995 1.48083 2.2735 1.8908 2.07482 2.37046C1.87614 2.85011 1.82415 3.37791 1.92544 3.88711C2.02672 4.39631 2.27673 4.86404 2.64384 5.23116C3.01096 5.59827 3.47869 5.84828 3.98789 5.94956C4.49709 6.05085 5.02489 5.99886 5.50454 5.80018C5.9842 5.6015 6.39417 5.26505 6.68261 4.83337C6.97105 4.40169 7.125 3.89418 7.125 3.375C7.125 2.67881 6.84844 2.01113 6.35616 1.51884C5.86387 1.02656 5.19619 0.75 4.5 0.75Z" stroke="#2D312D" stroke-width="1.5" mask="url(#path-1-inside-1_3336_8173)"/>
<path d="M8.25 11.25H7.5V9.375C7.5 8.87772 7.30246 8.40081 6.95083 8.04917C6.59919 7.69754 6.12228 7.5 5.625 7.5H3.375C2.87772 7.5 2.40081 7.69754 2.04917 8.04917C1.69754 8.40081 1.5 8.87772 1.5 9.375V11.25H0.75V9.375C0.75 8.67881 1.02656 8.01113 1.51884 7.51884C2.01113 7.02656 2.67881 6.75 3.375 6.75H5.625C6.32119 6.75 6.98887 7.02656 7.48116 7.51884C7.97344 8.01113 8.25 8.67881 8.25 9.375V11.25Z" stroke="#2D312D" stroke-width="1.5" mask="url(#path-1-inside-1_3336_8173)"/>
<path d="M9.375 6.0675L8.40375 5.09625L7.875 5.625L9.375 7.125L12 4.5L11.4713 3.97125L9.375 6.0675Z" stroke="#2D312D" stroke-width="1.5" mask="url(#path-1-inside-1_3336_8173)"/>
</svg>
</file>

<file path="ios/Runner.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="lib/domain/dummy_data/dummy_chats.dart">
import 'package:whitenoise/domain/models/chat_model.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
final List<ChatModel> dummyChats = [
  ChatModel(
    name: 'Jeff',
    lastMessage: 'I know',
    time: 'Now',
    unreadCount: 1,
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'Max',
    lastMessage: 'Invite to join a private chat',
    time: '15:34',
    hasAttachment: true,
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'jstaab',
    lastMessage:
        'I think I might have found part of the issue with those key packages. 😎',
    time: '11:07',
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'White Noise',
    lastMessage: 'Max: Nice',
    time: '09:46',
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'AB24 Speakers',
    lastMessage: 'Brandon: https://x.com/Greencandlelt/...',
    time: '01:49',
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'WWA',
    lastMessage: 'Kacper: 🇵🇱 ja mam kaca szczerze',
    time: 'Mon',
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'Mama',
    lastMessage: 'A święta gdzie planujesz ?',
    time: 'Mon',
    unreadCount: 2,
    imagePath: '',
  ),
  ChatModel(
    name: 'Justyna',
    lastMessage: 'Fajne',
    time: 'Fri',
    imagePath: AssetsPaths.icImage,
  ),
  ChatModel(
    name: 'Marek',
    lastMessage: 'Lorem ipsum dolor sit amet, consectetur',
    time: '15:34',
    imagePath: AssetsPaths.icImage,
  ),
];
</file>

<file path="lib/domain/dummy_data/dummy_contacts.dart">
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
// Dummy contacts for search results
final List<ContactModel> dummyContacts = [
  ContactModel(
    name: 'Hillebrand',
    email: 'max@towardsliberty.com',
    publicKey:
        'npub1 klkk3 vrzme 455yh 9rl2j shq7r c8dpe gj3nd f82c3 ks2sk 7qulx 40dxt 3vt',
    imagePath: AssetsPaths.icImage,
  ),
  ContactModel(
    name: 'Max DeMarco',
    email: 'max@towardsliberty.com',
    publicKey:
        'npub1 klkk3 vrzme 455yh 9rl2j shq7r c8dpe gj3nd f82c3 ks2sk 7qulx 40dxt 3vt',
    imagePath: AssetsPaths.icImage,
  ),
];
</file>

<file path="lib/domain/dummy_data/dummy_messages.dart">
// list of messages
import 'package:whitenoise/domain/models/contact_model.dart';
import '../models/message_model.dart';
MessageModel originalMessage1=MessageModel(
    id: '100',
    message: 'I am also fine',
    timeSent: '10:05 AM',
    reactions: ['👍', '❤️', '😂'],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asdfasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
    imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"
);
MessageModel originalMessage2=MessageModel(
    id: '101',
    message: 'Good to hear that',
    timeSent: '10:05 AM',
    reactions: ['👍'],
    isMe: false,
    messageType: 0,
    isReplyMessage: false,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asdfasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
    imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"
);
List<MessageModel> messages = [
  MessageModel(
      id: '12',
      message: '',
      timeSent: '10:04 AM',
      reactions: ['👍'],
      isMe: false,
      messageType: 0,
      isReplyMessage: false,
      imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"
  ),
  MessageModel(
      id: '11',
      message: '',
      timeSent: '10:05 AM',
      reactions: ['👍', '❤️', '😂'],
      isMe: true,
      messageType: 0,
      isReplyMessage: false,
      imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"
  ),
  MessageModel(
    id: '10',
    message: 'Goodbye',
    timeSent: '10:09 AM',
    reactions: [
      '👍',
    ],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
  ),
  MessageModel(
    id: '9',
    message: 'Bye',
    timeSent: '10:08 AM',
    reactions: ['👍', '💗', '😂'],
    isMe: false,
    messageType: 0,
    isReplyMessage: false,
  ),
  MessageModel(
      id: '8',
      message: 'Yes',
      timeSent: '10:07 AM',
      reactions: ['❤️'],
      isMe: true,
      messageType: 1,
      isReplyMessage: false,
      audioPath: "https://commondatastorage.googleapis.com/codeskulptor-assets/Collision8-Bit.ogg"
  ),
  MessageModel(
      id: '7',
      message: 'Good to hear that',
      timeSent: '10:06 AM',
      reactions: ['👍'],
      isMe: false,
      messageType: 1,
      isReplyMessage: false,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
      audioPath: "https://rpg.hamsterrepublic.com/wiki-images/f/f1/BigBossDeath.ogg",
  ),
  MessageModel(
      id: '6',
      message: 'I am also fine',
      timeSent: '10:05 AM',
      reactions: ['👍', '❤️', '😂'],
      isMe: true,
      messageType: 0,
      isReplyMessage: true,
      originalMessage: originalMessage2,
      senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asdfasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
      imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"
  ),
  MessageModel(
      id: '5',
      message: 'What about you?',
      timeSent: '10:04 AM',
      reactions: ['👍'],
      isMe: false,
      messageType: 0,
      isReplyMessage: true,
      originalMessage: originalMessage1,
      senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
      imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"
  ),
  MessageModel(
    id: '4',
    message: 'I am fine, thank you',
    timeSent: '10:03 AM',
    reactions: [],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
  ),
  MessageModel(
    id: '3',
    message: 'How are you?',
    timeSent: '10:02 AM',
    reactions: [],
    isMe: false,
    messageType: 0,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
    isReplyMessage: false,
  ),
  MessageModel(
    id: '2',
    message: 'Hi',
    timeSent: '10:01 AM',
    reactions: ['😂'],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
  ),
  MessageModel(
    id: '1',
    message: 'Hello',
    timeSent: '10:00 AM',
    reactions: ['😍'],
    isMe: false,
    messageType: 0,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
    isReplyMessage: false,
  ),
];
List<MessageModel> groupMessages = [
  MessageModel(
    id: '10',
    message: 'Goodbye',
    timeSent: '10:09 AM',
    reactions: [
      '👍',
    ],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
    senderData: ContactModel(name: "Me", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
  ),
  MessageModel(
    id: '9',
    message: 'Bye',
    timeSent: '10:08 AM',
    reactions: ['👍', '💗', '😂'],
    isMe: false,
    messageType: 0,
    senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
    isReplyMessage: false,
  ),
  MessageModel(
      id: '8',
      message: 'Yes',
      timeSent: '10:07 AM',
      reactions: [],
      isMe: false,
      messageType: 0,
      isReplyMessage: false,
      senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
  ),
  MessageModel(
      id: '7',
      message: 'Good to hear that',
      timeSent: '10:06 AM',
      reactions: ['👍'],
      isMe: false,
      messageType: 0,
      isReplyMessage: false,
      senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
  ),
  MessageModel(
      id: '6',
      message: 'I am also fine',
      timeSent: '10:05 AM',
      reactions: ['👍', '❤️', '😂','👍','👍'],
      isMe: false,
      messageType: 0,
      isReplyMessage: false,
      senderData: ContactModel(name: "Max Hillebrand", email: "max@email.com", publicKey: "asdfasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"),
      imageUrl: "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png"
  ),
  MessageModel(
      id: '2',
      message: 'Yooo. nice to be here',
      timeSent: '10:04 AM',
      reactions: ['👍'],
      isMe: false,
      messageType: 0,
      isReplyMessage: false,
      senderData: ContactModel(name: "Marek", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
  ),
  MessageModel(
    id: '1',
    message: 'Hey all. welcome to new group',
    timeSent: '10:00 AM',
    reactions: ['😍'],
    isMe: true,
    messageType: 0,
    isReplyMessage: false,
    senderData: ContactModel(name: "Me", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
  ),
];
</file>

<file path="lib/domain/models/chat_model.dart">
class ChatModel {
  final String name;
  final String lastMessage;
  final String time;
  final int unreadCount;
  final bool hasAttachment;
  final String imagePath;
  ChatModel({
    required this.name,
    required this.lastMessage,
    required this.time,
    this.unreadCount = 0,
    this.hasAttachment = false,
    this.imagePath = '',
  });
}
</file>

<file path="lib/domain/models/contact_model.dart">
class ContactModel {
  final String name;
  final String email;
  final String publicKey;
  final String imagePath;
  ContactModel({
    required this.name,
    required this.email,
    required this.publicKey,
    required this.imagePath,
  });
}
</file>

<file path="lib/domain/models/message_model.dart">
import 'package:whitenoise/domain/models/contact_model.dart';
class MessageModel {
  final int messageType; //0: text message, 1: audio message,
  final String id;
  final String timeSent;
  final List<String> reactions;
  final bool isMe;
  final bool isReplyMessage;
  // bool isShowUserAvatar;
  // bool isShowUserName;
  String? message;
  String? imageUrl;
  String? audioPath;
  MessageModel? originalMessage;
  ContactModel? senderData;
  MessageModel({
    required this.messageType,
    required this.id,
    required this.timeSent,
    required this.reactions,
    required this.isMe,
    required this.isReplyMessage,
    // this.isShowUserAvatar=false,
    // this.isShowUserName = false,
    this.message,
    this.imageUrl,
    this.audioPath,
    this.originalMessage,
    this.senderData
  });
}
</file>

<file path="lib/shared/custom_button.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class CustomButton extends StatelessWidget {
  const CustomButton({
    super.key,
    required this.onPressed,
    required this.title,
    this.buttonType = ButtonType.primary,
  });
  final void Function()? onPressed;
  final String title;
  final ButtonType buttonType;
  @override
  Widget build(BuildContext context) {
    final isPrimary = buttonType == ButtonType.primary;
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          elevation: 0,
          backgroundColor: isPrimary ? AppColors.color202320 : AppColors.colorF2F2F2,
          foregroundColor: isPrimary ? AppColors.colorF9F9F9 : AppColors.color2D312D,
          disabledBackgroundColor: isPrimary ? AppColors.color202320.withValues(alpha: 0.5) : AppColors.colorF2F2F2,
          disabledForegroundColor: isPrimary ? AppColors.colorF9F9F9 : AppColors.color2D312D,
          padding: EdgeInsets.symmetric(vertical: 16.h),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(0.r),
          ),
        ),
        child: Text(
          title,
          style: TextStyle(
            fontSize: 16.sp,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }
}
enum ButtonType { primary, secondary }
</file>

<file path="lib/ui/auth_flow/create_profile_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/auth_flow/key_created_screen.dart';
class CreateProfileScreen extends StatefulWidget {
  const CreateProfileScreen({super.key});
  @override
  State<CreateProfileScreen> createState() => _CreateProfileScreenState();
}
class _CreateProfileScreenState extends State<CreateProfileScreen> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _bioController = TextEditingController();
  void _onContinuePressed() {
    _usernameController.text.trim();
    _bioController.text.trim();
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const KeyCreatedScreen()),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.fromLTRB(24, 32, 24, 32),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const Center(
                child: Text(
                  'Set up your profile',
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 32),
              const CircleAvatar(backgroundColor: AppColors.black, radius: 40),
              const SizedBox(height: 12),
              const Text(
                'Upload photo',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 32),
              const Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Choose a username',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: _usernameController,
                decoration: InputDecoration(
                  hintText: 'Enter name...',
                  filled: true,
                  fillColor: AppColors.grey1,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
              const SizedBox(height: 24),
              const Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Add a short bio',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: _bioController,
                maxLines: 1,
                textInputAction: TextInputAction.done,
                decoration: InputDecoration(
                  hintText: 'A quick note about you...',
                  filled: true,
                  fillColor: AppColors.grey1,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
              const SizedBox(height: 32),
            ],
          ),
        ),
      ),
      bottomNavigationBar: Container(
        height: 96,
        color: AppColors.black,
        padding: const EdgeInsets.only(top: 20),
        child: TextButton(
          style: ButtonStyle(
            splashFactory: NoSplash.splashFactory,
            overlayColor: WidgetStateProperty.all(AppColors.transparent),
            padding: WidgetStateProperty.all(EdgeInsets.zero),
          ),
          onPressed: _onContinuePressed,
          child: const Align(
            alignment: Alignment.topCenter,
            child: Text(
              'Continue',
              style: TextStyle(fontSize: 18, color: AppColors.white),
            ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/info_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/create_profile_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class InfoScreen extends StatelessWidget {
  const InfoScreen({super.key});
  void _onContinuePressed(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const CreateProfileScreen()),
    );
  }
  Widget _buildFeatureItem(String title, String subtitle) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 24),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Padding(
            padding: EdgeInsets.only(top: 4),
            child: CircleAvatar(backgroundColor: AppColors.black, radius: 12),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  subtitle,
                  style: TextStyle(fontSize: 15, color: AppColors.grey3),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Center(
                    child: Text(
                      'What’s unique\nabout White Noise',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 48),
                  _buildFeatureItem(
                    'Private by default',
                    'No one can trace who you talk to.',
                  ),
                  _buildFeatureItem(
                    'Cannot be censored',
                    'Even the people who made this application cannot restrict you.',
                  ),
                  _buildFeatureItem(
                    'Super secure',
                    'Only you are in control of your data.',
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/key_created_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/logged_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class KeyCreatedScreen extends StatelessWidget {
  const KeyCreatedScreen({super.key});
  void _onContinuePressed(BuildContext context) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => const LoggedInScreen()),
    );
  }
  void _onCopyPressed(BuildContext context) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('Copied!')));
  }
  @override
  Widget build(BuildContext context) {
    const dummyKey = '''
blah blah blah blah blah blah
blah blah blah blah blah blah
blah blah blah blah blah blah
blah blah blah blah blah blah
''';
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text(
                    'We created a\nprivate key for you',
                    style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    'Store this in a secure location. It’s your main\npassword to this profile and your messages.',
                    style: TextStyle(fontSize: 16, color: AppColors.grey3),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 32),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(
                      vertical: 24,
                      horizontal: 16,
                    ),
                    decoration: BoxDecoration(
                      color: AppColors.grey1,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Text(
                          dummyKey.trim(),
                          textAlign: TextAlign.center,
                          style: const TextStyle(fontSize: 20, height: 1.5),
                        ),
                        const SizedBox(height: 20),
                        SizedBox(
                          width: double.infinity,
                          height: 48,
                          child: TextButton(
                            style: TextButton.styleFrom(
                              backgroundColor: AppColors.black,
                              foregroundColor: AppColors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                            ),
                            onPressed: () => _onCopyPressed(context),
                            child: const Text('Copy'),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 32),
                  const Text(
                    'You can skip now and we’ll remind\nyou to do this later.',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: AppColors.grey3),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/logged_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class LoggedInScreen extends StatelessWidget {
  const LoggedInScreen({super.key});
  void _onContinuePressed(BuildContext context) {}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Center(
                    child: Text(
                      'You’re signed in',
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Center(
                    child: Text(
                      'Let’s see if you already have previous activity.',
                      textAlign: TextAlign.center,
                      style: TextStyle(fontSize: 16, color: AppColors.grey3),
                    ),
                  ),
                  const SizedBox(height: 48),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      vertical: 16,
                      horizontal: 20,
                    ),
                    margin: const EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      color: AppColors.black,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Row(
                      children: [
                        SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: AppColors.white,
                          ),
                        ),
                        SizedBox(width: 12),
                        Text(
                          'Looking for your contacts',
                          style: TextStyle(
                            fontSize: 16,
                            color: AppColors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      vertical: 16,
                      horizontal: 20,
                    ),
                    decoration: BoxDecoration(
                      color: AppColors.black,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Row(
                      children: [
                        SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: AppColors.white,
                          ),
                        ),
                        SizedBox(width: 12),
                        Text(
                          'Looking for chats',
                          style: TextStyle(
                            fontSize: 16,
                            color: AppColors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/login_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/logged_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});
  @override
  State<LoginScreen> createState() => _LoginScreenState();
}
class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _keyController = TextEditingController();
  void _onContinuePressed() {
    final key = _keyController.text.trim();
    if (key.isEmpty) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please enter something')));
      return;
    }
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const LoggedInScreen()),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Center(
                    child: Text(
                      'Sign in',
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  const Center(
                    child: Text.rich(
                      TextSpan(
                        text: 'White Noise requires a ',
                        style: TextStyle(fontSize: 16, color: AppColors.black),
                        children: [
                          TextSpan(
                            text: 'Nostr private key',
                            style: TextStyle(
                              decoration: TextDecoration.underline,
                              color: AppColors.black,
                            ),
                          ),
                          TextSpan(text: ' to use.'),
                        ],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 32),
                  const Text(
                    'Enter your Nostr private key',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  TextField(
                    controller: _keyController,
                    decoration: InputDecoration(
                      hintText: 'nsec...',
                      filled: true,
                      fillColor: AppColors.grey1,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(6),
                        borderSide: BorderSide.none,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  const Center(
                    child: Text(
                      'Your key will be encrypted and only\nstored on your device.',
                      textAlign: TextAlign.center,
                      style: TextStyle(color: AppColors.grey3),
                    ),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              width: double.infinity,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: _onContinuePressed,
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/notifiers/chat_audio_notifier.dart">
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:audio_waveforms/audio_waveforms.dart';
import 'package:path_provider/path_provider.dart';
import 'package:dio/dio.dart';
final currentlyPlayingAudioProvider = StateProvider<String?>((ref) => null);
class ChatAudioState {
  final PlayerController? playerController;
  final bool isReady;
  final bool isPlaying;
  final String? error;
  ChatAudioState({
    this.playerController,
    this.isReady = false,
    this.isPlaying = false,
    this.error,
  });
  ChatAudioState copyWith({
    PlayerController? playerController,
    bool? isReady,
    bool? isPlaying,
    String? error,
  }) {
    return ChatAudioState(
      playerController: playerController ?? this.playerController,
      isReady: isReady ?? this.isReady,
      isPlaying: isPlaying ?? this.isPlaying,
      error: error,
    );
  }
}
class ChatAudioNotifier extends StateNotifier<ChatAudioState> {
  final Ref ref;
  final String audioUrl;
  bool _hasCompletionListener = false;
  ChatAudioNotifier(this.ref, this.audioUrl) : super(ChatAudioState()) {
    _init();
  }
  Future<void> _init() async {
    try {
      final controller = PlayerController();
      final localPath = await _downloadAudioToFile(audioUrl);
      await controller.preparePlayer(
        path: localPath,
        shouldExtractWaveform: true,
      );
      controller.setFinishMode(finishMode: FinishMode.stop);
      if (!_hasCompletionListener) {
        _hasCompletionListener = true;
        controller.onCompletion.listen((_) async {
          debugPrint('Playback completed for $audioUrl');
          await controller.seekTo(0); // Reset for replay
          state = state.copyWith(isPlaying: false);
          ref.read(currentlyPlayingAudioProvider.notifier).state = null;
        });
      }
      state = state.copyWith(playerController: controller, isReady: true);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  Future<String> _downloadAudioToFile(String url) async {
    final dir = await getTemporaryDirectory();
    final filePath = '${dir.path}/${url.hashCode}.m4a';
    final response = await Dio().download(url, filePath);
    if (response.statusCode == 200) {
      return filePath;
    } else {
      throw Exception('Failed to download audio');
    }
  }
  Future<void> togglePlayback() async {
    final controller = state.playerController;
    if (controller == null || !state.isReady) return;
    final currentPlayingUrl = ref.read(currentlyPlayingAudioProvider);
    if (state.isPlaying) {
      await controller.stopPlayer();
      state = state.copyWith(isPlaying: false);
      ref.read(currentlyPlayingAudioProvider.notifier).state = null;
    } else {
      if (currentPlayingUrl != null && currentPlayingUrl != audioUrl) {
        final previousNotifier = ref.read(chatAudioProvider(currentPlayingUrl).notifier);
        await previousNotifier.stopPlaybackSilently();
      }
      // Always seek to start before play
      await controller.seekTo(0);
      await controller.startPlayer(forceRefresh: true);
      state = state.copyWith(isPlaying: true);
      ref.read(currentlyPlayingAudioProvider.notifier).state = audioUrl;
    }
  }
  Future<void> stopPlaybackSilently() async {
    final controller = state.playerController;
    if (controller == null || !state.isPlaying) return;
    await controller.stopPlayer();
    state = state.copyWith(isPlaying: false);
    debugPrint('Stopping playback silently for $audioUrl');
  }
  @override
  void dispose() {
    _hasCompletionListener = false;
    state.playerController?.dispose();
    super.dispose();
  }
}
final chatAudioProvider = StateNotifierProvider.family<ChatAudioNotifier, ChatAudioState, String>(
      (ref, audioUrl) => ChatAudioNotifier(ref, audioUrl),
);
</file>

<file path="lib/ui/chat/widgets/reaction/reaction_default_data.dart">
import 'package:flutter/material.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_menu_item.dart';
class DefaultData {
// default list of five reactions to be displayed from emojis and a plus icon at the end
// the plus icon will be used to add more reactions
  static const List<String> reactions = [
    '👍',
    '❤️',
    '😂',
    '😮',
    '😢',
    '😠',
    '⋯',
  ];
  // The default list of menuItems
  static const List<MenuItem> menuItems = [
    reply,
    forward,
    copy,
    delete,
  ];
  static const List<MenuItem> myMessageMenuItems = [
    reply,
    forward,
    edit,
    copy,
    delete,
  ];
  static const MenuItem reply = MenuItem(
    label: 'Reply',
    icon: CarbonIcons.reply,
  );
  static const MenuItem copy = MenuItem(
    label: 'Copy',
    icon: CarbonIcons.copy,
  );
  static const MenuItem forward = MenuItem(
    label: 'Forward',
    icon:  CarbonIcons.send,
  );
  static const MenuItem edit = MenuItem(
    label: 'Edit',
    icon: CarbonIcons.edit,
  );
  static const MenuItem delete = MenuItem(
    label: 'Delete',
    icon:  CarbonIcons.delete,
    isDestructive: true,
  );
}
</file>

<file path="lib/ui/chat/widgets/reaction/reaction_hero_dialog_route.dart">
import 'package:flutter/material.dart';
class HeroDialogRoute<T> extends PageRoute<T> {
  // The constructor takes a WidgetBuilder and an optional fullscreenDialog flag.
  // The WidgetBuilder is assigned to _builder and the fullscreenDialog flag is passed to the superclass constructor.
  HeroDialogRoute({
    required WidgetBuilder builder,
    super.fullscreenDialog,
  })  : _builder = builder;
  // This is the builder for creating the widget that will be displayed by the route.
  final WidgetBuilder _builder;
  // This route is not opaque, meaning that it does not obscure the entire screen.
  @override
  bool get opaque => false;
  // This route can be dismissed by tapping outside the dialog area.
  @override
  bool get barrierDismissible => true;
  // The transition for this route lasts 300 milliseconds.
  @override
  Duration get transitionDuration => const Duration(milliseconds: 300);
  // This route maintains its state when it is not visible.
  @override
  bool get maintainState => true;
  // The color of the barrier (the area outside the dialog) is semi-transparent black.
  @override
  Color get barrierColor => Colors.black54;
  // This method builds the transition animation for the route.
  // In this case, it simply returns the child widget as is, without any transition.
  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    return child;
  }
  // This method builds the page to be displayed by the route.
  // It uses the _builder provided in the constructor to build the page.
  @override
  Widget buildPage(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation) {
    return _builder(context);
  }
  // This is the semantic label for the barrier. It is used by screen reading software for visually impaired users.
  @override
  String get barrierLabel => 'Popup dialog open';
}
</file>

<file path="lib/ui/chat/widgets/reaction/reaction_menu_item.dart">
import 'package:flutter/widgets.dart';
class MenuItem {
  final String label;
  final IconData icon;
  final bool isDestructive;
  // contsructor
  const MenuItem({
    required this.label,
    required this.icon,
    this.isDestructive = false,
  });
}
</file>

<file path="lib/ui/chat/widgets/reaction/reactions_dialog_widget.dart">
import 'dart:ui';
import 'package:animate_do/animate_do.dart';
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_default_data.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_menu_item.dart';
import '../../../core/themes/colors.dart';
class ReactionsDialogWidget extends StatefulWidget {
  const ReactionsDialogWidget({
    super.key,
    required this.id,
    required this.messageWidget,
    required this.onReactionTap,
    required this.onContextMenuTap,
    this.menuItems = DefaultData.menuItems,
    this.reactions = DefaultData.reactions,
    this.widgetAlignment = Alignment.centerRight,
    this.menuItemsWidth = 0.50,
  });
  // Id for the hero widget
  final String id;
  // The message widget to be displayed in the dialog
  final Widget messageWidget;
  // The callback function to be called when a reaction is tapped
  final Function(String) onReactionTap;
  // The callback function to be called when a context menu item is tapped
  final Function(MenuItem) onContextMenuTap;
  // The list of menu items to be displayed in the context menu
  final List<MenuItem> menuItems;
  // The list of reactions to be displayed
  final List<String> reactions;
  // The alignment of the widget
  final Alignment widgetAlignment;
  // The width of the menu items
  final double menuItemsWidth;
  @override
  State<ReactionsDialogWidget> createState() => _ReactionsDialogWidgetState();
}
class _ReactionsDialogWidgetState extends State<ReactionsDialogWidget> {
  // state variables for activating the animation
  bool reactionClicked = false;
  int? clickedReactionIndex;
  int? clickedContextMenuIndex;
  @override
  Widget build(BuildContext context) {
    return BackdropFilter(
      filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),
      child: Center(
        child: Padding(
          padding: const EdgeInsets.only(right: 20.0, left: 20.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // reactions
              buildReactions(context),
              const SizedBox(
                height: 10,
              ),
              // message
              buildMessage(),
              const SizedBox(
                height: 10,
              ),
              // context menu
              buildMenuItems(context),
            ],
          ),
        ),
      ),
    );
  }
  Align buildMenuItems(BuildContext context) {
    return Align(
      alignment: widget.widgetAlignment,
      child: // contextMenu for reply, copy, delete
      Material(
        color: Colors.transparent,
        child: Container(
          width: MediaQuery.of(context).size.width * widget.menuItemsWidth,
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.background,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            mainAxisSize: MainAxisSize.min,
            children: [
              for (var item in widget.menuItems)
                Column(
                  children: [
                    Padding(
                      padding: const EdgeInsets.fromLTRB(8.0, 8.0, 8.0, 8.0),
                      child: InkWell(
                        onTap: () {
                          // set the clicked index for animation
                          setState(() {
                            clickedContextMenuIndex =
                                widget.menuItems.indexOf(item);
                          });
                          Future.delayed(const Duration(milliseconds: 500)).whenComplete(() {
                            if (!mounted) return;
                            Navigator.of(context).pop();
                            widget.onContextMenuTap(item);
                          });
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              item.label,
                              style: TextStyle(
                                color: item.isDestructive
                                    ? Colors.red
                                    : AppColors.color202320,
                              ),
                            ),
                            Pulse(
                              infinite: false,
                              duration: const Duration(milliseconds: 500),
                              animate: clickedContextMenuIndex ==
                                  widget.menuItems.indexOf(item),
                              child: Icon(
                                size: 20,
                                item.icon,
                                color: item.isDestructive
                                    ? Colors.red
                                    : Theme.of(context)
                                    .textTheme
                                    .bodyMedium!
                                    .color,
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                    if (widget.menuItems.last != item)
                      Container(color: Colors.grey.shade300, height: 1,)
                  ],
                ),
            ],
          ),
        ),
      ),
    );
  }
  Align buildMessage() {
    return Align(
      alignment: widget.widgetAlignment,
      child: Hero(
        tag: widget.id,
        child: widget.messageWidget,
      ),
    );
  }
  Align buildReactions(BuildContext context) {
    return Align(
      alignment: widget.widgetAlignment,
      child: Material(
        color: Colors.transparent,
        child: Container(
          padding: const EdgeInsets.all(5),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.background,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              for (var reaction in widget.reactions)
                FadeInLeft(
                  from: // first index should be from 0, second from 20, third from 40 and so on
                  0 + (widget.reactions.indexOf(reaction) * 20).toDouble(),
                  duration: const Duration(milliseconds: 500),
                  delay: const Duration(milliseconds: 200),
                  child: InkWell(
                      onTap: () {
                        setState(() {
                          reactionClicked = true;
                          clickedReactionIndex =
                              widget.reactions.indexOf(reaction);
                        });
                        // delay for 200 milliseconds to allow the animation to complete
                        Future.delayed(const Duration(milliseconds: 500))
                            .whenComplete(() {
                          // pop the dialog
                          Navigator.of(context).pop();
                          widget.onReactionTap(reaction);
                        });
                      },
                      child: Pulse(
                        infinite: false,
                        duration: const Duration(milliseconds: 500),
                        animate: reactionClicked &&
                            clickedReactionIndex ==
                                widget.reactions.indexOf(reaction),
                        child: Container(
                          padding: const EdgeInsets.fromLTRB(7.0, 2.0, 7.0, 2),
                          decoration: BoxDecoration(
                            color: reaction=='⋯'? AppColors.grey1: Colors.transparent,
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Text(
                            reaction,
                            style: const TextStyle(fontSize: 22),
                          ),
                        ),
                      )),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/reaction/stacked_reactions.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class StackedReactions extends StatelessWidget {
  const StackedReactions({
    super.key,
    required this.reactions,
    this.size = 11.0,
    this.stackedValue = 4.0,
    this.direction = TextDirection.ltr,
  });
  // List of reactions
  final List<String> reactions;
  // Size of the reaction icon/text
  final double size;
  // Value used to calculate the horizontal offset of each reaction
  final double stackedValue;
  // Text direction (LTR or RTL)
  final TextDirection direction;
  @override
  Widget build(BuildContext context) {
    Map<String, int> emojiCounts = {};
    for (var emoji in reactions) {
      emojiCounts[emoji] = (emojiCounts[emoji] ?? 0) + 1;
    }
    List<Map<String, dynamic>> emojis = emojiCounts.entries.map((e) => {
      'emoji': e.key,
      'count': e.value,
    }).toList();
    // Limit the number of displayed reactions to 5 for performance
    final reactionsToShow =
    emojis.length > 5 ? emojis.sublist(0, 5) : emojis;
    // Calculate the remaining number of reactions (if any)
    final remaining = emojis.length - reactionsToShow.length;
    // Helper function to create a reaction widget with proper styling
    Widget createReactionWidget(Map<String, dynamic> reaction, int index) {
      if(reaction['count']==1){
        return Container(
          width: 20,
          height: 20,
          decoration: BoxDecoration(
            color: AppColors.colorE2E2E2,
            border: Border.all(
              color: AppColors.white, // or any custom color
              width: 1,
            ),
            borderRadius: const BorderRadius.all(Radius.circular(20)),
          ),
          child: Center(
            child: Material(
              color: Colors.transparent,
              child: Text(
                reaction['emoji'],
                style: TextStyle(fontSize: size),
              ),
            ),
          ),
        );
      }else{
        return Container(
          height: 20,
          decoration: BoxDecoration(
            color: AppColors.colorE2E2E2,
            border: Border.all(
              color: AppColors.white, // or any custom color
              width: 1,
            ),
            borderRadius: const BorderRadius.all(Radius.circular(20)),
          ),
          child: Center(
            child: Material(
              color: Colors.transparent,
              child: Text(
                " ${reaction['emoji']}${reaction['count']} ",
                style: TextStyle(fontSize: size),
              ),
            ),
          ),
        );
      }
    }
    // Build the list of reaction widgets using the helper function
    final reactionWidgets = reactionsToShow.asMap().entries.map((entry) {
      final index = entry.key;
      final reaction = entry.value;
      return createReactionWidget(reaction, index);
    }).toList();
    return reactions.isEmpty
        ? const SizedBox.shrink()
        : Row(
      children: [
        Row(
          // Efficiently display reactions based on direction
          children: direction == TextDirection.ltr
              ? reactionWidgets.reversed.toList()
              : reactionWidgets,
        ),
        // Show remaining count only if there are more than 5 reactions
        if (remaining > 0)
          Container(
            padding: const EdgeInsets.all(2.0),
            margin: const EdgeInsets.all(2.0),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.background,
              borderRadius: const BorderRadius.all(Radius.circular(25)),
              boxShadow: [
                BoxShadow(
                  color: Theme.of(context).colorScheme.onBackground,
                  offset: const Offset(0.0, 1.0),
                  blurRadius: 6.0,
                ),
              ],
            ),
            child: Center(
              child: Padding(
                padding: const EdgeInsets.all(2.0),
                child: Material(
                  color: Colors.transparent,
                  child: Text(
                    '+$remaining',
                    style: const TextStyle(fontSize: 12),
                  ),
                ),
              ),
            ),
          ),
      ],
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/chat_audio_item.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:audio_waveforms/audio_waveforms.dart';
import '../../core/themes/colors.dart';
import '../notifiers/chat_audio_notifier.dart';
class ChatAudioItem extends ConsumerWidget {
  final String audioPath;
  const ChatAudioItem({super.key, required this.audioPath});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final state = ref.watch(chatAudioProvider(audioPath));
    final notifier = ref.read(chatAudioProvider(audioPath).notifier);
    final currentlyPlaying = ref.watch(currentlyPlayingAudioProvider);
    final isThisPlaying = currentlyPlaying == audioPath && state.isPlaying;
    if (!state.isReady) {
      if (state.error != null) {
        return SizedBox(
          height: 50,
          child: Center(
            child: Text(
              state.error!,
              style: const TextStyle(color: Colors.red, fontSize: 12),
            ),
          ),
        );
      }
      return const SizedBox(
        height: 50,
        child: Center(child: CircularProgressIndicator(strokeWidth: 2)),
      );
    }
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 40,
          height: 40,
          decoration: const BoxDecoration(
            shape: BoxShape.circle,
            color: AppColors.color727772,
          ),
          child: IconButton(
            icon: Icon(
              isThisPlaying ? Icons.stop : Icons.play_arrow,
              color: AppColors.white,
            ),
            onPressed: () => notifier.togglePlayback(),
          ),
        ),
        Padding(
          padding: const EdgeInsets.only(right: 10),
          child: AudioFileWaveforms(
            playerController: state.playerController!,
            size: Size(MediaQuery.of(context).size.width * 0.4, 20),
            waveformType: WaveformType.fitWidth,
            enableSeekGesture: true,
            playerWaveStyle: const PlayerWaveStyle(
              fixedWaveColor: Colors.grey,
              liveWaveColor: Colors.white,
              spacing: 6,
            ),
          ),
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/chat_input.dart">
import 'dart:async';
import 'package:audio_waveforms/audio_waveforms.dart';
import 'package:date_format/date_format.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/stacked_images.dart';
import '../../../domain/dummy_data/dummy_messages.dart';
import '../../../domain/models/contact_model.dart';
import '../../core/themes/colors.dart';
class ChatInput extends StatefulWidget {
  const ChatInput({
    Key? key,
    this.onSend,
    //required this.user,
    required this.padding,
    this.attachBtnClicked,
    this.canUseAudio = true,
    this.cursorColor,
    this.mediaSelector,
    this.imageSource = ImageSource.gallery,
    //required this.theme,
  }) : super(key: key);
  final void Function(MessageModel message)? onSend;
  final void Function()? attachBtnClicked;
  final EdgeInsetsGeometry padding;
  final Color? cursorColor;
  final bool canUseAudio;
  final Widget? mediaSelector;
  final ImageSource imageSource;
  @override
  State<ChatInput> createState() => _ChatInputState();
}
class _ChatInputState extends State<ChatInput> {
  final textController = TextEditingController();
  final recorderController = RecorderController();
  final playerController = PlayerController();
  final focusNode = FocusNode();
  String? recordedFilePath;
  bool isPlaying = false;
  List<XFile> images = [];
  bool showEmoji = false;
  bool isRecording = false;
  bool get hasData =>
      textController.text.trim().isNotEmpty || images.isNotEmpty;
  final imagePicker = ImagePicker();
  @override
  void dispose() {
    recorderController.dispose();
    playerController.dispose();
    textController.dispose();
    focusNode.dispose();
    _recordingTimer?.cancel();
    super.dispose();
  }
  void _handleSend() {
    MessageModel? message;
    final id = messages.length + 1;
    final timeSent = DateTime.now().millisecondsSinceEpoch;
    // format the time like 10:00 AM or 10:00 PM using package [date_format]
    final time = formatDate(DateTime.fromMillisecondsSinceEpoch(timeSent),
        [hh, ':', nn, ' ', am]);
    if (recordedFilePath != null) {
      message = MessageModel(
        id: id.toString(),
        message: null,
        timeSent: time,
        isMe: true,
        reactions: [],
        messageType: 1,
        audioPath: "https://commondatastorage.googleapis.com/codeskulptor-assets/Collision8-Bit.ogg",
        isReplyMessage: false,
        senderData: ContactModel(name: "Me", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
      );
    }else{
      message = MessageModel(
        id: id.toString(),
        timeSent: time,
        isMe: true,
        reactions: [],
        messageType: 0,
        imageUrl:null,
        isReplyMessage: false,
        message: textController.text,
        senderData: ContactModel(name: "Me", email: "marek@email.com", publicKey: "asd fasdfasdfa", imagePath: "https://civilogs.com/uploads/jobs/513/Site_photo_3_11_15_39.png"),
      );
    }
    if(images.isNotEmpty){
      message.imageUrl= "https://civilogs.com/uploads/jobs/513/Site_photo_1_11_15_39.png";
    }
    widget.onSend?.call(message);
    focusNode.unfocus();
    setState(() {
      textController.clear();
      images.clear();
      recordedFilePath = null;
      isPlaying = false;
    });
  }
  Future<void> _handleImagePick() async {
    final result = await imagePicker.pickImage(
        source: widget.imageSource, imageQuality: 50);
    if (result != null) {
      setState(() => images.add(result));
    }
  }
  void _startRecording() async {
    setState(() {
      _recordingDurationInSeconds = 0;
    });
    _recordingTimer?.cancel();
    _recordingTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _recordingDurationInSeconds++;
      });
    });
    if (recorderController.hasPermission ||
        await recorderController.checkPermission()) {
      await recorderController.record(
        androidEncoder: AndroidEncoder.aac,
        androidOutputFormat: AndroidOutputFormat.mpeg4,
        iosEncoder: IosEncoder.kAudioFormatMPEG4AAC,
      );
      setState(() => isRecording = true);
    }
  }
  void _stopRecording() async {
    _recordingTimer?.cancel();
    _recordingTimer = null;
    recordedFilePath = await recorderController.stop();
    if (recordedFilePath != null) {
      playerController.preparePlayer(path: recordedFilePath!);
    }
    setState(() => isRecording = false);
  }
  void _toggleEmoji() async {
    if (showEmoji) {
      focusNode.requestFocus();
    } else {
      focusNode.unfocus();
      await Future.delayed(const Duration(milliseconds: 300));
    }
    setState(() => showEmoji = !showEmoji);
  }
  deletePickedFiles(){
    setState(() {
      images.clear();
    });
  }
  Timer? _recordingTimer;
  int _recordingDurationInSeconds = 0;
  String get _formattedRecordingTime {
    final minutes = (_recordingDurationInSeconds ~/ 60).toString().padLeft(1, '0');
    final seconds = (_recordingDurationInSeconds % 60).toString().padLeft(2, '0');
    return "$minutes:$seconds";
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (images.isNotEmpty)
          StackedImages(
            imageUris: images.map((e) => e.path).toList(),
            imageSize: 50,
            overlap: 2,
            deleteImageCallback: deletePickedFiles,
          ),
        if (recordedFilePath != null && !isRecording)
          Row(
            children: [
              IconButton(
                icon: Icon(isPlaying ? Icons.pause : Icons.play_arrow),
                onPressed: () async {
                  if (isPlaying) {
                    await playerController.pausePlayer();
                    setState(() => isPlaying = false);
                  } else {
                    await playerController.startPlayer();
                    setState(() => isPlaying = false);
                  }
                  setState(() => isPlaying = !isPlaying);
                },
              ),
              Expanded(
                child: AudioFileWaveforms(
                  size: Size(
                    MediaQuery.of(context).size.width,
                    MediaQuery.of(context).size.height * 0.05,
                  ),
                  playerController: playerController,
                  enableSeekGesture: true,
                  waveformType: WaveformType.fitWidth,
                  playerWaveStyle: PlayerWaveStyle(
                    fixedWaveColor: AppColors.color727772,
                    liveWaveColor: AppColors.colorE2E2E2,
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.close),
                onPressed: () {
                  setState(() {
                    recordedFilePath = null;
                    isPlaying = false;
                  });
                },
              )
            ],
          ),
        if (isRecording)
          AudioWaveforms(
            enableGesture: false,
            size: Size(
              MediaQuery.of(context).size.width,
              MediaQuery.of(context).size.height * 0.05,
            ),
            recorderController: recorderController,
            waveStyle: WaveStyle(
              waveColor: AppColors.color727772,
              extendWaveform: true,
              showMiddleLine: false,
            ),
          ),
        Padding(
          padding: const EdgeInsets.fromLTRB(5, 5, 5, 10),
          child: AnimatedSwitcher(
            duration: const Duration(milliseconds: 300),
            transitionBuilder: (child, animation) => FadeTransition(
              opacity: animation,
              child: SizeTransition(
                sizeFactor: animation,
                child: child,
              ),
            ),
            child: isRecording
                ? _buildRecordingView()  // we'll extract the voice UI into its own method
                : _buildTextInputView(), // same for text input view
          ),
        ),
        if (showEmoji) _buildEmojiPicker(),
      ],
    );
  }
  double _dragOffsetX = 0;
  bool _isDragging = false;
  Widget _buildRecordingView() {
    return Row(
      key: ValueKey('recording'), // Important for AnimatedSwitcher
      children: [
        Expanded(
          child: Container(
            height: 54,
            child: Stack(
              alignment: AlignmentDirectional.centerStart,
              fit: StackFit.loose,
              children: [
                Container(
                  height: 35,
                  margin: const EdgeInsets.only(right: 40),
                  padding: const EdgeInsets.symmetric(horizontal: 10),
                  decoration: BoxDecoration(
                    color: AppColors.colorE2E2E2,
                    borderRadius: BorderRadius.circular(5),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.mic, size: 20, color:Theme.of(context).colorScheme.error),
                      const SizedBox(width: 8),
                      Text(
                        _formattedRecordingTime,
                        style: TextStyle(fontWeight: FontWeight.bold, color: AppColors.color202320),
                      ),
                      Expanded(
                        child: Container(
                          alignment: Alignment.center,
                          child: Text(
                            "<   Swipe to Stop   <",
                            style: TextStyle(color: AppColors.color727772),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Positioned(
                  right: 0,
                  child: GestureDetector(
                    onHorizontalDragStart: (_) {
                      setState(() {
                        _isDragging = true;
                      });
                    },
                    onHorizontalDragUpdate: (details) {
                      setState(() {
                        _dragOffsetX += details.delta.dx;
                        // Prevent dragging to the right
                        if (_dragOffsetX > 0) _dragOffsetX = 0;
                      });
                    },
                    onHorizontalDragEnd: (details) {
                      if (_dragOffsetX < -60) {
                        // Swiped far enough left
                        HapticFeedback.mediumImpact();
                        _dragOffsetX = 0;
                        _isDragging = false;
                        _stopRecording();
                      } else {
                        // Not far enough — reset position
                        setState(() {
                          _dragOffsetX = 0;
                        });
                      }
                    },
                    child: AnimatedContainer(
                      duration: Duration(milliseconds: _isDragging ? 0 : 300),
                      transform: Matrix4.translationValues(_dragOffsetX, 0, 0),
                      curve: Curves.easeOut,
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color:Theme.of(context).colorScheme.error,
                        shape: BoxShape.circle,
                      ),
                      child: Icon(Icons.mic, size: 30, color: AppColors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildTextInputView() {
    return Row(
      key: ValueKey('textInput'), // Important for AnimatedSwitcher
      children: [
        widget.mediaSelector != null
            ? InkWell(
          child: widget.mediaSelector,
          onTap: _handleImagePick,
        )
            : _buildIconBtn(Icons.attach_file, _handleImagePick),
        const SizedBox(width: 5),
        _buildTextField(),
        const SizedBox(width: 5),
        (hasData || recordedFilePath != null)
            ? _buildIconBtn(Icons.send, _handleSend)
            : widget.canUseAudio
            ? GestureDetector(
          onTap: _startRecording,
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 500),
            curve: Curves.easeInOut,
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              boxShadow: isRecording
                  ? [
                BoxShadow(
                  color: Colors.red.withOpacity(0.6),
                  blurRadius: 12,
                  spreadRadius: 2,
                )
              ]
                  : [],
            ),
            child: Icon(
              Icons.mic,
              size: 30,
              color: AppColors.color202320 ?? AppColors.colorE2E2E2,
            ),
          ),
        )
            : SizedBox.shrink(),
      ],
    );
  }
  Widget _buildIconBtn(IconData icon, VoidCallback onTap) {
    return InkWell(
      onTap: onTap,
      child: Icon(
        icon,
        size: 25,
        color: AppColors.color202320,
      ),
    );
  }
  Widget _buildTextField() {
    final heightFactor = MediaQuery.of(context).size.height * 0.015;
    return Expanded(
      child: Container(
        decoration: BoxDecoration(
          color:  AppColors.colorE2E2E2,
          borderRadius: BorderRadius.circular(50),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 20),
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: textController,
                focusNode: focusNode,
                onChanged: (_) => setState(() {}),
                onTap: () => setState(() => showEmoji = false),
                cursorColor: widget.cursorColor,
                minLines: 1,
                maxLines: 20,
                decoration: InputDecoration(
                  hintText: "Type message here ...",
                  hintStyle: TextStyle(fontSize: heightFactor),
                  border: InputBorder.none,
                ),
                style: TextStyle(fontSize: heightFactor),
              ),
            ),
            InkWell(
              onTap: _toggleEmoji,
              child: Icon(
                showEmoji ? Icons.text_fields_outlined : Icons.emoji_emotions,
                size: 22,
                color: AppColors.color202320,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildEmojiPicker() {
    return SizedBox(
      height: MediaQuery.of(context).size.height * 0.35,
      child: EmojiPicker(
        textEditingController: textController,
        onEmojiSelected: (_, __) => setState(() {}),
        config: Config(
          height: 256,
          checkPlatformCompatibility: true,
          emojiViewConfig: EmojiViewConfig(
            // Issue: https://github.com/flutter/flutter/issues/28894
            emojiSizeMax:
            28 * (defaultTargetPlatform == TargetPlatform.iOS ? 1.20 : 1.0),
          ),
          viewOrderConfig: const ViewOrderConfig(
            top: EmojiPickerItem.categoryBar,
            middle: EmojiPickerItem.emojiView,
            bottom: EmojiPickerItem.searchBar,
          ),
          skinToneConfig: const SkinToneConfig(),
          categoryViewConfig: const CategoryViewConfig(),
          bottomActionBarConfig: const BottomActionBarConfig(),
          searchViewConfig: const SearchViewConfig(),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/chat_reply_item.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import '../../core/themes/colors.dart';
class ChatReplyItem extends StatelessWidget {
  final MessageModel message;
  const ChatReplyItem({super.key, required this.message});
  @override
  Widget build(BuildContext context) {
    return Container(
      width: MediaQuery.of(context).size.width,
      margin: EdgeInsets.only(top: 10),
      padding: EdgeInsets.all(5),
      decoration: BoxDecoration(
        color: message.isMe? AppColors.grey3:  AppColors.grey4,
        borderRadius: BorderRadius.circular(3),
        border: Border(
          left: BorderSide(
            color: message.isMe? AppColors.color727772: AppColors.color202320,
            width: 4,
          ),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            message.originalMessage?.senderData?.name??"",
            style: TextStyle(
              fontWeight: FontWeight.w500,
              overflow: TextOverflow.ellipsis,
              color: message.isMe? AppColors.color202320: AppColors.colorE2E2E2,
            ),
          ),
          Text(
            message.originalMessage?.message??"",
            maxLines: 2,
            style: TextStyle(
              color: message.isMe? AppColors.color202320: AppColors.colorE2E2E2,
              overflow: TextOverflow.ellipsis
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/contact_info.dart">
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import '../../core/themes/assets.dart';
import '../../core/themes/colors.dart';
class ContactInfo extends StatelessWidget {
  final String imgPath;
  final String title;
  const ContactInfo({
    super.key,
    required this.title,
    required this.imgPath
  });
  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        CircleAvatar(
          radius: 20,
          backgroundImage: AssetImage(imgPath),
        ),
        Gap(10),
        Text(title, style: TextStyle(color: AppColors.colorE2E2E2,),),
      ],
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/message_widget.dart">
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/domain/dummy_data/dummy_messages.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/stacked_reactions.dart';
import '../../core/themes/colors.dart';
import 'chat_audio_item.dart';
import 'chat_reply_item.dart';
class MessageWidget extends StatelessWidget {
  const MessageWidget({
    super.key,
    required this.message,
    required this.isGroupMessage,
    required this.messageIndex
  });
  final MessageModel message;
  final bool isGroupMessage;
  final int messageIndex;
  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: message.isMe ? Alignment.centerRight : Alignment.centerLeft,
      child: ConstrainedBox(
        constraints: BoxConstraints(
          maxWidth: MediaQuery.of(context).size.width * 0.8,
          minWidth: MediaQuery.of(context).size.width * 0.3,
        ),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            isGroupMessage?
              message.isMe==false && message.senderData!=null
                && (messageIndex==0 || (messageIndex>0 && groupMessages[messageIndex-1].senderData!.name != message.senderData!.name))?
            Container(
              margin: EdgeInsets.only(bottom: 20, right: 10),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(15),
                child: CachedNetworkImage(
                  imageUrl: message.senderData!.imagePath,
                  fit: BoxFit.cover,
                  width: 30,
                  height: 30,
                ),
              ),
            ): Container(width: 30,margin: EdgeInsets.only(bottom: 20, right: 10),) :SizedBox(),
            Expanded(
              child: Align(
                alignment: message.isMe ? Alignment.centerRight : Alignment.centerLeft,
                child: Stack(
                  children: [
                    // message
                    buildMessage(
                      context,
                    ),
                    //reactions
                    buildReactions(
                      message.isMe,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  // reactions widget
  Widget buildReactions(bool isMe) {
    double bottomPadding = isGroupMessage==true && messageIndex>0 && groupMessages[messageIndex-1].senderData!.name == message.senderData!.name? message.reactions.isEmpty? 10 : 0: 3;
    return isMe
        ? Positioned(
      bottom: bottomPadding,
      left: 40,
      child: StackedReactions(
        reactions: message.reactions,
      ),
    )
        : Positioned(
      bottom:  bottomPadding,
      right: 40,
      child: StackedReactions(
        reactions: message.reactions,
      ),
    );
  }
  double calculateMessageBottomPadding() {
    if (isGroupMessage && messageIndex > 0 &&
        groupMessages[messageIndex-1].senderData?.name == message.senderData?.name) {
      return message.reactions.isEmpty ? 3 : 15;
    }
    return 18;
  }
  // message widget
  Widget buildMessage(
      BuildContext context,
      ) {
    //double bottomPadding = isGroupMessage==true && messageIndex>0 && groupMessages[messageIndex-1].senderData!.name == message.senderData!.name? message.reactions.isEmpty? 3 : 15:18;
    double bottomPadding = calculateMessageBottomPadding();
    // padding for the message card
    final padding= message.isMe? EdgeInsets.only(top: 0, left: 30.0, bottom: bottomPadding)
        :  EdgeInsets.only(top: 0, right: 30.0, bottom: bottomPadding);
    // border radius for the message card
    final borderRadius = message.isMe
        ? const BorderRadius.only(
      topLeft: Radius.circular(7),
      topRight: Radius.circular(7),
      bottomLeft: Radius.circular(7),
    )
        : const BorderRadius.only(
      topLeft: Radius.circular(7),
      topRight: Radius.circular(7),
      bottomRight: Radius.circular(7),
    );
    // car color
    final cardColor = message.isMe
        ? AppColors.color202320
        : AppColors.colorE2E2E2;
    // text color
    final textColor = message.isMe
        ? AppColors.colorE2E2E2
        : AppColors.color202320;
    return Padding(
      padding: padding,
      child: Card(
        margin: EdgeInsets.all(0),
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: borderRadius,
        ),
        color: cardColor,
        child: Padding(
          padding: const EdgeInsets.all(10.0),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: message.isMe
                  ? CrossAxisAlignment.end
                  : CrossAxisAlignment.start,
              children: [
                isGroupMessage==true &&
                  message.isMe==false && message.senderData!=null
                    && (messageIndex==0 || (messageIndex<groupMessages.length-1 && groupMessages[messageIndex+1].senderData!.name != message.senderData!.name))?
                Container(
                  margin: EdgeInsets.only(bottom: 5),
                  child: Text(
                    message.senderData!.name??"",
                    style: TextStyle(
                      color:Theme.of(context).colorScheme.error,
                    ),
                  ),
                ):SizedBox(),
                message.imageUrl != null?
                Center(
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(5),
                    child: CachedNetworkImage(
                      imageUrl: message.imageUrl??"",
                      placeholder: (context, url) => SizedBox(width: 50, height: 50, child: CircularProgressIndicator()),
                      errorWidget: (context, url, error) => Icon(Icons.broken_image),
                      fit: BoxFit.fill,
                     // height: 150,
                    ),
                  ),
                ): SizedBox(),
                message.isReplyMessage==true?
                ChatReplyItem(message: message,): SizedBox(),
                ( message.imageUrl != null || message.isReplyMessage==true) && message.messageType==0 && message.message != null && message.message!.isNotEmpty?
                Gap(5): Gap(0),
                message.messageType==0?
                Wrap(
                  alignment:  message.isMe? WrapAlignment.end: WrapAlignment.start,
                  crossAxisAlignment: WrapCrossAlignment.center,
                  children: [
                    message.message != null && message.message!.isNotEmpty?
                    Text(
                      message.message??"",
                      style: TextStyle(
                        color: textColor,
                      ),
                    ):SizedBox(),
                    Gap(5),
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        message.message!=null && message.message!.isNotEmpty?Gap(10):Gap(0),
                        Text(
                          message.timeSent,
                          style: TextStyle(
                            fontSize: 12,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(width: 5),
                        message.isMe
                            ? const Icon(
                          CarbonIcons.checkmark_outline,
                          color: AppColors.colorE2E2E2,
                          size: 15,
                        )
                            : const SizedBox.shrink(),
                      ],
                    ),
                  ],
                ):
                Wrap(
                  alignment:  message.isMe? WrapAlignment.end: WrapAlignment.start,
                  crossAxisAlignment: WrapCrossAlignment.center,
                  children: [
                    message.audioPath != null?
                    ChatAudioItem(audioPath: message.audioPath??""): SizedBox(),
                    Gap(5),
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          message.timeSent,
                          style: TextStyle(
                            fontSize: 12,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(width: 5),
                        message.isMe
                            ? const Icon(
                          CarbonIcons.checkmark_outline,
                          color: AppColors.colorE2E2E2,
                          size: 15,
                        )
                            : const SizedBox.shrink(),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/stacked_images.dart">
import 'dart:io';
import 'dart:math';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import '../../core/themes/colors.dart';
class StackedImages extends StatelessWidget {
  final List<String> imageUris;
  final double imageSize;
  final double overlap;
  final Function deleteImageCallback;
  const StackedImages({
    super.key,
    required this.imageUris,
    required this.deleteImageCallback,
    this.imageSize = 200, // Default size of each image
    this.overlap = 30, // How much each image overlaps the one before it
  });
  @override
  Widget build(BuildContext context) {
    if (imageUris.isEmpty) return const SizedBox.shrink();
    return SizedBox(
      height: imageSize, // Adjust height based on images
      width: imageSize + overlap,
      child: Stack(
        clipBehavior: Clip.none,
        children: List.generate(imageUris.length+1, (index) {
          if(index<imageUris.length){
            final uri = imageUris[index];
            final double rotation = Random().nextDouble() * 10 -
                5; // Random rotation between -5° and 5°
            final double offsetX = index * (overlap); // Overlapping effect
            return Positioned(
              top: 0,
              left: offsetX,
              right: 0,
              child: Transform.rotate(
                angle: rotation * (pi / 180), // Convert degrees to radians
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: uri.startsWith("http")
                      ? CachedNetworkImage(
                    imageUrl: uri,
                    fit: BoxFit.cover,
                    width: imageSize,
                    height: imageSize,
                  )
                      : Image.file(
                    File(uri),
                    fit: BoxFit.cover,
                    width: imageSize,
                    height: imageSize,
                  ),
                ),
              ),
            );
          }else{
            return Positioned(
              top: 0,
              right: 0,
              child: GestureDetector(
                onTap: (){
                  deleteImageCallback();
                },
                child: Container(
                    width: 20,
                    height: 20,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: AppColors.white, // optional background color
                    ),
                    child: Icon(Icons.delete, color: Colors.red, size: 15,)),
              ),
            );
          }
        }),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/widgets/status_message_item_widget.dart">
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import '../../core/themes/colors.dart';
class StatusMessageItemWidget extends StatelessWidget {
  final IconData icon;
  final String highlightedContent;
  final String content;
  const StatusMessageItemWidget({super.key, required this.icon, required this.highlightedContent, required this.content});
  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(icon, color: AppColors.color727772, size: 14,),
        Gap(5),
        Text.rich(
          textAlign: TextAlign.center,
          TextSpan(
            text: highlightedContent,
            style: TextStyle(color: AppColors.color202320,),
            children: <TextSpan>[
              TextSpan(
                text: content,
                style: TextStyle(color: AppColors.color727772),
              )
            ],
          ),
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/chat/chat_screen.dart">
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:go_router/go_router.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/chat_input.dart';
import 'package:whitenoise/ui/chat/widgets/contact_info.dart';
import 'package:whitenoise/ui/chat/widgets/message_widget.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_default_data.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_hero_dialog_route.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reactions_dialog_widget.dart';
import 'package:whitenoise/ui/chat/widgets/status_message_item_widget.dart';
import '../../routing/routes.dart';
import '../core/themes/assets.dart';
import '../core/themes/colors.dart';
import '../../domain/dummy_data/dummy_messages.dart';
class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});
  @override
  State<ChatScreen> createState() => _ChatScreenState();
}
class _ChatScreenState extends State<ChatScreen> {
  void showEmojiBottomSheet({
    required MessageModel message,
  }) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SizedBox(
          height: 310,
          child: EmojiPicker(
            onEmojiSelected: ((category, emoji) {
              // pop the bottom sheet
              Navigator.pop(context);
              addReactionToMessage(
                message: message,
                reaction: emoji.emoji,
              );
            }),
          ),
        );
      },
    );
  }
  // add reaction to message
  void addReactionToMessage({
    required MessageModel message,
    required String reaction,
  }) {
    message.reactions.add(reaction);
    // update UI
    setState(() {});
  }
  void sendNewMessage(MessageModel newMessage){
    setState(() {
      messages.insert(0,newMessage);
    });
  }
  @override
  void initState() {
    super.initState();
  }
  @override
  void dispose() {
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: AppColors.colorE2E2E2,),
          onPressed: () {},
        ),
        title: const ContactInfo(title: "Marek", imgPath: AssetsPaths.icImage,),
        actions: [
          GestureDetector(
            onTap:() => context.go(Routes.newChat),
            child: Container(margin: EdgeInsets.only(right: 15), child: Icon(CarbonIcons.search, color: AppColors.colorE2E2E2,) ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(
            left: 8.0,
            right: 8.0,
          ),
          child: Column(
            children: [
              Expanded(
                child: // list view builder for example messages
                ListView.builder(
                  reverse: true,
                  itemCount: messages.length+1,
                  itemBuilder: (BuildContext context, int index) {
                    //get chatting user info
                    if(index == messages.length){
                      return Container(
                        padding: EdgeInsets.only(left: 30, right: 30),
                        child: Column(
                          children: [
                            Gap(80),
                            CircleAvatar(
                              backgroundImage: AssetImage(AssetsPaths.icImage),
                              radius: 40,
                            ),
                            Gap(10),
                            Text('Marek', style: TextStyle(color: AppColors.color202320, fontSize: 23),),
                            Gap(10),
                            Text('marek@crupek.com', style: TextStyle(color: AppColors.grey2,),),
                            Gap(10),
                            Text.rich(
                              textAlign: TextAlign.center,
                              TextSpan(
                                text: 'efaeg ', // Default style
                                style: TextStyle(color: AppColors.grey2,),
                                children: <TextSpan>[
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kka',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                ],
                              ),
                            ),
                            Gap(20),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(CarbonIcons.email, color: AppColors.color727772, size: 14,),
                                Gap(5),
                                Text.rich(
                                  textAlign: TextAlign.center,
                                  TextSpan(
                                    text: 'Chat invite sent to ', // Default style
                                    style: TextStyle(color: AppColors.color727772,),
                                    children: <TextSpan>[
                                      TextSpan(
                                        text: "Marek",
                                        style: TextStyle(color: AppColors.color202320),
                                      )
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Marek", content: " accepted the invite"),
                            Gap(30),
                          ],
                        ),
                      );
                    }else{
                      // get message
                      final message = messages[index];
                      return GestureDetector(
                        // wrap your message widget with a [GestureDectector] or [InkWell]
                        onLongPress: () {
                          // navigate with a custom [HeroDialogRoute] to [ReactionsDialogWidget]
                          Navigator.of(context).push(
                            HeroDialogRoute(
                              builder: (context) {
                                return ReactionsDialogWidget(
                                  id: message.id, // unique id for message
                                  menuItems: message.isMe?DefaultData.myMessageMenuItems:DefaultData.menuItems,
                                  messageWidget: MessageWidget(
                                      message: message, isGroupMessage: false, messageIndex: index,), // message widget
                                  onReactionTap: (reaction) {
                                    if (reaction == '⋯') {//'➕'
                                      // show emoji picker container
                                      showEmojiBottomSheet(
                                        message: message,
                                      );
                                    } else {
                                      // add reaction to message
                                      addReactionToMessage(
                                        message: message,
                                        reaction: reaction,
                                      );
                                    }
                                  },
                                  onContextMenuTap: (menuItem) {
                                    print('menu item: $menuItem');
                                    // handle context menu item
                                  },
                                  // align widget to the right for my message and to the left for contact message
                                  // default is [Alignment.centerRight]
                                  widgetAlignment: message.isMe
                                      ? Alignment.centerRight
                                      : Alignment.centerLeft,
                                );
                              },
                            ),
                          );
                        },
                        // wrap message with [Hero] widget
                        child: Hero(
                          tag: message.id,
                          child: MessageWidget(message: message, isGroupMessage: false,messageIndex: index,),
                        ),
                      );
                    }
                  },
                ),
              ),
              // bottom chat input
              Padding(
                padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                child: ChatInput(padding: const EdgeInsets.all(0), onSend: sendNewMessage) // BottomChatField(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/groupchat_screen.dart">
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/chat_input.dart';
import 'package:whitenoise/ui/chat/widgets/contact_info.dart';
import 'package:whitenoise/ui/chat/widgets/message_widget.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_default_data.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_hero_dialog_route.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reactions_dialog_widget.dart';
import 'package:whitenoise/ui/chat/widgets/status_message_item_widget.dart';
import '../core/themes/assets.dart';
import '../core/themes/colors.dart';
import '../../domain/dummy_data/dummy_messages.dart';
class GroupchatScreen extends StatefulWidget {
  const GroupchatScreen({super.key});
  @override
  State<GroupchatScreen> createState() => _ChatScreenState();
}
class _ChatScreenState extends State<GroupchatScreen> {
  late final List<MessageModel> _messages;
  void showEmojiBottomSheet({
    required MessageModel message,
  }) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SizedBox(
          height: 310,
          child: EmojiPicker(
            onEmojiSelected: ((category, emoji) {
              // pop the bottom sheet
              Navigator.pop(context);
              addReactionToMessage(
                message: message,
                reaction: emoji.emoji,
              );
            }),
          ),
        );
      },
    );
  }
  // add reaction to message
  void addReactionToMessage({
    required MessageModel message,
    required String reaction,
  }) {
    message.reactions.add(reaction);
    // update UI
    setState(() {});
  }
  void sendNewMessage(MessageModel newMessage){
    setState(() {
      _messages.insert(0,newMessage);
    });
  }
  @override
  void initState() {
    super.initState();
    _messages = List<MessageModel>.from(groupMessages);
  }
  @override
  void dispose() {
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: AppColors.colorE2E2E2,),
          onPressed: () {},
        ),
        title: const ContactInfo(title: "White Noise", imgPath: AssetsPaths.groupLogo,),
        actions: [
          GestureDetector(
            onTap: () => (),
            child: Container(margin: EdgeInsets.only(right: 15), child: Icon(CarbonIcons.search, color: AppColors.colorE2E2E2,) ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(
            left: 8.0,
            right: 8.0,
          ),
          child: Column(
            children: [
              Expanded(
                child: // list view builder for example messages
                ListView.builder(
                  reverse: true,
                  itemCount: _messages.length+1,
                  itemBuilder: (BuildContext context, int index) {
                    //get chatting user info
                    if(index == _messages.length){
                      return Container(
                        padding: EdgeInsets.only(left: 30, right: 30),
                        child: Column(
                          children: [
                            Gap(80),
                            CircleAvatar(
                              backgroundImage: AssetImage(AssetsPaths.groupLogo),
                              radius: 40,
                            ),
                            Gap(10),
                            Text('White Noise', style: TextStyle(color: AppColors.color202320, fontSize: 23),),
                            Gap(10),
                            Text('4 members', style: TextStyle(color: AppColors.grey2,),),
                            Gap(30),
                            StatusMessageItemWidget(icon:  CarbonIcons.group,highlightedContent:  "You", content: " created the group"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.email,highlightedContent:  "", content: "Invite sent to 4 people"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Marek", content: " accepted the invite"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Max Harald", content: " accepted the invite"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.close,highlightedContent:  "Fablof7z", content: " rejected the invite"),
                            Gap(30),
                          ],
                        ),
                      );
                    }else{
                      // get message
                      final message = _messages[index];
                      return GestureDetector(
                        // wrap your message widget with a [GestureDectector] or [InkWell]
                        onLongPress: () {
                          // navigate with a custom [HeroDialogRoute] to [ReactionsDialogWidget]
                          Navigator.of(context).push(
                            HeroDialogRoute(
                              builder: (context) {
                                return ReactionsDialogWidget(
                                  id: message.id, // unique id for message
                                  menuItems: message.isMe?DefaultData.myMessageMenuItems:DefaultData.menuItems,
                                  messageWidget: MessageWidget(
                                      isGroupMessage: true,
                                      message: message, messageIndex: index,), // message widget
                                  onReactionTap: (reaction) {
                                    if (reaction == '⋯') {//'➕'
                                      // show emoji picker container
                                      showEmojiBottomSheet(
                                        message: message,
                                      );
                                    } else {
                                      // add reaction to message
                                      addReactionToMessage(
                                        message: message,
                                        reaction: reaction,
                                      );
                                    }
                                  },
                                  onContextMenuTap: (menuItem) {
                                    print('menu item: $menuItem');
                                    // handle context menu item
                                  },
                                  // align widget to the right for my message and to the left for contact message
                                  // default is [Alignment.centerRight]
                                  widgetAlignment: message.isMe
                                      ? Alignment.centerRight
                                      : Alignment.centerLeft,
                                );
                              },
                            ),
                          );
                        },
                        // wrap message with [Hero] widget
                        child: Hero(
                          tag: message.id,
                          child: MessageWidget(message: message, isGroupMessage: true, messageIndex: index,),
                        ),
                      );
                    }
                  },
                ),
              ),
              // bottom chat input
              Padding(
                padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                child: ChatInput(padding: const EdgeInsets.all(0), onSend: sendNewMessage) // BottomChatField(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/widgets/chat_list_appbar.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/contact_list/new_chat_bottom_sheet.dart';
import 'package:whitenoise/ui/contact_list/search_chat_bottom_sheet.dart';
class ChatListAppBar extends StatelessWidget implements PreferredSizeWidget {
  const ChatListAppBar({super.key});
  @override
  Widget build(BuildContext context) {
    return ColoredBox(
      color: AppColors.color202320,
      child: Padding(
        padding: EdgeInsets.all(16.w),
        child: SafeArea(
          child: Row(
            children: [
              Image.asset(AssetsPaths.icImage, width: 32.w, height: 32.w),
              const Spacer(),
              GestureDetector(
                onTap: () => SearchChatBottomSheet.show(context),
                child: SvgPicture.asset(AssetsPaths.icSearch),
              ),
              Gap(24.w),
              GestureDetector(
                onTap: () => NewChatBottomSheet.show(context),
                child: SvgPicture.asset(AssetsPaths.icAdd),
              ),
            ],
          ),
        ),
      ),
    );
  }
  @override
  Size get preferredSize => Size.fromHeight(64.h);
}
</file>

<file path="lib/ui/contact_list/widgets/chat_list_tile.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/domain/models/chat_model.dart';
class ChatListTile extends StatelessWidget {
  final ChatModel chat;
  const ChatListTile({required this.chat, super.key});
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8.h),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(30.r),
            child:
                chat.imagePath.isNotEmpty
                    ? Image.asset(
                      chat.imagePath,
                      width: 56.w,
                      height: 56.w,
                      fit: BoxFit.cover,
                    )
                    : Container(
                      width: 56.w,
                      height: 56.w,
                      color: Colors.orange,
                      alignment: Alignment.center,
                      child: Text(
                        chat.name.substring(0, 1).toUpperCase(),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 24.sp,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
          ),
          Gap(12.w),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      chat.name,
                      style: TextStyle(
                        color: AppColors.color2D312D,
                        fontSize: 18.sp,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    Text(
                      chat.time,
                      style: TextStyle(
                        fontSize: 14.sp,
                        color: AppColors.color727772,
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        chat.lastMessage,
                        style: TextStyle(
                          fontSize: 14.sp,
                          color: AppColors.color727772,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    if (chat.unreadCount > 0)
                      Container(
                        padding: EdgeInsets.all(6.r),
                        decoration: const BoxDecoration(
                          color: AppColors.color202320,
                          shape: BoxShape.circle,
                        ),
                        child: Text(
                          chat.unreadCount.toString(),
                          style: TextStyle(
                            color: AppColors.white,
                            fontSize: 14.sp,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    if (chat.hasAttachment)
                      SvgPicture.asset(
                        AssetsPaths.icDelivered,
                        width: 19.sp,
                        height: 13.sp,
                      ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/widgets/empty_chat_widget.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
class EmptyChatWidget extends StatelessWidget {
  const EmptyChatWidget({super.key});
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SvgPicture.asset(AssetsPaths.icChat),
          Gap(20.h),
          Text(
            'No chats found',
            style: TextStyle(color: AppColors.color727772, fontSize: 18.sp),
            textAlign: TextAlign.center,
          ),
          Gap(8.h),
          Text(
            'Click "+" to start a new chat',
            style: TextStyle(color: AppColors.color727772, fontSize: 18.sp),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/chat_invitation_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/shared/custom_bottom_sheet.dart';
import 'package:whitenoise/shared/custom_button.dart';
class ChatInvitationSheet extends StatelessWidget {
  final String name;
  final String email;
  final String publicKey;
  final VoidCallback? onAccept;
  final VoidCallback? onDecline;
  const ChatInvitationSheet({
    super.key,
    required this.name,
    required this.email,
    required this.publicKey,
    this.onAccept,
    this.onDecline,
  });
  static Future<void> show({
    required BuildContext context,
    required String name,
    required String email,
    required String publicKey,
    VoidCallback? onAccept,
    VoidCallback? onDecline,
  }) {
    return CustomBottomSheet.show(
      context: context,
      title: 'Invitation to join secure chat',
      heightFactor: 0.55,
      backgroundColor: Colors.white,
      builder: (context) => ChatInvitationSheet(
        name: name,
        email: email,
        publicKey: publicKey,
        onAccept: onAccept,
        onDecline: onDecline,
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 24.w),
          child: Column(
            children: [
              Gap(24.h),
              CircleAvatar(radius: 40.r, backgroundImage: AssetImage(AssetsPaths.icImage)),
              Gap(12.h),
              Text(name, style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.w500, color: AppColors.color202320)),
              Gap(12.h),
              Text(email, style: TextStyle(fontSize: 14.sp, color: AppColors.color727772)),
              Gap(8.h),
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 16.w),
                child: Text(
                  publicKey,
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 14.sp, color: AppColors.color727772),
                ),
              ),
              Gap(48.h),
            ],
          ),
        ),
        const Spacer(),
        CustomButton(
          buttonType: ButtonType.secondary,
          onPressed: () {
            Navigator.pop(context);
            if (onDecline != null) {
              onDecline!();
            }
          },
          title: 'Decline',
        ),
        CustomButton(
          onPressed: () {
            Navigator.pop(context);
            if (onAccept != null) {
              onAccept!();
            }
          },
          title: 'Accept',
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/contact_list/chat_list_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/domain/dummy_data/dummy_chats.dart';
import 'package:whitenoise/ui/contact_list/widgets/chat_list_appbar.dart';
import 'package:whitenoise/ui/contact_list/widgets/chat_list_tile.dart';
class ChatListScreen extends StatelessWidget {
  const ChatListScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: ChatListAppBar(),
      body: ColoredBox(
        color: AppColors.white,
        child: ListView.separated(
          padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 12.h),
          itemCount: dummyChats.length,
          itemBuilder: (context, index) {
            final chat = dummyChats[index];
            return ChatListTile(chat: chat);
          },
          separatorBuilder: (context, index) => Gap(8.h),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/group_chat_details_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/contact_list/chat_invitation_sheet.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
import 'package:whitenoise/ui/contact_list/widgets/contact_list_tile.dart';
import 'package:whitenoise/shared/custom_bottom_sheet.dart';
import 'package:whitenoise/shared/custom_button.dart';
import 'package:whitenoise/shared/custom_textfield.dart';
class GroupChatDetailsSheet extends StatefulWidget {
  final List<ContactModel> selectedContacts;
  const GroupChatDetailsSheet({
    super.key,
    required this.selectedContacts,
  });
  static Future<void> show({
    required BuildContext context,
    required List<ContactModel> selectedContacts,
  }) {
    return CustomBottomSheet.show(
      context: context,
      title: 'Group chat details',
      heightFactor: 0.9,
      backgroundColor: Colors.white,
      builder: (context) => GroupChatDetailsSheet(
        selectedContacts: selectedContacts,
      ),
    );
  }
  @override
  State<GroupChatDetailsSheet> createState() => _GroupChatDetailsSheetState();
}
class _GroupChatDetailsSheetState extends State<GroupChatDetailsSheet> {
  final TextEditingController _groupNameController = TextEditingController();
  bool _hasGroupImage = false;
  bool _isGroupNameValid = false;
  @override
  void initState() {
    super.initState();
    _groupNameController.addListener(_onGroupNameChanged);
  }
  void _onGroupNameChanged() {
    final isValid = _groupNameController.text.trim().isNotEmpty;
    if (isValid != _isGroupNameValid) {
      setState(() {
        _isGroupNameValid = isValid;
      });
    }
  }
  @override
  void dispose() {
    _groupNameController.removeListener(_onGroupNameChanged);
    _groupNameController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: GestureDetector(
            onTap: () {
              setState(() {
                _hasGroupImage = !_hasGroupImage;
              });
            },
            child: Container(
              width: 80.w,
              height: 80.w,
              decoration: BoxDecoration(
                color: AppColors.colorE2E2E2,
                shape: BoxShape.circle,
              ),
              child: _hasGroupImage
                  ? ClipRRect(
                      borderRadius: BorderRadius.circular(40.r),
                      child: Image.asset(
                       AssetsPaths.icWhiteNoise,
                        fit: BoxFit.cover,
                      ),
                    )
                  : SvgPicture.asset(
                      AssetsPaths.icCamera,
                      width: 42.w,
                      height: 42.w,
                      colorFilter: ColorFilter.mode(AppColors.color727772, BlendMode.srcIn),
                    ),
            ),
          ),
        ),
        Gap(24.h),
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.w),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Group chat name',
                style: TextStyle(
                  fontSize: 14.sp,
                  fontWeight: FontWeight.w500,
                  color: AppColors.color202320,
                ),
              ),
              Gap(8.h),
              CustomTextField(
                textController: _groupNameController,
                hintText: 'Enter group name',
                padding: EdgeInsets.zero,
              ),
            ],
          ),
        ),
        Gap(24.h),
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.w),
          child: Text(
            'Members',
            style: TextStyle(
              fontSize: 14.sp,
              fontWeight: FontWeight.w500,
              color: AppColors.color202320,
            ),
          ),
        ),
        Gap(8.h),
        Expanded(
          child: ListView.builder(
            padding: EdgeInsets.symmetric(horizontal: 16.w),
            itemCount: widget.selectedContacts.length,
            itemBuilder: (context, index) {
              final contact = widget.selectedContacts[index];
              return ContactListTile(
                contact: contact,
              );
            },
          ),
        ),    
        CustomButton(
          onPressed:
              _isGroupNameValid
                  ? () {
                    ChatInvitationSheet.show(
                      context: context,
                      name: 'John Doe',
                      email: 'john.doe@example.com',
                      publicKey: '1234567890',
                      onAccept: () {},
                      onDecline: () {},
                    );
                  }
                  : null,
          title: 'Create Group',
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/contact_list/new_group_chat_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/domain/dummy_data/dummy_contacts.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
import 'package:whitenoise/ui/contact_list/group_chat_details_sheet.dart';
import 'package:whitenoise/ui/contact_list/widgets/contact_list_tile.dart';
import 'package:whitenoise/shared/custom_bottom_sheet.dart';
import 'package:whitenoise/shared/custom_button.dart';
import 'package:whitenoise/shared/custom_textfield.dart';
class NewGroupChatSheet extends StatefulWidget {
  const NewGroupChatSheet({super.key});
  @override
  State<NewGroupChatSheet> createState() => _NewGroupChatSheetState();
  static Future<void> show(BuildContext context) {
    return CustomBottomSheet.show(
      context: context,
      title: 'New group chat',
      barrierDismissible: true,
      barrierColor: Colors.transparent,
      builder: (context) => const NewGroupChatSheet(),
    );
  }
}
class _NewGroupChatSheetState extends State<NewGroupChatSheet> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  List<ContactModel> _filteredContacts = [];
  final Set<ContactModel> _selectedContacts = {};
  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
    _filteredContacts = dummyContacts;
  }
  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }
  void _onSearchChanged() {
    setState(() {
      _searchQuery = _searchController.text;
      _filteredContacts = _getFilteredContacts();
    });
  }
  List<ContactModel> _getFilteredContacts() {
    if (_searchQuery.isEmpty) return dummyContacts;
    return dummyContacts.where((contact) => contact.name.toLowerCase().contains(_searchQuery.toLowerCase())).toList();
  }
  void _toggleContactSelection(ContactModel contact) {
    setState(() {
      if (_selectedContacts.contains(contact)) {
        _selectedContacts.remove(contact);
      } else {
        _selectedContacts.add(contact);
      }
    });
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        CustomTextField(textController: _searchController, hintText: 'Search contact or public key...'),
        Expanded(
          child: ListView.builder(
            padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
            itemCount: _filteredContacts.length,
            itemBuilder: (context, index) {
              final contact = _filteredContacts[index];
              final isSelected = _selectedContacts.contains(contact);
              return ContactListTile(
                contact: contact,
                isSelected: isSelected,
                onTap: () => _toggleContactSelection(contact),
                showCheck: true,
              );
            },
          ),
        ),
        SafeArea(
          child: CustomButton(
            onPressed:
                _selectedContacts.isNotEmpty
                    ? () {
                      Navigator.pop(context);
                      GroupChatDetailsSheet.show(context: context, selectedContacts: _selectedContacts.toList());
                    }
                    : null,
            title: 'Continue',
          ),
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/contact_list/search_chat_bottom_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/domain/models/chat_model.dart';
import 'package:whitenoise/domain/dummy_data/dummy_contacts.dart';
import 'package:whitenoise/domain/dummy_data/dummy_chats.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
import 'package:whitenoise/ui/contact_list/widgets/chat_list_tile.dart';
import 'package:whitenoise/ui/contact_list/widgets/contact_list_tile.dart';
import 'package:whitenoise/ui/core/ui/custom_textfield.dart';
import 'package:whitenoise/ui/core/ui/custom_bottom_sheet.dart';
class SearchChatBottomSheet extends StatefulWidget {
  const SearchChatBottomSheet({super.key});
  @override
  State<SearchChatBottomSheet> createState() => _SearchChatBottomSheetState();
  static Future<void> show(BuildContext context) {
    return CustomBottomSheet.show(
      context: context,
      title: 'Search',
      barrierDismissible: true,
      barrierColor: Colors.transparent,
      builder: (_) => const SearchChatBottomSheet(),
    );
  }
}
class _SearchChatBottomSheetState extends State<SearchChatBottomSheet> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  bool _hasSearchResults = false;
  List<ContactModel> _filteredContacts = [];
  List<ChatModel> _filteredChats = [];
  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
  }
  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }
  void _onSearchChanged() {
    setState(() {
      _searchQuery = _searchController.text;
      _hasSearchResults = _searchQuery.isNotEmpty;
      _filteredContacts = _getFilteredContacts();
      _filteredChats = _getFilteredChats();
    });
  }
  List<ContactModel> _getFilteredContacts() {
    if (_searchQuery.isEmpty) return [];
    return dummyContacts
        .where(
          (contact) =>
              contact.name.toLowerCase().contains(_searchQuery.toLowerCase()),
        )
        .toList();
  }
  List<ChatModel> _getFilteredChats() {
    if (_searchQuery.isEmpty) return [];
    return dummyChats
        .where(
          (chat) =>
              chat.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
              chat.lastMessage.toLowerCase().contains(
                _searchQuery.toLowerCase(),
              ),
        )
        .toList();
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        CustomTextField(
          textController: _searchController,
          hintText: 'Search contacts or chats...',
        ),
        if (_hasSearchResults) ...[
          if (_filteredContacts.isNotEmpty) ...[
            Gap(24.h),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text('Contacts', style: TextStyle(fontSize: 24.sp)),
              ),
            ),
            ListView.builder(
              padding: EdgeInsets.symmetric(horizontal: 16.w),
              itemCount: _filteredContacts.length,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemBuilder: (context, index) {
                final contact = _filteredContacts[index];
                return ContactListTile(contact: contact);
              },
            ),
          ],
          Gap(24.h),
          if (_filteredChats.isNotEmpty) ...[
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text('Chats', style: TextStyle(fontSize: 24.sp)),
              ),
            ),
            Expanded(
              child: ListView.builder(
                padding: EdgeInsets.symmetric(horizontal: 16.w),
                itemCount: _filteredChats.length,
                itemBuilder: (context, index) {
                  final chat = _filteredChats[index];
                  return ChatListTile(chat: chat);
                },
              ),
            ),
          ],
          if (_filteredContacts.isEmpty && _filteredChats.isEmpty)
            Expanded(
              child: Center(
                child: Text(
                  'No results found for "$_searchQuery"',
                  style: TextStyle(fontSize: 16.sp, color: Colors.grey),
                ),
              ),
            ),
        ],
        if (!_hasSearchResults) ...[
          Expanded(
            child: Center(
              child: Text(
                'Type to search contacts or chats',
                style: TextStyle(fontSize: 16.sp, color: Colors.grey),
              ),
            ),
          ),
        ],
      ],
    );
  }
}
</file>

<file path="lib/ui/core/ui/custom_bottom_sheet.dart">
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
/// A utility class for showing custom bottom sheets with a slide-up animation.
class CustomBottomSheet {
  static Future<T?> show<T>({
    required BuildContext context,
    required Widget Function(BuildContext) builder,
    String? title,
    bool showCloseButton = true,
    double heightFactor = 0.9,
    bool barrierDismissible = true,
    String? barrierLabel,
    Color barrierColor = Colors.transparent,
    Color backgroundColor = Colors.white,
    bool blurBackground = true,
    double blurSigma = 5.0,
    Duration transitionDuration = const Duration(milliseconds: 300),
    Curve curve = Curves.easeOutQuad,
  }) {
    return showGeneralDialog<T>(
      context: context,
      barrierDismissible: barrierDismissible,
      barrierLabel: barrierLabel ?? 'BottomSheet',
      barrierColor: barrierColor,
      transitionDuration: transitionDuration,
      pageBuilder: (context, animation, secondaryAnimation) {
        final bottomSheetHeight = 1.sh * heightFactor;
        return Material(
          color: Colors.transparent,
          child: blurBackground
              ? BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
                  child: _buildBottomSheetContent(
                    context: context,
                    builder: builder,
                    title: title,
                    showCloseButton: showCloseButton,
                    bottomSheetHeight: bottomSheetHeight,
                    backgroundColor: backgroundColor,
                  ),
                )
              : _buildBottomSheetContent(
                  context: context,
                  builder: builder,
                  title: title,
                  showCloseButton: showCloseButton,
                  bottomSheetHeight: bottomSheetHeight,
                  backgroundColor: backgroundColor,
                ),
        );
      },
      transitionBuilder: (context, animation, secondaryAnimation, child) {
        final curvedAnimation = CurvedAnimation(parent: animation, curve: curve);
        return SlideTransition(
          position: Tween<Offset>(begin: const Offset(0, 1), end: Offset.zero).animate(curvedAnimation),
          child: child,
        );
      },
    );
  }
  static Widget _buildBottomSheetContent({
    required BuildContext context,
    required Widget Function(BuildContext) builder,
    required double bottomSheetHeight,
    required Color backgroundColor,
    String? title,
    bool showCloseButton = true,
  }) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Container(color: Colors.black.withValues(alpha: 0.1)),
        Column(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            Container(
              height: bottomSheetHeight,
              decoration: BoxDecoration(
                color: backgroundColor,
              ),
              child: Column(
                children: [
                  if (title != null || showCloseButton)
                    Padding(
                      padding: EdgeInsets.fromLTRB(24.w, 16.h, 16.w, 24.h),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          if (title != null)
                            Text(
                              title,
                              style: TextStyle(color: Colors.black, fontSize: 24.sp),
                            )
                          else
                            const Spacer(),
                          if (showCloseButton)
                            GestureDetector(
                              onTap: () => Navigator.pop(context),
                              child: Icon(Icons.close, color: Colors.black, size: 24.w),
                            ),
                        ],
                      ),
                    ),
                  Expanded(
                    child: builder(context),
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/core/ui/custom_textfield.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class CustomTextField extends StatelessWidget {
  const CustomTextField({
    super.key,
    required this.textController,
    this.padding,
    this.contentPadding,
    this.autofocus = true,
    this.hintText,
  });
  final TextEditingController textController;
  final EdgeInsetsGeometry? padding;
  final EdgeInsetsGeometry? contentPadding;
  final bool autofocus;
  final String? hintText;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: padding ?? EdgeInsets.symmetric(horizontal: 24.w),
      child: TextField(
        controller: textController,
        autofocus: autofocus,
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: TextStyle(color: AppColors.color727772, fontSize: 14.sp),
          border: OutlineInputBorder(
            borderSide: BorderSide(color: AppColors.colorE2E2E2),
          ),
          enabledBorder: OutlineInputBorder(
            borderSide: BorderSide(color: AppColors.colorE2E2E2),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: BorderSide(color: AppColors.colorE2E2E2),
          ),
          contentPadding:
              contentPadding ??
              EdgeInsets.symmetric(horizontal: 16.w, vertical: 12.h),
        ),
      ),
    );
  }
}
</file>

<file path="linux/flutter/generated_plugin_registrant.cc">
//
//  Generated file. Do not edit.
//
// clang-format off
#include "generated_plugin_registrant.h"
#include <emoji_picker_flutter/emoji_picker_flutter_plugin.h>
#include <file_selector_linux/file_selector_plugin.h>
void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) emoji_picker_flutter_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "EmojiPickerFlutterPlugin");
  emoji_picker_flutter_plugin_register_with_registrar(emoji_picker_flutter_registrar);
  g_autoptr(FlPluginRegistrar) file_selector_linux_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "FileSelectorPlugin");
  file_selector_plugin_register_with_registrar(file_selector_linux_registrar);
}
</file>

<file path="linux/flutter/generated_plugins.cmake">
#
# Generated file, do not edit.
#

list(APPEND FLUTTER_PLUGIN_LIST
  emoji_picker_flutter
  file_selector_linux
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
  rust_lib_whitenoise
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
</file>

<file path="macos/Flutter/GeneratedPluginRegistrant.swift">
//
//  Generated file. Do not edit.
//
import FlutterMacOS
import Foundation
import emoji_picker_flutter
import file_selector_macos
import path_provider_foundation
import shared_preferences_foundation
import sqflite_darwin
func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  EmojiPickerFlutterPlugin.register(with: registry.registrar(forPlugin: "EmojiPickerFlutterPlugin"))
  FileSelectorPlugin.register(with: registry.registrar(forPlugin: "FileSelectorPlugin"))
  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))
  SqflitePlugin.register(with: registry.registrar(forPlugin: "SqflitePlugin"))
}
</file>

<file path="windows/flutter/generated_plugin_registrant.cc">
//
//  Generated file. Do not edit.
//
// clang-format off
#include "generated_plugin_registrant.h"
#include <emoji_picker_flutter/emoji_picker_flutter_plugin_c_api.h>
#include <file_selector_windows/file_selector_windows.h>
void RegisterPlugins(flutter::PluginRegistry* registry) {
  EmojiPickerFlutterPluginCApiRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("EmojiPickerFlutterPluginCApi"));
  FileSelectorWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("FileSelectorWindows"));
}
</file>

<file path="windows/flutter/generated_plugins.cmake">
#
# Generated file, do not edit.
#

list(APPEND FLUTTER_PLUGIN_LIST
  emoji_picker_flutter
  file_selector_windows
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
  rust_lib_whitenoise
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/windows plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/windows plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
</file>

<file path=".cursorignore">
.env
.env.*
!.env.example
/coverage/

# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
</file>

<file path=".gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
</file>

<file path=".context/01_rust_api.md">
# What is this about?

This doc is a place to collect ideas and feedback on what the shape of the rust API should look like for the Flutter app. Currently the rust crate that is built into Tauri is doing a lot of things that I don't think we need to do here in Flutter. For example, there are about 50 commands that are quite Tuari or Svelte specific and I think we can get away from that and do something cleaner here.

# Why do we have a Rust crate in the app at all?

White Noise is implementing [NIP-EE](https://github.com/nostr-protocol/nips/pull/1427/files) to bring highly secure messaging (based on the MLS protocol) to Nostr. The main implementation of the MLS protocol is [OpenMLS](https://github.com/openmls/openmls) which is written in Rust. We also wrote a set of [rust crates](https://github.com/rust-nostr/nostr/tree/master/crates/nostr-mls) that wrap OpenMLS and provide the extra functionality required to make MLS function on Nostr. Because these crates are well tested and Rust is highly performant and type/memory safe, we'd like to continue using these crates to provide the core functionality to our apps. This also means that we're front-end independent. Want to drive White Noise via a CLI? We can do that. Want to use the crate to build a website? We can do that.

# How does the Flutter app talk to the Rust crate?

We're using [flutter_rust_bridge](https://github.com/fzyzcjy/flutter_rust_bridge) to automatically generate bindings from our rust code to this app.

# Application State

Since we'll be using Riverpod to create high-level providers that give access global state, we should be able to simplify the API significantly and depend on a high-level `StreamProvider` (or several) that provide updates from the backend to the front-end continuously.

# Structs

## Whitenoise

```rust
struct WhitenoiseState {
    config: WhitenoiseConfig,           // The config object passed in to initialize Whitenoise
    account: Account
    // This will be the future when we bring back multiple accounts
    // accounts: Vec<Account>,             // Vec of accounts that are signed in
    // active_account: Option<PublicKey>,  // Optional in case there is no signed in accounts
}
```

## Accounts

```rust
struct Account {
    pubkey:             PublicKey,          // Nostr public key - in hex format
    metadata:           Metadata,           // Kind-0 metadata of a user
    settings:           AccountSettings,    // White Noise specific app preferences
    onboarding:         AccountOnboarding,  // White Noise specific onboarding steps
    relays:             AccountRelays,      // Nostr relays
    nwc:                AccountNwc,         // Nostr Wallet Connect settings and data
    contacts:           Vec<PublicKey>,     // Set of pubkeys of the user's contacts (from their kind 3 event)
    last_used:          Timestamp,          // The last time the account was used
    last_synced:        Timestamp,          // The last time the account was synced up fully to relays
    active:             bool,               // Is this account currently active - (do we need this?)
    groups:             Vec<Group>,         // Group for the groups the user is part of (includes both active and inactive groups)
    welcomes:           Vec<Welcome>,       // Welcomes for the user (includes pending, accepted, and dismissed welcomes)
}
```

```rust
struct Contact {
    pubkey:     PublicKey,      // Nostr public key - in hex format
    alias:      String          // Contact's alias (petname); this is a NIP-02 concept, set by the user following this contact
    metadata:   Metadata,       // Kind-0 metadata
    relays:     AccountRelays,  // Nostr relays
}
```

```rust
struct Metadata {
    name:         Option<String>,    // Name
    display_name: Option<String>,    // Display name (always show this first, fallback to name)
    about:        Option<String>,    // Bio
    website:      Option<String>,    // URL
    picture:      Option<String>,    // Avatar image URL
    banner:       Option<String>,    // Banner image URL
    nip05:        Option<String>,    // NIP-05 verification
    lud06:        Option<String>,    // LUD-06 lightning URL - rarely used
    lud16:        Option<String>,    // LUD-16 lightning URL
    // Other custom fields can also show up here, always of the Option<String> type
}
```

```rust
struct AccountSettings {
    dark_theme:    bool,    // Dark mode
    dev_mode:      bool,    // Dev mode
    lockdown_mode: bool,    // Lockdown mode (doesn't currently do anything)
}
```

```rust
struct AccountOnboarding {
    inbox_relays:        bool,    // Do they have an inbox relays list event (kind: 10050)
    key_package_relays:  bool,    // Do they have a key package relays list event (kind: 10051)
    publish_key_package: bool,    // Have they published a key package
}
```

```rust
struct AccountRelays {
    nostr_relays:       Vec<RelayUrl>,  // List of user's normal relays from kind: 10002 event
    inbox_relays:       Vec<RelayUrl>,  // List of user's inbox relays from kind: 10050 event
    key_package_relays: Vec<RelayUrl>,  // List of user's key package relays from kind: 10051 event
}
```

```rust
/// Status of a relay connection - matches RelayStatus from rust-nostr
enum RelayStatus {
    Initialized     // The relay has just been created.
    Pending         // The relay will try to connect shortly.
    Connecting,     // Trying to connect.
    Connected,      // Connected.
    Disconnected,   // The connection failed, but another attempt will occur soon.
    Terminated,     // The connection has been terminated and no retry will occur.
    Banned,         // The relay has been banned.
}
```

```rust
struct AccountNwc {
    nwc_uri: String // The NWC connection URI
    balance: u64    // The NWC balance
}
```

## Groups

```rust
/// High level details about a group. Messages are loaded separately via pagination.
struct Group {
    mls_group_id:         GroupId,           // The MLS Group ID - never changes
    nostr_group_id:       [u8; 32],          // The group ID used for identifying this group on relays - can change
    name:                 String,            // The name of the group
    description:          String,            // The description of the group
    admin_pubkeys:        Vec<PublicKey>,    // The list of admin pubkeys
    last_message_id:      Option<EventId>,   // The ID of the latest message
    last_message_at:      Option<Timestamp>, // The timestamp of the latest message
    last_message_preview: Option<String>,    // The preview text of the latest message to show in the chats list
    group_type:           GroupType,         // The type of group (DM or Group)
    state:                GroupState,        // Whether the group is active or not
}
```

```rust
enum GroupType {
    DirectMessage,  // Just two members
    Group           // More than two members
}
```

```rust
enum GroupState {
    Active,     // The group is active
    Inactive,   // The group is inactive, e.g. users have left or when welcome has been declined
    Pending,    // The group is pending, e.g. users are invited to but haven't joined yet
}
```

## Messages

```rust
struct Message {
    state:             MessageState,                    // The state of the message
    id:                EventId,                         // The ID of the message event
    pubkey:            PublicKey,                       // PublicKey of the sender
    kind:              Kind,                            // Nostr event kind
    created_at:        Timestamp,                       // When was the message sente
    content:           Option<String>,                  // Optional Content
    tags:              Tags,                            // Nostr event tags
    reactions:         Vec<Message>,                    // Optional set of messages that are reacting to this message
    reaction_to:       Option<Message>,                 // Optional message that this message is reacting to. Will only be set when it's a kind 7 message
    reaction_summary:  HashMap,                         // Summary of reactions to this message e.g. {❤️: 3, 👍: 1}
    replies:           Vec<Message>,                    // Set of messages that are replying to this message
    reply_to:          Option<Message>,                 // Optional message that this message is replying to
    tokenized_content: Option<Vec<SerializableToken>>   // Optional tokenized message content
}
```

```rust
enum MessageState {
    Created,    // The message was created successfully and stored but we don't yet know if it was published to relays.
    Processed,  // The message was successfully processed and stored in the database
    Deleted,    // The message was deleted by the original sender - via a delete event
}
```

```rust
// Pagination cursor
struct MessageCursor {
    timestamp:   Timestamp,     // When the message was created
    message_id:  EventId,       // The message's event ID
    direction:   PageDirection, // Which direction to load messages
}
```

```rust
enum PageDirection {
    Forward,  // Load newer messages
    Backward, // Load older messages
}
```

```rust
struct MessagePage {
    messages:    Vec<Message>,          // The messages in this page
    next_cursor: Option<MessageCursor>, // Cursor for loading the next page
    prev_cursor: Option<MessageCursor>, // Cursor for loading the previous page
    has_more:    bool,                  // Whether there are more messages to load
}
```

## Welcomes

```rust
struct Welcome {
    mls_group_id:        GroupId,          // the mls_group_id
    nostr_group_id:      [u8; 32],         // the nostr_group_id
    group_name:          String,           // group name
    group_description:   String,           // group description
    group_admin_pubkeys: Vec<PublicKey>,   // the admin pubkeys
    group_relays:        Vec<RelayUrl>,    // the relays of the group
    welcomer:            PublicKey,        // the pubkey of the person who sent the welcome message
    member_count:        u32,              // the number of members in the group
    state:               WelcomeState,     // The state of the welcome
}
```

```rust
enum WelcomeState {
    Pending,    // The welcome is pending
    Accepted,   // The welcome was accepted
    Declined,   // The welcome was declined
    Ignored,    // The welcome was ignored
}
```

## Files

```rust
struct FileUpload {
    pub filename:   String,
    pub mime_type:  String,
    pub data:       Vec<u8>,
}

struct UploadedMedia {
    pub blob_descriptor:    BlobDescriptor,
    pub imeta_tag:          Tag,
}

/// The same as Blossom
struct BlobDescriptor {
    pub url:        String,                 // URL where the blob can be accessed
    pub sha256:     String,                 // SHA-256 hash of the blob data
    pub size:       u64,                    // Size of the blob in bytes
    pub r#type:     Option<String>,         // Optional MIME type of the blob
    pub uploaded:   u64,                    // Unix timestamp when the blob was uploaded
    pub compressed: Option<CompressedInfo>, // Optional information about compression if the blob is compressed
}
```

# Methods

```rust
/// =========================================
/// Initialization and Basics
/// =========================================

// Initialize app state from the database
async fn initialize_whitenoise(config: WhitenoiseConfig) -> Result<WhitenoiseState, Error> {}

// Delete all data from the app databases
async fn delete_all_data() -> Result<(), Error> {}

// Invite a user to White Noise using a NIP-04 DM
async fn invite_to_whitenoise(pubkey: PublicKey) -> Result<(), Error> {}

// Load relay connection status
async fn load_relay_status() -> Result<HashMap<RelayUrl, RelayStatus>, Error> {}

/// =========================================
/// Accounts
/// =========================================

/// Creates a new account by generating a new Nostr keypair.
async fn create_account() -> Result<Account, Error> {}

/// Logs in an existing account using a Nostr private key.
async fn login(secret_key: String) -> Result<Account, Error> {}

/// Logs out an account by its public key. Optionally deletes all associated data (groups, messages, etc.).
async fn logout(pubkey: PublicKey, delete_data: bool) -> Result<(), Error> {}

/// Update the active account - will come when we bring back multi-account
// async fn update_active_account(pubkey: PublicKey) -> Result<Account, Error> {}

/// Updates an account's metadata (kind 0 event).
async fn update_account_metadata(pubkey: PublicKey, metadata: Metadata) -> Result<Account, Error> {}

/// Updates an account's settings.
async fn update_account_settings(pubkey: PublicKey, settings: AccountSettings) -> Result<Account, Error> {}

/// Updates an account's contacts list (kind 3 event).
async fn update_account_contacts(pubkey: PublicKey, contacts: Vec<PublicKey>) -> Result<Account, Error> {}

/// Updates an account's onboarding status.
async fn update_account_onboarding(pubkey: PublicKey, onboarding: AccountOnboarding) -> Result<Account, Error> {}

/// Updates an account's relays.
async fn update_account_relays(pubkey: PublicKey, onboarding: AccountRelays) -> Result<Account, Error> {}

/// Updates an account's NWC settings.
async fn update_account_nwc(pubkey: PublicKey, nwc: AccountNwc) -> Result<Account, Error> {}

/// Exports a user's nsec
async fn export_nsec(pubkey: PublicKey) -> Result<String, Error> {}

/// =========================================
/// Contacts
/// =========================================

/// Loads a contact
async fn load_contact(pubkey: PublicKey) -> Result<Contact, Error> {}

/// =========================================
/// Groups
/// =========================================

/// Creates a new group with the specified members and admins.
async fn create_group(name: String, description: String, member_pubkeys: Vec<PublicKey>, admin_pubkeys: Vec<PublicKey>) -> Result<Group, Error> {}

/// Joins an existing group using a welcome message.
async fn join_group(welcome: Welcome) -> Result<Group, Error> {}

/// Declines joining a group from a welcome message.
async fn decline_join_group(welcome: Welcome) -> Result<(), Error> {}

/// Leaves a group.
async fn leave_group(group_id: GroupId) -> Result<(), Error> {}

/// Updates a group's metadata including name, description, and admin list.
async fn update_group_metadata(group_id: GroupId, name: Option<String>, description: Option<String>, admin_pubkeys: Option<Vec<PublicKey>>) -> Result<Group, Error> {}

/// Adds a new member to the group.
async fn add_members(group_id: GroupId, member_pubkeys: Vec<PublicKey>) -> Result<Group, Error> {}

/// Removes a member from the group.
async fn remove_members(group_id: GroupId, member_pubkeys: Vec<PublicKey>) -> Result<Group, Error> {}

// Rotate your key in the group. Will be done periodically for forward secrecy.
async fn rotate_key_in_group(group_id: GroupId) -> Result<(), Error> {}

/// =========================================
/// Messages
/// =========================================

// Method to load messages for a group with pagination.
// This will be backed by an LRU cache that will hold the most recently viewed messages in memory and load from the database only when necessary.
async fn load_messages(group_id: GroupId, cursor: Option<MessageCursor>, limit: usize) -> Result<MessagePage, Error> {}

/// Sends a new message to a group.
async fn send_message(group_id: GroupId, message: String, kind: u16, tags: Option<Vec<Tag>>, uploaded_files: Option<Vec<FileUpload>>) -> Result<Message, Error> {}

/// =========================================
/// Key Packages
/// =========================================

/// Publishes a new key package for the account to relays
async fn publish_new_key_package(pubkey: PublicKey) -> Result<(), Error> {}

/// Delete all key packages from relays
async fn delete_all_key_packages(pubkey: PublicKey) -> Result<(), Error> {}

/// =========================================
/// Files
/// =========================================

/// Uploads an encrypted file to storage.
async fn upload_encrypted_file(group_id: GroupId, file_upload: FileUpload) -> Result<UploadedMedia, Error> {}

/// Uploads an unencrypted media file to storage.
/// This is specifically for media content (avatars and banners)
async fn upload_unencrypted_media(file_upload: FileUpload) -> Result<BlobDescriptor, Error> {}

/// Loads a file from storage.
async fn load_file(file_hash: String) -> Result<BlobDescriptor, Error> {}

/// Deletes a file from storage.
async fn delete_file(file_hash: String) -> Result<(), Error> {}

/// =========================================
/// Payments
/// =========================================

/// Pay a lightning invoice
async fn pay_ln_invoice(group_id: GroupId, tags: Option<Vec<Tag>>, bolt11: String) -> Result<(), Error> {
    // Implement
}
```

# Tauri Commands → New API

| Old Tauri Command                   | What it did                                               | New Method                  | What it does / Why we don't need it                         |
| ----------------------------------- | --------------------------------------------------------- | --------------------------- | ----------------------------------------------------------- |
| n/a                                 | n/a                                                       | `initialize_whitenoise`     | intialize the app and return comprehensive app state object |
| `is_mobile`                         | Checks if running on mobile platform                      | n/a                         | we can use dart methods directly for this                   |
| `is_platform`                       | Returns the current platform identifier                   | n/a                         | we can use dart methods directly for this                   |
| `delete_all_data`                   | Deletes all data from the application                     | `delete_all_data`           | Deletes all data from the application                       |
| `create_identity`                   | Create a new identity and set it active                   | `create_account`            | Create a new identity and set it active                     |
| `login`                             | Logs in with given public key                             | `login`                     | Log in with given public key and set it active              |
| `logout`                            | Logs out the given public key                             | `logout`                    | Logs out the given public key                               |
| `set_active_account`                | Sets the active account                                   | `update_active_account`     | Sets the active account                                     |
| `get_accounts`                      | Lists all accounts                                        | n/a                         | `initialize_whitenoise` returns comprehensive state object  |
| `update_account_onboarding`         | Updates onboarding status for account                     | `update_account_onboarding` | Updates onboarding status for account                       |
| `publish_metadata_event`            | Publishes metadata event for an account                   | `update_account_metadata`   | Update account metadata & publish new kind:0 event          |
| n/a                                 | n/a                                                       | `update_account_settings`   | Update account settings                                     |
| n/a                                 | n/a                                                       | `update_account_contacts`   | Update account contact list & publish new kind:3 event      |
| n/a                                 | n/a                                                       | `update_account_relays`     | Update account relays & publishes new event to nostr        |
| n/a                                 | n/a                                                       | `update_account_nwc`        | Update account NWC data                                     |
| `export_nsec`                       | Exports NSEC key for a public key                         | `export_nsec`               | Exports NSEC key for a public key                           |
| `get_nostr_wallet_connect_balance`  | Gets balance from connected NWC wallet                    | n/a                         | Included in Account struct                                  |
| `has_nostr_wallet_connect_uri`      | Checks if NWC URI is configured                           | n/a                         | Handled by `update_account_nwc`                             |
| `remove_nostr_wallet_connect_uri`   | Removes NWC URI for active account                        | n/a                         | Handled by `update_account_nwc`                             |
| `set_nostr_wallet_connect_uri`      | Sets NWC URI for active account                           | n/a                         | Handled by `update_account_nwc`                             |
| `fetch_relays`                      | Fetches status of connected Nostr relays                  | `load_relay_status`         | Loads current relay status                                  |
| `fetch_relays_list`                 | Fetched a relays list of a specific kind for a given user | n/a                         | Included in Account and EnrichedContact                     |
| `fetch_enriched_contact`            | Fetches enriched contact information                      | `load_contact`              | Loads an EnrichedContact                                    |
| `query_enriched_contact`            | Queries enriched contact information                      | n/a                         | Use `load_contact`                                          |
| `search_for_enriched_contacts`      | Searches for enriched contacts                            | n/a                         | Use `load_contact`                                          |
| `query_enriched_contacts`           | Queries multiple enriched contacts                        | n/a                         | Use `load_contact`                                          |
| `fetch_enriched_contacts`           | Fetches multiple enriched contacts                        | n/a                         | Use `load_contact`                                          |
| `query_contacts_with_metadata`      | Queries contacts with metadata                            | n/a                         | Use `load_contact`                                          |
| `fetch_contacts_with_metadata`      | Fetches contacts with metadata                            | n/a                         | Use `load_contact`                                          |
| `invite_to_white_noise`             | Sends invitation as NIP-04 DM                             | `invite_to_whitenoise`      | Sends invitation as NIP-04 DM                               |
| `init_nostr_for_current_user`       | Initializes Nostr for current user                        | n/a                         | Happens in `initialize_whitenoise`                          |
| `publish_relay_list`                | Publishes relay list to Nostr                             | n/a                         | Handled by `update_account_relays`                          |
| `publish_new_key_package`           | Publishes new MLS key package                             | `publish_new_key_package`   | Publishes new MLS key package                               |
| `valid_key_package_exists_for_user` | Checks if valid key package exists                        | n/a                         | Included in EnrichedContact struct                          |
| `delete_all_key_packages`           | Deletes all key packages from relays                      | `delete_all_key_packages`   | Deletes all key packages from relays                        |
| `create_group`                      | Creates a new MLS group                                   | `create_group`              | Creates new MLS group                                       |
| `get_group_and_messages`            | Gets group and its messages                               | `load_messages`             | Loads a paginated list of messages for a given group        |
| `query_message`                     | Queries a specific message                                | n/a                         | Not needed                                                  |
| `rotate_key_in_group`               | Rotates key in a group                                    | `rotate_key_in_group`       | Rotates key in a group                                      |
| `send_mls_message`                  | Sends message to MLS group                                | `send_message`              | Sends a message to a group                                  |
| `accept_welcome`                    | Accepts a group welcome                                   | `join_group`                | Joins a group by accepting a welcome                        |
| `decline_welcome`                   | Declines a group welcome                                  | `decline_join_group`        | Declines to join a group by welcome                         |
| n/a                                 | n/a                                                       | `leave_group`               | Leaves a group                                              |
| n/a                                 | n/a                                                       | `add_members`               | Adds members to a group (only admins can perform)           |
| n/a                                 | n/a                                                       | `remove_members`            | Removes members from a group (only admins can perform)      |
| n/a                                 | n/a                                                       | `update_group_metadata`     | Updates group metadata (only admins can perform)            |
| `get_group_members`                 | Gets members of a group                                   | n/a                         | Included in Group struct                                    |
| `get_group_relays`                  | Gets relays for a group                                   | n/a                         | Included in Group struct                                    |
| `delete_message`                    | Deletes message from MLS group                            | n/a                         | Use `send_message` with kind:5 UnsignedEvent                |
| `get_active_groups`                 | Gets all active groups                                    | n/a                         | Included in Account struct                                  |
| `get_group`                         | Gets single MLS group by ID                               | n/a                         | Included in Group struct                                    |
| `get_group_admins`                  | Gets admins of a group                                    | n/a                         | Included in Group struct                                    |
| `upload_file`                       | Uploads encrypted file to storage                         | `upload_encrypted_file`     | Uploads encrypted file to storage (all files)               |
| `upload_media`                      | Uploads unencrypted media content to Blossom service      | `upload_unencrypted_media`  | Uploads unencrypted file to storage (only media)            |
| `fetch_file`                        | Fetches file from storage                                 | `load_file`                 | Loads a file from storage                                   |
| `delete_file`                       | Deletes file from storage                                 | `delete_file`               | Deletes a file from storage                                 |
| `pay_invoice`                       | Pays a Lightning invoice                                  | `pay_ln_invoice`            | Pays a Lightning invoice                                    |
| `get_welcome`                       | Gets a specific welcome                                   | n/a                         | Included in Account struct                                  |
| `get_welcomes`                      | Gets all welcomes                                         | n/a                         | Included in Account struct                                  |
| `decrypt_content`                   | Decrypts content using Nostr encryption                   | n/a                         | Not needed                                                  |
| `encrypt_content`                   | Encrypts content using Nostr encryption                   | n/a                         | Not needed                                                  |
</file>

<file path="lib/routing/router.dart">
// Build the GoRouter here
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:whitenoise/routing/routes.dart';
import 'package:whitenoise/ui/chat/groupchat_screen.dart';
import '../ui/auth_flow/welcome_screen.dart';
import '../ui/chat/chat_screen.dart';
/// The route configuration.
final GoRouter router = GoRouter(
  routes: <RouteBase>[
    GoRoute(
      path: '/',
      builder: (BuildContext context, GoRouterState state) {
        return const WelcomeScreen();
      },
      routes: <RouteBase>[
        GoRoute(
          path: Routes.chats,
          builder: (BuildContext context, GoRouterState state) {
            //final id = state.pathParameters["id"]!; // Get "id" param from URL
            return ChatScreen();
          },
        ),
        GoRoute(
          path: Routes.newChat,
          builder: (BuildContext context, GoRouterState state) {
            return const GroupchatScreen();
          },
        ),
      ],
    ),
  ],
);
</file>

<file path="lib/routing/routes.dart">
abstract final class Routes {
  static const home = '/';
  // Auth
  static const login = '/login';
  // Chats
  static const chats = '/chats';
  static const chat = '/chats/:id';
  static const newChat = '/chats/new';
  // Contacts
  static const contacts = '/contacts';
  static const contact = '/contacts/:id';
  // Settings
  static const settings = '/settings';
  static const settingsProfile = '/settings/profile';
  static const settingsNetwork = '/settings/network';
  static const settingsKeys = '/settings/keys';
  static const settingsWallet = '/settings/wallet';
}
</file>

<file path="lib/shared/custom_bottom_sheet.dart">
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
/// A utility class for showing custom bottom sheets with a slide-up animation.
class CustomBottomSheet {
  static Future<T?> show<T>({
    required BuildContext context,
    required Widget Function(BuildContext) builder,
    String? title,
    bool showCloseButton = true,
    double heightFactor = 0.9,
    bool barrierDismissible = true,
    String? barrierLabel,
    Color barrierColor = AppColors.transparent,
    Color backgroundColor = AppColors.white,
    bool blurBackground = true,
    double blurSigma = 5.0,
    Duration transitionDuration = const Duration(milliseconds: 300),
    Curve curve = Curves.easeOutQuad,
  }) {
    return showGeneralDialog<T>(
      context: context,
      barrierDismissible: barrierDismissible,
      barrierLabel: barrierLabel ?? 'BottomSheet',
      barrierColor: barrierColor,
      transitionDuration: transitionDuration,
      pageBuilder: (context, animation, secondaryAnimation) {
        final bottomSheetHeight = 1.sh * heightFactor;
        return Material(
          color: AppColors.transparent,
          child:
              blurBackground
                  ? BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
                    child: _buildBottomSheetContent(
                      context: context,
                      builder: builder,
                      title: title,
                      showCloseButton: showCloseButton,
                      bottomSheetHeight: bottomSheetHeight,
                      backgroundColor: backgroundColor,
                    ),
                  )
                  : _buildBottomSheetContent(
                    context: context,
                    builder: builder,
                    title: title,
                    showCloseButton: showCloseButton,
                    bottomSheetHeight: bottomSheetHeight,
                    backgroundColor: backgroundColor,
                  ),
        );
      },
      transitionBuilder: (context, animation, secondaryAnimation, child) {
        final curvedAnimation = CurvedAnimation(parent: animation, curve: curve);
        return SlideTransition(
          position: Tween<Offset>(begin: const Offset(0, 1), end: Offset.zero).animate(curvedAnimation),
          child: child,
        );
      },
    );
  }
  static Widget _buildBottomSheetContent({
    required BuildContext context,
    required Widget Function(BuildContext) builder,
    required double bottomSheetHeight,
    required Color backgroundColor,
    String? title,
    bool showCloseButton = true,
  }) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Container(color: AppColors.black.withValues(alpha: 0.1)),
        Column(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            Container(
              height: bottomSheetHeight,
              decoration: BoxDecoration(color: backgroundColor),
              child: Column(
                children: [
                  if (title != null || showCloseButton)
                    Padding(
                      padding: EdgeInsets.fromLTRB(24.w, 16.h, 16.w, 24.h),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          if (title != null)
                            Text(title, style: TextStyle(color: AppColors.black, fontSize: 24.sp))
                          else
                            const Spacer(),
                          if (showCloseButton)
                            GestureDetector(
                              onTap: () => Navigator.pop(context),
                              child: Icon(Icons.close, color: AppColors.black, size: 24.w),
                            ),
                        ],
                      ),
                    ),
                  Expanded(child: builder(context)),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }
}
</file>

<file path="lib/shared/custom_textfield.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class CustomTextField extends StatelessWidget {
  const CustomTextField({
    super.key,
    required this.textController,
    this.padding,
    this.contentPadding,
    this.autofocus = true,
    this.hintText,
  });
  final TextEditingController textController;
  final EdgeInsetsGeometry? padding;
  final EdgeInsetsGeometry? contentPadding;
  final bool autofocus;
  final String? hintText;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: padding ?? EdgeInsets.symmetric(horizontal: 24.w),
      child: TextField(
        controller: textController,
        autofocus: autofocus,
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: TextStyle(color: AppColors.color727772, fontSize: 14.sp),
          border: OutlineInputBorder(borderSide: BorderSide(color: AppColors.colorE2E2E2)),
          enabledBorder: OutlineInputBorder(borderSide: BorderSide(color: AppColors.colorE2E2E2)),
          focusedBorder: OutlineInputBorder(borderSide: BorderSide(color: AppColors.colorE2E2E2)),
          contentPadding: contentPadding ?? EdgeInsets.symmetric(horizontal: 16.w, vertical: 12.h),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/welcome_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/auth_flow/info_screen.dart';
import 'package:whitenoise/ui/auth_flow/login_screen.dart';
class WelcomeScreen extends StatelessWidget {
  const WelcomeScreen({super.key});
  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    return Scaffold(
      backgroundColor: Colors.white,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          SizedBox(
            height: screenHeight * 0.55,
            width: double.infinity,
            child: ShaderMask(
              shaderCallback: (Rect bounds) {
                return const LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Colors.black, Colors.transparent],
                  stops: [0.7, 1.0],
                ).createShader(bounds);
              },
              blendMode: BlendMode.dstIn,
              child: Image.asset(AssetsPaths.loginSplash, fit: BoxFit.cover),
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(24, 44, 24, 0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: const [
                Text(
                  'Welcome to',
                  style: TextStyle(fontSize: 24, color: Colors.black87),
                ),
                SizedBox(height: 4),
                Text(
                  'White Noise',
                  style: TextStyle(
                    fontSize: 42,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                ),
                SizedBox(height: 8),
                Text(
                  'Private messaging made easy.',
                  style: TextStyle(fontSize: 18, color: Colors.grey),
                ),
              ],
            ),
          ),
          const Spacer(),
          Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Center(
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(Colors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => const InfoScreen()),
                  );
                },
                child: const Text(
                  'Create a new profile',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.black,
                    decoration: TextDecoration.none,
                  ),
                ),
              ),
            ),
          ),
          Container(
            height: 96,
            width: double.infinity,
            color: Colors.black,
            padding: const EdgeInsets.only(top: 20),
            child: TextButton(
              style: ButtonStyle(
                splashFactory: NoSplash.splashFactory,
                overlayColor: WidgetStateProperty.all(Colors.transparent),
                padding: WidgetStateProperty.all(EdgeInsets.zero),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const LoginScreen()),
                );
              },
              child: const Align(
                alignment: Alignment.topCenter,
                child: Text(
                  'Sign in',
                  style: TextStyle(fontSize: 18, color: Colors.white),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/widgets/contact_list_tile.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class ContactListTile extends StatelessWidget {
  final ContactModel contact;
  final bool isSelected;
  final VoidCallback? onTap;
  final bool showCheck;
  const ContactListTile({
    required this.contact,
    this.onTap,
    this.isSelected = false,
    this.showCheck = false,
    super.key,
  });
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 8.h),
        child: Row(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(30.r),
              child:
                  contact.imagePath.isNotEmpty
                      ? Image.asset(contact.imagePath, width: 56.w, height: 56.w)
                      : Container(
                        width: 56.w,
                        height: 56.w,
                        color: Colors.orange,
                        alignment: Alignment.center,
                        child: Text(
                          contact.name.substring(0, 1).toUpperCase(),
                          style: TextStyle(color: AppColors.white, fontSize: 20.sp, fontWeight: FontWeight.bold),
                        ),
                      ),
            ),
            Gap(12.w),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(
                        contact.name,
                        style: TextStyle(color: AppColors.color2D312D, fontSize: 18.sp, fontWeight: FontWeight.w500),
                      ),
                      Gap(6.w),
                      SvgPicture.asset(AssetsPaths.icVerifiedUser, height: 12.w, width: 12.w),
                    ],
                  ),
                  Text(
                    contact.publicKey,
                    style: TextStyle(color: AppColors.color727772, fontSize: 14.sp),
                  ),
                ],
              ),
            ),
            if (showCheck)
              Container(
                width: 18.w,
                height: 18.w,
                decoration: BoxDecoration(
                  border: Border.all(color: isSelected ? AppColors.color202320 : AppColors.colorE2E2E2, width: 1.5.w),
                  color: isSelected ? AppColors.color202320 : Colors.transparent,
                ),
                child: isSelected ? Icon(Icons.check, size: 12.w, color: Colors.white) : null,
              ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/new_chat_bottom_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/contact_list/new_group_chat_sheet.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/domain/dummy_data/dummy_contacts.dart';
import 'package:whitenoise/domain/models/contact_model.dart';
import 'package:whitenoise/ui/contact_list/start_chat_bottom_sheet.dart';
import 'package:whitenoise/ui/contact_list/widgets/contact_list_tile.dart';
import 'package:whitenoise/ui/core/ui/custom_bottom_sheet.dart';
import 'package:whitenoise/ui/core/ui/custom_textfield.dart';
class NewChatBottomSheet extends StatefulWidget {
  const NewChatBottomSheet({super.key});
  @override
  State<NewChatBottomSheet> createState() => _NewChatBottomSheetState();
  static Future<void> show(BuildContext context) {
    return CustomBottomSheet.show(
      context: context,
      title: 'New chat',
      barrierDismissible: true,
      barrierColor: Colors.transparent,
      builder: (context) => const NewChatBottomSheet(),
    );
  }
}
class _NewChatBottomSheetState extends State<NewChatBottomSheet> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  List<ContactModel> _filteredContacts = [];
  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
  }
  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }
  void _onSearchChanged() {
    setState(() {
      _searchQuery = _searchController.text;
      _filteredContacts = _getFilteredContacts();
    });
  }
  List<ContactModel> _getFilteredContacts() {
    if (_searchQuery.isEmpty) return dummyContacts;
    return dummyContacts
        .where(
          (contact) =>
              contact.name.toLowerCase().contains(_searchQuery.toLowerCase()),
        )
        .toList();
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        CustomTextField(
          textController: _searchController,
          hintText: 'Search contact or public key...',
        ),
        Gap(16.h),
        GestureDetector(
          onTap: () {
            Navigator.pop(context);
            NewGroupChatSheet.show(context);
          },
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 12.h),
            child: Row(
              children: [
                SvgPicture.asset(
                  AssetsPaths.icGroupChat,
                  colorFilter: ColorFilter.mode(AppColors.color727772, BlendMode.srcIn),
                  width: 20.w,
                  height: 20.w,
                ),
                Gap(10.w),
                Expanded(child: Text('New Group Chat', style: TextStyle(color: AppColors.color727772, fontSize: 18.sp))),
                SvgPicture.asset(
                  AssetsPaths.icChevronRight,
                  colorFilter: ColorFilter.mode(AppColors.color727772, BlendMode.srcIn),
                  width: 8.55.w,
                  height: 15.w,
                ),
              ],
            ),
          ),
        ),
        Expanded(
          child: ListView.builder(
            padding: EdgeInsets.symmetric(horizontal: 24.w),
            itemCount: _filteredContacts.length,
            itemBuilder: (context, index) {
              final contact = _filteredContacts[index];
              return ContactListTile(
                contact: contact,
                onTap: () {
                  StartSecureChatBottomSheet.show(
                    context: context,
                    name: contact.name,
                    email: contact.email,
                    publicKey: contact.publicKey,
                    onStartChat: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            'Started secure chat with ${contact.name}',
                          ),
                        ),
                      );
                    },
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/contact_list/start_chat_bottom_sheet.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/shared/custom_button.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/core/ui/custom_bottom_sheet.dart';
class StartSecureChatBottomSheet extends StatelessWidget {
  final String name;
  final String email;
  final String publicKey;
  final VoidCallback? onStartChat;
  const StartSecureChatBottomSheet({
    super.key,
    required this.name,
    required this.email,
    required this.publicKey,
    this.onStartChat,
  });
  static Future<void> show({
    required BuildContext context,
    required String name,
    required String email,
    required String publicKey,
    VoidCallback? onStartChat,
  }) {
    return CustomBottomSheet.show(
      context: context,
      title: 'Start secure chat',
      heightFactor: 0.55,
      backgroundColor: Colors.white,
      builder:
          (context) => StartSecureChatBottomSheet(
            name: name,
            email: email,
            publicKey: publicKey,
            onStartChat: onStartChat,
          ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 24.w),
          child: Column(
            children: [
              Gap(48.h),
              CircleAvatar(radius: 40.r, backgroundImage: AssetImage(AssetsPaths.icImage)),
              Gap(12.h),
              Text(name, style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.w500, color: AppColors.color202320)),
              Gap(12.h),
              Text(email, style: TextStyle(fontSize: 14.sp, color: AppColors.color727772)),
              Gap(8.h),
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 16.w),
                child: Text(
                  publicKey,
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 14.sp, color: AppColors.color727772),
                ),
              ),
              Gap(48.h),
            ],
          ),
        ),
        CustomButton(
          onPressed: () {
            Navigator.pop(context);
            if (onStartChat != null) {
              onStartChat!();
            }
          },
          title: 'Start & Send Invite',
        ),
      ],
    );
  }
}
</file>

<file path="lib/ui/core/themes/assets.dart">
class AssetsPaths {
  static const String _svgsDir = 'assets/svgs';
  static const String _pngsDir = 'assets/pngs';
  //SVGS
  static const String icChat = '$_svgsDir/ic_chat.svg';
  static const String icSearch = '$_svgsDir/ic_search.svg';
  static const String icAdd = '$_svgsDir/ic_add.svg';
  static const String icDelivered = '$_svgsDir/ic_delivered.svg';
  static const String icVerifiedUser = '$_svgsDir/ic_verified_user.svg';
  static const String icChevronRight = '$_svgsDir/ic_chevron_right.svg';
  static const String icGroupChat = '$_svgsDir/ic_group_chat.svg';
  static const String icCamera = '$_svgsDir/ic_camera.svg';
  //PNGS
  static const String icImage = '$_pngsDir/ic_image.png';
  static const String groupLogo= '$_pngsDir/group_logo.png';
  static const String loginSplash = '$_pngsDir/login_splash.png';
  static const String icWhiteNoise = '$_pngsDir/ic_whitenoise.png';
}
</file>

<file path="lib/ui/core/themes/colors.dart">
import 'package:flutter/material.dart';
abstract final class AppColors {
  static const Color white = Colors.white;
  static const Color black = Colors.black;
  static const Color transparent = Colors.transparent;
  static const Color color202320 = Color(0xFF202320);
  static const Color color727772 = Color(0xFF727772);
  static const Color colorE2E2E2 = Color(0xFFE2E2E2);
  static const Color color2D312D = Color(0xFF2D312D);
  static const Color colorF9F9F9 = Color(0xFFF9F9F9);
  static const Color colorF2F2F2 = Color(0xFFF2F2F2);
  static const black1 = Color(0xFF101010);
  static const white1 = Color(0xFFFFF7FA);
  static const grey1 = Color(0xFFF2F2F2);
  static const grey2 = Color(0xFF4D4D4D);
  static const grey3 = Color(0xFFA4A4A4);
  static const grey4 = Color(0xFF4C4E4D);
  static const whiteTransparent = Color(
    0x4DFFFFFF,
  ); // Figma rgba(255, 255, 255, 0.3)
  static const blackTransparent = Color(0x4D000000);
  static const red1 = Color(0xFFE74C3C);
  static const lightColorScheme = ColorScheme(
    brightness: Brightness.light,
    primary: AppColors.black1,
    onPrimary: AppColors.white1,
    secondary: AppColors.black1,
    onSecondary: AppColors.white1,
    surface: Colors.white,
    onSurface: AppColors.black1,
    error: Colors.white,
    onError: Colors.red,
  );
  static const darkColorScheme = ColorScheme(
    brightness: Brightness.dark,
    primary: AppColors.white1,
    onPrimary: AppColors.black1,
    secondary: AppColors.white1,
    onSecondary: AppColors.black1,
    surface: AppColors.black1,
    onSurface: Colors.white,
    error: Colors.black,
    onError:Theme.of(context).colorScheme.error,
  );
}
</file>

<file path="pubspec.yaml">
name: whitenoise
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev
# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1
environment:
    sdk: ^3.7.2
# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
    flutter:
        sdk: flutter
    # The following adds the Cupertino Icons font to your application.
    # Use with the CupertinoIcons class for iOS style icons.
    cupertino_icons: ^1.0.8
    rust_lib_whitenoise:
      path: rust_builder
    flutter_rust_bridge: 2.9.0
    flutter_riverpod: ^2.6.1 #used for api connection and state management
    flutter_svg: ^2.1.0
    gap: ^3.0.1
    emoji_picker_flutter: ^4.3.0
    date_format: ^2.0.9
    #carbon_icons: ^0.0.1+2
    audio_waveforms: ^1.3.0
    image_picker: ^1.1.2
    cached_network_image: ^3.4.1
    path_provider: ^2.1.5
    dio: ^5.8.0+1
    flutter_screenutil: ^5.9.3
    go_router: ^15.1.2
    animate_do: ^3.3.9
    supa_carbon_icons: ^0.0.1+6
dev_dependencies:
    flutter_test:
        sdk: flutter
    # The "flutter_lints" package below contains a set of recommended lints to
    # encourage good coding practices. The lint set provided by the package is
    # activated in the `analysis_options.yaml` file located at the root of your
    # package. See that file for information about deactivating specific lint
    # rules and activating additional ones.
    flutter_lints: ^5.0.0
    integration_test:
        sdk: flutter
# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec
# The following section is specific to Flutter packages.
flutter:
    # The following line ensures that the Material Icons font is
    # included with your application, so that you can use the icons in
    # the material Icons class.
    uses-material-design: true
    fonts:
      - family: OverusedGrotesk-VF
        fonts:
          - asset: assets/fonts/OverusedGrotesk-VF.woff2
    assets:
      - assets/svgs/
      - assets/pngs/
      - assets/fonts/
    # To add assets to your application, add an assets section, like this:
    # assets:
    #   - images/a_dot_burr.jpeg
    #   - images/a_dot_ham.jpeg
    # To add custom fonts to your application, add a fonts section here,
    # in this "flutter" section. Each entry in this list should have a
    # "family" key with the font family name, and a "fonts" key with a
    # list giving the asset and other descriptors for the font. For
    # example:
    # fonts:
    #   - family: Schyler
    #     fonts:
    #       - asset: fonts/Schyler-Regular.ttf
    #       - asset: fonts/Schyler-Italic.ttf
    #         style: italic
    #   - family: Trajan Pro
    #     fonts:
    #       - asset: fonts/TrajanPro.ttf
    #       - asset: fonts/TrajanPro_Bold.ttf
    #         weight: 700
    #
    # For details regarding fonts from package dependencies,
    # see https://flutter.dev/to/font-from-package
</file>

<file path="lib/main.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/routing/router.dart';
import 'package:flutter/services.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  //await RustLib.init();
  runApp(ProviderScope(child: const MyApp()));
}
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    return ScreenUtilInit(
      designSize: width > 600 ? const Size(600, 1024) : const Size(390, 844),
      minTextAdapt: true,
      splitScreenMode: true,
      builder: (context, child) {
        return MaterialApp.router(
          title: 'White Noise',
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            fontFamily: 'OverusedGrotesk',
            appBarTheme: AppBarTheme(
              backgroundColor: AppColors.color202320, // Default AppBar color for the app
            ),
          ),
          routerConfig: router,
        );
      },
    );
  }
}
</file>

</files>
