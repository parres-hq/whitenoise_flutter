This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: lib/routing/router.dart, lib/routing/routes.dart, lib/main.dart, lib/ui/auth_flow/welcome_screen.dart, lib/ui/auth_flow/login_screen.dart, lib/ui/auth_flow/create_profile_screen.dart, lib/ui/auth_flow/key_created_screen.dart, lib/ui/auth_flow/info_screen.dart, lib/ui/auth_flow/logged_screen.dart, lib/ui/contact_list/chat_list_screen.dart, lib/ui/chat/chat_screen.dart, lib/ui/chat/groupchat_screen.dart, local-research/go_router_implementation_plan.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
lib/
  routing/
    router.dart
    routes.dart
  ui/
    auth_flow/
      create_profile_screen.dart
      info_screen.dart
      key_created_screen.dart
      logged_screen.dart
      login_screen.dart
      welcome_screen.dart
    chat/
      chat_screen.dart
      groupchat_screen.dart
    contact_list/
      chat_list_screen.dart
  main.dart
local-research/
  go_router_implementation_plan.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="local-research/go_router_implementation_plan.md">
Executing plan command with query: Fully implement go_router in this Flutter project, ensuring a robust navigation structure for the following flows: 1) Authentication flow (login, register, onboarding, etc.), 2) Contact list screen, 3) Chat screens (direct and group). The plan should cover: - Best practices for go_router setup in a Riverpod-based app - Route organization and nested navigation - Passing data between routes (e.g., user/contact/chat info) - Guarding routes for authentication - Integration with controllers and state management - Suggestions for code structure and file organization - How to handle deep links and web support if relevant. Assume the project is early in go_router setup and needs a scalable, maintainable navigation architecture.Using file provider: openrouter
Using file model: google/gemini-2.5-pro-preview
Using thinking provider: openrouter
Using thinking model: anthropic/claude-3.7-sonnet:thinking
Finding relevant files...
Running repomix to get file listing...
Found 210 files, approx 133628 tokens.
Asking openrouter to identify relevant files using model: google/gemini-2.5-pro-preview with max tokens: 8000...
Found 13 relevant files:
lib/routing/router.dart
lib/routing/routes.dart
lib/main.dart
lib/ui/auth_flow/welcome_screen.dart
lib/ui/auth_flow/login_screen.dart
lib/ui/auth_flow/create_profile_screen.dart
lib/ui/auth_flow/key_created_screen.dart
lib/ui/auth_flow/info_screen.dart
lib/ui/auth_flow/logged_screen.dart
lib/ui/contact_list/chat_list_screen.dart
lib/ui/chat/chat_screen.dart
lib/ui/chat/groupchat_screen.dart
local-research/go_router_implementation_plan.md

Extracting content from relevant files...
</file>

<file path="lib/ui/auth_flow/create_profile_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/ui/auth_flow/key_created_screen.dart';
class CreateProfileScreen extends StatefulWidget {
  const CreateProfileScreen({super.key});
  @override
  State<CreateProfileScreen> createState() => _CreateProfileScreenState();
}
class _CreateProfileScreenState extends State<CreateProfileScreen> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _bioController = TextEditingController();
  void _onContinuePressed() {
    _usernameController.text.trim();
    _bioController.text.trim();
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const KeyCreatedScreen()),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.fromLTRB(24, 32, 24, 32),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const Center(
                child: Text(
                  'Set up your profile',
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 32),
              const CircleAvatar(backgroundColor: AppColors.black, radius: 40),
              const SizedBox(height: 12),
              const Text(
                'Upload photo',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 32),
              const Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Choose a username',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: _usernameController,
                decoration: InputDecoration(
                  hintText: 'Enter name...',
                  filled: true,
                  fillColor: AppColors.grey1,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
              const SizedBox(height: 24),
              const Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Add a short bio',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: _bioController,
                maxLines: 1,
                textInputAction: TextInputAction.done,
                decoration: InputDecoration(
                  hintText: 'A quick note about you...',
                  filled: true,
                  fillColor: AppColors.grey1,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
              const SizedBox(height: 32),
            ],
          ),
        ),
      ),
      bottomNavigationBar: Container(
        height: 96,
        color: AppColors.black,
        padding: const EdgeInsets.only(top: 20),
        child: TextButton(
          style: ButtonStyle(
            splashFactory: NoSplash.splashFactory,
            overlayColor: WidgetStateProperty.all(AppColors.transparent),
            padding: WidgetStateProperty.all(EdgeInsets.zero),
          ),
          onPressed: _onContinuePressed,
          child: const Align(
            alignment: Alignment.topCenter,
            child: Text(
              'Continue',
              style: TextStyle(fontSize: 18, color: AppColors.white),
            ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/info_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/create_profile_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class InfoScreen extends StatelessWidget {
  const InfoScreen({super.key});
  void _onContinuePressed(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const CreateProfileScreen()),
    );
  }
  Widget _buildFeatureItem(String title, String subtitle) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 24),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Padding(
            padding: EdgeInsets.only(top: 4),
            child: CircleAvatar(backgroundColor: AppColors.black, radius: 12),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  subtitle,
                  style: TextStyle(fontSize: 15, color: AppColors.grey3),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Center(
                    child: Text(
                      'What’s unique\nabout White Noise',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 48),
                  _buildFeatureItem(
                    'Private by default',
                    'No one can trace who you talk to.',
                  ),
                  _buildFeatureItem(
                    'Cannot be censored',
                    'Even the people who made this application cannot restrict you.',
                  ),
                  _buildFeatureItem(
                    'Super secure',
                    'Only you are in control of your data.',
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/key_created_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/logged_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class KeyCreatedScreen extends StatelessWidget {
  const KeyCreatedScreen({super.key});
  void _onContinuePressed(BuildContext context) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => const LoggedInScreen()),
    );
  }
  void _onCopyPressed(BuildContext context) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('Copied!')));
  }
  @override
  Widget build(BuildContext context) {
    const dummyKey = '''
blah blah blah blah blah blah
blah blah blah blah blah blah
blah blah blah blah blah blah
blah blah blah blah blah blah
''';
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text(
                    'We created a\nprivate key for you',
                    style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    'Store this in a secure location. It’s your main\npassword to this profile and your messages.',
                    style: TextStyle(fontSize: 16, color: AppColors.grey3),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 32),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(
                      vertical: 24,
                      horizontal: 16,
                    ),
                    decoration: BoxDecoration(
                      color: AppColors.grey1,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Text(
                          dummyKey.trim(),
                          textAlign: TextAlign.center,
                          style: const TextStyle(fontSize: 20, height: 1.5),
                        ),
                        const SizedBox(height: 20),
                        SizedBox(
                          width: double.infinity,
                          height: 48,
                          child: TextButton(
                            style: TextButton.styleFrom(
                              backgroundColor: AppColors.black,
                              foregroundColor: AppColors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                            ),
                            onPressed: () => _onCopyPressed(context),
                            child: const Text('Copy'),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 32),
                  const Text(
                    'You can skip now and we’ll remind\nyou to do this later.',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: AppColors.grey3),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/logged_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class LoggedInScreen extends StatelessWidget {
  const LoggedInScreen({super.key});
  void _onContinuePressed(BuildContext context) {}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Center(
                    child: Text(
                      'You’re signed in',
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Center(
                    child: Text(
                      'Let’s see if you already have previous activity.',
                      textAlign: TextAlign.center,
                      style: TextStyle(fontSize: 16, color: AppColors.grey3),
                    ),
                  ),
                  const SizedBox(height: 48),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      vertical: 16,
                      horizontal: 20,
                    ),
                    margin: const EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      color: AppColors.black,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Row(
                      children: [
                        SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: AppColors.white,
                          ),
                        ),
                        SizedBox(width: 12),
                        Text(
                          'Looking for your contacts',
                          style: TextStyle(
                            fontSize: 16,
                            color: AppColors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      vertical: 16,
                      horizontal: 20,
                    ),
                    decoration: BoxDecoration(
                      color: AppColors.black,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Row(
                      children: [
                        SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: AppColors.white,
                          ),
                        ),
                        SizedBox(width: 12),
                        Text(
                          'Looking for chats',
                          style: TextStyle(
                            fontSize: 16,
                            color: AppColors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () => _onContinuePressed(context),
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/auth_flow/login_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/auth_flow/logged_screen.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});
  @override
  State<LoginScreen> createState() => _LoginScreenState();
}
class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _keyController = TextEditingController();
  void _onContinuePressed() {
    final key = _keyController.text.trim();
    if (key.isEmpty) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please enter something')));
      return;
    }
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const LoggedInScreen()),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Stack(
        children: [
          SafeArea(
            top: true,
            bottom: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(24, 32, 24, 120),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Center(
                    child: Text(
                      'Sign in',
                      style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  const Center(
                    child: Text.rich(
                      TextSpan(
                        text: 'White Noise requires a ',
                        style: TextStyle(fontSize: 16, color: AppColors.black),
                        children: [
                          TextSpan(
                            text: 'Nostr private key',
                            style: TextStyle(
                              decoration: TextDecoration.underline,
                              color: AppColors.black,
                            ),
                          ),
                          TextSpan(text: ' to use.'),
                        ],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 32),
                  const Text(
                    'Enter your Nostr private key',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  TextField(
                    controller: _keyController,
                    decoration: InputDecoration(
                      hintText: 'nsec...',
                      filled: true,
                      fillColor: AppColors.grey1,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(6),
                        borderSide: BorderSide.none,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  const Center(
                    child: Text(
                      'Your key will be encrypted and only\nstored on your device.',
                      textAlign: TextAlign.center,
                      style: TextStyle(color: AppColors.grey3),
                    ),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 96,
              width: double.infinity,
              color: AppColors.black,
              padding: const EdgeInsets.only(top: 20),
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(AppColors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: _onContinuePressed,
                child: const Align(
                  alignment: Alignment.topCenter,
                  child: Text(
                    'Continue',
                    style: TextStyle(fontSize: 18, color: AppColors.white),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/chat_screen.dart">
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:go_router/go_router.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/chat_input.dart';
import 'package:whitenoise/ui/chat/widgets/contact_info.dart';
import 'package:whitenoise/ui/chat/widgets/message_widget.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_default_data.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_hero_dialog_route.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reactions_dialog_widget.dart';
import 'package:whitenoise/ui/chat/widgets/status_message_item_widget.dart';
import '../../routing/routes.dart';
import '../core/themes/assets.dart';
import '../core/themes/colors.dart';
import '../../domain/dummy_data/dummy_messages.dart';
class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});
  @override
  State<ChatScreen> createState() => _ChatScreenState();
}
class _ChatScreenState extends State<ChatScreen> {
  void showEmojiBottomSheet({
    required MessageModel message,
  }) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SizedBox(
          height: 310,
          child: EmojiPicker(
            onEmojiSelected: ((category, emoji) {
              // pop the bottom sheet
              Navigator.pop(context);
              addReactionToMessage(
                message: message,
                reaction: emoji.emoji,
              );
            }),
          ),
        );
      },
    );
  }
  // add reaction to message
  void addReactionToMessage({
    required MessageModel message,
    required String reaction,
  }) {
    message.reactions.add(reaction);
    // update UI
    setState(() {});
  }
  void sendNewMessage(MessageModel newMessage){
    setState(() {
      messages.insert(0,newMessage);
    });
  }
  @override
  void initState() {
    super.initState();
  }
  @override
  void dispose() {
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: AppColors.colorE2E2E2,),
          onPressed: () {},
        ),
        title: const ContactInfo(title: "Marek", imgPath: AssetsPaths.icImage,),
        actions: [
          GestureDetector(
            onTap:() => context.go(Routes.newChat),
            child: Container(margin: EdgeInsets.only(right: 15), child: Icon(CarbonIcons.search, color: AppColors.colorE2E2E2,) ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(
            left: 8.0,
            right: 8.0,
          ),
          child: Column(
            children: [
              Expanded(
                child: // list view builder for example messages
                ListView.builder(
                  reverse: true,
                  itemCount: messages.length+1,
                  itemBuilder: (BuildContext context, int index) {
                    //get chatting user info
                    if(index == messages.length){
                      return Container(
                        padding: EdgeInsets.only(left: 30, right: 30),
                        child: Column(
                          children: [
                            Gap(80),
                            CircleAvatar(
                              backgroundImage: AssetImage(AssetsPaths.icImage),
                              radius: 40,
                            ),
                            Gap(10),
                            Text('Marek', style: TextStyle(color: AppColors.color202320, fontSize: 23),),
                            Gap(10),
                            Text('marek@crupek.com', style: TextStyle(color: AppColors.grey2,),),
                            Gap(10),
                            Text.rich(
                              textAlign: TextAlign.center,
                              TextSpan(
                                text: 'efaeg ', // Default style
                                style: TextStyle(color: AppColors.grey2,),
                                children: <TextSpan>[
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'eaeed ',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                  TextSpan(
                                    text: 'kkase ',
                                    style: TextStyle(color: AppColors.color727772),
                                  ),
                                  TextSpan(
                                    text: 'kka',
                                    style: TextStyle(color: AppColors.grey2),
                                  ),
                                ],
                              ),
                            ),
                            Gap(20),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(CarbonIcons.email, color: AppColors.color727772, size: 14,),
                                Gap(5),
                                Text.rich(
                                  textAlign: TextAlign.center,
                                  TextSpan(
                                    text: 'Chat invite sent to ', // Default style
                                    style: TextStyle(color: AppColors.color727772,),
                                    children: <TextSpan>[
                                      TextSpan(
                                        text: "Marek",
                                        style: TextStyle(color: AppColors.color202320),
                                      )
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Marek", content: " accepted the invite"),
                            Gap(30),
                          ],
                        ),
                      );
                    }else{
                      // get message
                      final message = messages[index];
                      return GestureDetector(
                        // wrap your message widget with a [GestureDectector] or [InkWell]
                        onLongPress: () {
                          // navigate with a custom [HeroDialogRoute] to [ReactionsDialogWidget]
                          Navigator.of(context).push(
                            HeroDialogRoute(
                              builder: (context) {
                                return ReactionsDialogWidget(
                                  id: message.id, // unique id for message
                                  menuItems: message.isMe?DefaultData.myMessageMenuItems:DefaultData.menuItems,
                                  messageWidget: MessageWidget(
                                      message: message, isGroupMessage: false, messageIndex: index,), // message widget
                                  onReactionTap: (reaction) {
                                    if (reaction == '⋯') {//'➕'
                                      // show emoji picker container
                                      showEmojiBottomSheet(
                                        message: message,
                                      );
                                    } else {
                                      // add reaction to message
                                      addReactionToMessage(
                                        message: message,
                                        reaction: reaction,
                                      );
                                    }
                                  },
                                  onContextMenuTap: (menuItem) {
                                    print('menu item: $menuItem');
                                    // handle context menu item
                                  },
                                  // align widget to the right for my message and to the left for contact message
                                  // default is [Alignment.centerRight]
                                  widgetAlignment: message.isMe
                                      ? Alignment.centerRight
                                      : Alignment.centerLeft,
                                );
                              },
                            ),
                          );
                        },
                        // wrap message with [Hero] widget
                        child: Hero(
                          tag: message.id,
                          child: MessageWidget(message: message, isGroupMessage: false,messageIndex: index,),
                        ),
                      );
                    }
                  },
                ),
              ),
              // bottom chat input
              Padding(
                padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                child: ChatInput(padding: const EdgeInsets.all(0), onSend: sendNewMessage) // BottomChatField(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/chat/groupchat_screen.dart">
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:supa_carbon_icons/supa_carbon_icons.dart';
import 'package:whitenoise/domain/models/message_model.dart';
import 'package:whitenoise/ui/chat/widgets/chat_input.dart';
import 'package:whitenoise/ui/chat/widgets/contact_info.dart';
import 'package:whitenoise/ui/chat/widgets/message_widget.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_default_data.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reaction_hero_dialog_route.dart';
import 'package:whitenoise/ui/chat/widgets/reaction/reactions_dialog_widget.dart';
import 'package:whitenoise/ui/chat/widgets/status_message_item_widget.dart';
import '../core/themes/assets.dart';
import '../core/themes/colors.dart';
import '../../domain/dummy_data/dummy_messages.dart';
class GroupchatScreen extends StatefulWidget {
  const GroupchatScreen({super.key});
  @override
  State<GroupchatScreen> createState() => _ChatScreenState();
}
class _ChatScreenState extends State<GroupchatScreen> {
  late final List<MessageModel> _messages;
  void showEmojiBottomSheet({
    required MessageModel message,
  }) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SizedBox(
          height: 310,
          child: EmojiPicker(
            onEmojiSelected: ((category, emoji) {
              // pop the bottom sheet
              Navigator.pop(context);
              addReactionToMessage(
                message: message,
                reaction: emoji.emoji,
              );
            }),
          ),
        );
      },
    );
  }
  // add reaction to message
  void addReactionToMessage({
    required MessageModel message,
    required String reaction,
  }) {
    message.reactions.add(reaction);
    // update UI
    setState(() {});
  }
  void sendNewMessage(MessageModel newMessage){
    setState(() {
      _messages.insert(0,newMessage);
    });
  }
  @override
  void initState() {
    super.initState();
    _messages = List<MessageModel>.from(groupMessages);
  }
  @override
  void dispose() {
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: AppColors.colorE2E2E2,),
          onPressed: () {},
        ),
        title: const ContactInfo(title: "White Noise", imgPath: AssetsPaths.groupLogo,),
        actions: [
          GestureDetector(
            onTap: () => (),
            child: Container(margin: EdgeInsets.only(right: 15), child: Icon(CarbonIcons.search, color: AppColors.colorE2E2E2,) ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(
            left: 8.0,
            right: 8.0,
          ),
          child: Column(
            children: [
              Expanded(
                child: // list view builder for example messages
                ListView.builder(
                  reverse: true,
                  itemCount: _messages.length+1,
                  itemBuilder: (BuildContext context, int index) {
                    //get chatting user info
                    if(index == _messages.length){
                      return Container(
                        padding: EdgeInsets.only(left: 30, right: 30),
                        child: Column(
                          children: [
                            Gap(80),
                            CircleAvatar(
                              backgroundImage: AssetImage(AssetsPaths.groupLogo),
                              radius: 40,
                            ),
                            Gap(10),
                            Text('White Noise', style: TextStyle(color: AppColors.color202320, fontSize: 23),),
                            Gap(10),
                            Text('4 members', style: TextStyle(color: AppColors.grey2,),),
                            Gap(30),
                            StatusMessageItemWidget(icon:  CarbonIcons.group,highlightedContent:  "You", content: " created the group"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.email,highlightedContent:  "", content: "Invite sent to 4 people"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Marek", content: " accepted the invite"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.checkmark,highlightedContent:  "Max Harald", content: " accepted the invite"),
                            Gap(10),
                            StatusMessageItemWidget(icon:  CarbonIcons.close,highlightedContent:  "Fablof7z", content: " rejected the invite"),
                            Gap(30),
                          ],
                        ),
                      );
                    }else{
                      // get message
                      final message = _messages[index];
                      return GestureDetector(
                        // wrap your message widget with a [GestureDectector] or [InkWell]
                        onLongPress: () {
                          // navigate with a custom [HeroDialogRoute] to [ReactionsDialogWidget]
                          Navigator.of(context).push(
                            HeroDialogRoute(
                              builder: (context) {
                                return ReactionsDialogWidget(
                                  id: message.id, // unique id for message
                                  menuItems: message.isMe?DefaultData.myMessageMenuItems:DefaultData.menuItems,
                                  messageWidget: MessageWidget(
                                      isGroupMessage: true,
                                      message: message, messageIndex: index,), // message widget
                                  onReactionTap: (reaction) {
                                    if (reaction == '⋯') {//'➕'
                                      // show emoji picker container
                                      showEmojiBottomSheet(
                                        message: message,
                                      );
                                    } else {
                                      // add reaction to message
                                      addReactionToMessage(
                                        message: message,
                                        reaction: reaction,
                                      );
                                    }
                                  },
                                  onContextMenuTap: (menuItem) {
                                    print('menu item: $menuItem');
                                    // handle context menu item
                                  },
                                  // align widget to the right for my message and to the left for contact message
                                  // default is [Alignment.centerRight]
                                  widgetAlignment: message.isMe
                                      ? Alignment.centerRight
                                      : Alignment.centerLeft,
                                );
                              },
                            ),
                          );
                        },
                        // wrap message with [Hero] widget
                        child: Hero(
                          tag: message.id,
                          child: MessageWidget(message: message, isGroupMessage: true, messageIndex: index,),
                        ),
                      );
                    }
                  },
                ),
              ),
              // bottom chat input
              Padding(
                padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                child: ChatInput(padding: const EdgeInsets.all(0), onSend: sendNewMessage) // BottomChatField(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/ui/contact_list/chat_list_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
import 'package:whitenoise/domain/dummy_data/dummy_chats.dart';
import 'package:whitenoise/ui/contact_list/widgets/chat_list_appbar.dart';
import 'package:whitenoise/ui/contact_list/widgets/chat_list_tile.dart';
class ChatListScreen extends StatelessWidget {
  const ChatListScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: ChatListAppBar(),
      body: ColoredBox(
        color: AppColors.white,
        child: ListView.separated(
          padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 12.h),
          itemCount: dummyChats.length,
          itemBuilder: (context, index) {
            final chat = dummyChats[index];
            return ChatListTile(chat: chat);
          },
          separatorBuilder: (context, index) => Gap(8.h),
        ),
      ),
    );
  }
}
</file>

<file path="lib/routing/router.dart">
// Build the GoRouter here
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:whitenoise/routing/routes.dart';
import 'package:whitenoise/ui/chat/groupchat_screen.dart';
import '../ui/auth_flow/welcome_screen.dart';
import '../ui/chat/chat_screen.dart';
/// The route configuration.
final GoRouter router = GoRouter(
  routes: <RouteBase>[
    GoRoute(
      path: '/',
      builder: (BuildContext context, GoRouterState state) {
        return const WelcomeScreen();
      },
      routes: <RouteBase>[
        GoRoute(
          path: Routes.chats,
          builder: (BuildContext context, GoRouterState state) {
            //final id = state.pathParameters["id"]!; // Get "id" param from URL
            return ChatScreen();
          },
        ),
        GoRoute(
          path: Routes.newChat,
          builder: (BuildContext context, GoRouterState state) {
            return const GroupchatScreen();
          },
        ),
      ],
    ),
  ],
);
</file>

<file path="lib/routing/routes.dart">
abstract final class Routes {
  static const home = '/';
  // Auth
  static const login = '/login';
  // Chats
  static const chats = '/chats';
  static const chat = '/chats/:id';
  static const newChat = '/chats/new';
  // Contacts
  static const contacts = '/contacts';
  static const contact = '/contacts/:id';
  // Settings
  static const settings = '/settings';
  static const settingsProfile = '/settings/profile';
  static const settingsNetwork = '/settings/network';
  static const settingsKeys = '/settings/keys';
  static const settingsWallet = '/settings/wallet';
}
</file>

<file path="lib/ui/auth_flow/welcome_screen.dart">
import 'package:flutter/material.dart';
import 'package:whitenoise/ui/core/themes/assets.dart';
import 'package:whitenoise/ui/auth_flow/info_screen.dart';
import 'package:whitenoise/ui/auth_flow/login_screen.dart';
class WelcomeScreen extends StatelessWidget {
  const WelcomeScreen({super.key});
  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    return Scaffold(
      backgroundColor: Colors.white,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          SizedBox(
            height: screenHeight * 0.55,
            width: double.infinity,
            child: ShaderMask(
              shaderCallback: (Rect bounds) {
                return const LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Colors.black, Colors.transparent],
                  stops: [0.7, 1.0],
                ).createShader(bounds);
              },
              blendMode: BlendMode.dstIn,
              child: Image.asset(AssetsPaths.loginSplash, fit: BoxFit.cover),
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(24, 44, 24, 0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: const [
                Text(
                  'Welcome to',
                  style: TextStyle(fontSize: 24, color: Colors.black87),
                ),
                SizedBox(height: 4),
                Text(
                  'White Noise',
                  style: TextStyle(
                    fontSize: 42,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                ),
                SizedBox(height: 8),
                Text(
                  'Private messaging made easy.',
                  style: TextStyle(fontSize: 18, color: Colors.grey),
                ),
              ],
            ),
          ),
          const Spacer(),
          Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Center(
              child: TextButton(
                style: ButtonStyle(
                  splashFactory: NoSplash.splashFactory,
                  overlayColor: WidgetStateProperty.all(Colors.transparent),
                  padding: WidgetStateProperty.all(EdgeInsets.zero),
                ),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => const InfoScreen()),
                  );
                },
                child: const Text(
                  'Create a new profile',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.black,
                    decoration: TextDecoration.none,
                  ),
                ),
              ),
            ),
          ),
          Container(
            height: 96,
            width: double.infinity,
            color: Colors.black,
            padding: const EdgeInsets.only(top: 20),
            child: TextButton(
              style: ButtonStyle(
                splashFactory: NoSplash.splashFactory,
                overlayColor: WidgetStateProperty.all(Colors.transparent),
                padding: WidgetStateProperty.all(EdgeInsets.zero),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const LoginScreen()),
                );
              },
              child: const Align(
                alignment: Alignment.topCenter,
                child: Text(
                  'Sign in',
                  style: TextStyle(fontSize: 18, color: Colors.white),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/main.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:whitenoise/routing/router.dart';
import 'package:flutter/services.dart';
import 'package:whitenoise/ui/core/themes/colors.dart';
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  //await RustLib.init();
  runApp(ProviderScope(child: const MyApp()));
}
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    return ScreenUtilInit(
      designSize: width > 600 ? const Size(600, 1024) : const Size(390, 844),
      minTextAdapt: true,
      splitScreenMode: true,
      builder: (context, child) {
        return MaterialApp.router(
          title: 'White Noise',
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            fontFamily: 'OverusedGrotesk',
            appBarTheme: AppBarTheme(
              backgroundColor: AppColors.color202320, // Default AppBar color for the app
            ),
          ),
          routerConfig: router,
        );
      },
    );
  }
}
</file>

</files>
