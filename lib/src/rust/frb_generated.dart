// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api.dart';
import 'api/accounts.dart';
import 'api/error.dart';
import 'api/groups.dart';
import 'api/messages.dart';
import 'api/metadata.dart';
import 'api/relays.dart';
import 'api/users.dart';
import 'api/utils.dart';
import 'api/welcomes.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -292629470;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_whitenoise',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<ApiResult> crateApiWelcomesAcceptWelcome({
    required String pubkey,
    required String welcomeEventId,
  });

  Future<List<User>> crateApiAccountsAccountFollows({required String pubkey});

  Future<Event?> crateApiAccountsAccountKeyPackage({required String pubkey});

  Future<FlutterMetadata> crateApiAccountsAccountMetadata({
    required String pubkey,
  });

  Future<List<Relay>> crateApiAccountsAccountRelays({
    required String pubkey,
    required RelayType relayType,
  });

  Future<ApiResultVecGroup> crateApiGroupsActiveGroups({
    required String pubkey,
  });

  Future<void> crateApiAccountsAddAccountRelay({
    required String pubkey,
    required String url,
    required RelayType relayType,
  });

  Future<ApiResult> crateApiGroupsAddMembersToGroup({
    required String pubkey,
    required String groupId,
    required List<String> memberPubkeys,
  });

  Future<void> crateApiErrorApiErrorErrorType({required ApiError that});

  Future<void> crateApiErrorApiErrorMessage({required ApiError that});

  Future<ApiResultGroup> crateApiGroupsCreateGroup({
    required String creatorPubkey,
    required List<String> memberPubkeys,
    required List<String> adminPubkeys,
    required String groupName,
    required String groupDescription,
  });

  Future<Account> crateApiAccountsCreateIdentity();

  Future<WhitenoiseConfig> crateApiCreateWhitenoiseConfig({
    required String dataDir,
    required String logsDir,
  });

  Future<ApiResult> crateApiWelcomesDeclineWelcome({
    required String pubkey,
    required String welcomeEventId,
  });

  Future<ApiResult> crateApiDeleteAllData();

  Future<String> crateApiAccountsExportAccountNsec({required String pubkey});

  Future<ApiResultVecChatMessage>
  crateApiMessagesFetchAggregatedMessagesForGroup({
    required String pubkey,
    required String groupId,
  });

  Future<ApiResultVecStringString> crateApiRelaysFetchRelayStatus({
    required String pubkey,
  });

  Future<ApiResultWelcome> crateApiWelcomesFindWeclcomeByEventId({
    required String pubkey,
    required String welcomeEventId,
  });

  Future<void> crateApiAccountsFollowUser({
    required String accountPubkey,
    required String userToFollowPubkey,
  });

  Future<Account> crateApiAccountsGetAccount({required String pubkey});

  Future<List<Account>> crateApiAccountsGetAccounts();

  Future<List<Account>> crateApiAccountsGetAccountsWithApiError();

  Future<ApiResultAppSettings> crateApiGetAppSettings();

  Future<String> crateApiUtilsGetDefaultBlossomServerUrl();

  Future<ApiResultUser> crateApiUsersGetUser({required String pubkey});

  Future<ApiResultVecString> crateApiGroupsGroupAdmins({
    required String pubkey,
    required String groupId,
  });

  Future<ApiResultGroupType> crateApiGroupsGroupGroupType({
    required Group that,
  });

  Future<ApiResultGroupId> crateApiUtilsGroupIdFromString({
    required String groupId,
  });

  Future<String> crateApiUtilsGroupIdToString({required GroupId groupId});

  Future<ApiResultBool> crateApiGroupsGroupIsDirectMessageType({
    required Group that,
  });

  Future<ApiResultBool> crateApiGroupsGroupIsGroupType({required Group that});

  Future<ApiResultVecString> crateApiGroupsGroupMembers({
    required String pubkey,
    required String groupId,
  });

  Future<ApiResultString> crateApiUtilsHexPubkeyFromNpub({
    required String npub,
  });

  Future<ApiResultString> crateApiUtilsHexPubkeyFromPublicKey({
    required PublicKey publicKey,
  });

  Future<ApiResult> crateApiInitializeWhitenoise({
    required WhitenoiseConfig config,
  });

  Future<Account> crateApiAccountsLogin({required String nsecOrHexPrivkey});

  Future<void> crateApiAccountsLogout({required String pubkey});

  Future<ApiResultString> crateApiUtilsNpubFromHexPubkey({
    required String hexPubkey,
  });

  Future<ApiResultString> crateApiUtilsNpubFromPublicKey({
    required PublicKey publicKey,
  });

  Future<ApiResultVecWelcome> crateApiWelcomesPendingWelcomes({
    required String pubkey,
  });

  Future<RelayType> crateApiRelaysRelayTypeInbox();

  Future<RelayType> crateApiRelaysRelayTypeKeyPackage();

  Future<RelayType> crateApiRelaysRelayTypeNip65();

  Future<ApiResultRelayUrl> crateApiUtilsRelayUrlFromString({
    required String url,
  });

  Future<void> crateApiAccountsRemoveAccountRelay({
    required String pubkey,
    required String url,
    required RelayType relayType,
  });

  Future<ApiResult> crateApiGroupsRemoveMembersFromGroup({
    required String pubkey,
    required String groupId,
    required List<String> memberPubkeys,
  });

  Future<ApiResultMessageWithTokens> crateApiMessagesSendMessageToGroup({
    required String pubkey,
    required String groupId,
    required String message,
    required int kind,
    List<Tag>? tags,
  });

  Future<String> crateApiUtilsStringFromRelayUrl({required RelayUrl relayUrl});

  Future<ApiResultTag> crateApiUtilsTagFromVec({required List<String> vec});

  Future<void> crateApiAccountsUnfollowUser({
    required String accountPubkey,
    required String userToUnfollowPubkey,
  });

  Future<void> crateApiAccountsUpdateAccountMetadata({
    required String pubkey,
    required FlutterMetadata metadata,
  });

  Future<ApiResult> crateApiUpdateThemeMode({required ThemeMode themeMode});

  Future<String> crateApiAccountsUploadAccountProfilePicture({
    required String pubkey,
    required String serverUrl,
    required String filePath,
    required String imageType,
  });

  Future<ApiResultFlutterMetadata> crateApiUsersUserMetadata({
    required String pubkey,
  });

  Future<ApiResultVecRelay> crateApiUsersUserRelays({
    required String pubkey,
    required RelayType relayType,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResult;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ApiResultPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultAppSettings;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultAppSettings;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultAppSettingsPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultFlutterMetadata;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultFlutterMetadata;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultFlutterMetadataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroup;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultGroupPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroupId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroupId;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultGroupIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroupType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroupType;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultGroupTypePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultMessageWithTokens;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultMessageWithTokens;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultMessageWithTokensPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultRelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultRelayUrl;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultRelayUrlPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultStringPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultTag;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultTag;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ApiResultTagPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultUser;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultUser;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultUserPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecChatMessage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecChatMessage;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecChatMessagePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecGroup;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecGroupPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecRelay;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecRelay;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecRelayPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecStringPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecStringString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecStringString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecStringStringPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecWelcome;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecWelcome;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultVecWelcomePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultWelcome;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultWelcome;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultWelcomePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultBool;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultBool;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ApiResultBoolPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GroupId;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GroupId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PublicKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayType;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayTypePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayUrl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayUrlPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TagPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ThemeMode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ThemeMode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ThemeModePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ApiResult> crateApiWelcomesAcceptWelcome({
    required String pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWelcomesAcceptWelcomeConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesAcceptWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: 'accept_welcome',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<List<User>> crateApiAccountsAccountFollows({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_user,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsAccountFollowsConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsAccountFollowsConstMeta =>
      const TaskConstMeta(
        debugName: 'account_follows',
        argNames: ['pubkey'],
      );

  @override
  Future<Event?> crateApiAccountsAccountKeyPackage({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsAccountKeyPackageConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsAccountKeyPackageConstMeta =>
      const TaskConstMeta(
        debugName: 'account_key_package',
        argNames: ['pubkey'],
      );

  @override
  Future<FlutterMetadata> crateApiAccountsAccountMetadata({
    required String pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_flutter_metadata,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsAccountMetadataConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsAccountMetadataConstMeta =>
      const TaskConstMeta(
        debugName: 'account_metadata',
        argNames: ['pubkey'],
      );

  @override
  Future<List<Relay>> crateApiAccountsAccountRelays({
    required String pubkey,
    required RelayType relayType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_relay,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsAccountRelaysConstMeta,
        argValues: [pubkey, relayType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsAccountRelaysConstMeta =>
      const TaskConstMeta(
        debugName: 'account_relays',
        argNames: ['pubkey', 'relayType'],
      );

  @override
  Future<ApiResultVecGroup> crateApiGroupsActiveGroups({
    required String pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsActiveGroupsConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsActiveGroupsConstMeta => const TaskConstMeta(
    debugName: 'active_groups',
    argNames: ['pubkey'],
  );

  @override
  Future<void> crateApiAccountsAddAccountRelay({
    required String pubkey,
    required String url,
    required RelayType relayType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(url, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsAddAccountRelayConstMeta,
        argValues: [pubkey, url, relayType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsAddAccountRelayConstMeta =>
      const TaskConstMeta(
        debugName: 'add_account_relay',
        argNames: ['pubkey', 'url', 'relayType'],
      );

  @override
  Future<ApiResult> crateApiGroupsAddMembersToGroup({
    required String pubkey,
    required String groupId,
    required List<String> memberPubkeys,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          sse_encode_list_String(memberPubkeys, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsAddMembersToGroupConstMeta,
        argValues: [pubkey, groupId, memberPubkeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsAddMembersToGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'add_members_to_group',
        argNames: ['pubkey', 'groupId', 'memberPubkeys'],
      );

  @override
  Future<void> crateApiErrorApiErrorErrorType({required ApiError that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_api_error(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiErrorApiErrorErrorTypeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiErrorApiErrorErrorTypeConstMeta =>
      const TaskConstMeta(
        debugName: 'api_error_error_type',
        argNames: ['that'],
      );

  @override
  Future<void> crateApiErrorApiErrorMessage({required ApiError that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_api_error(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiErrorApiErrorMessageConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiErrorApiErrorMessageConstMeta =>
      const TaskConstMeta(
        debugName: 'api_error_message',
        argNames: ['that'],
      );

  @override
  Future<ApiResultGroup> crateApiGroupsCreateGroup({
    required String creatorPubkey,
    required List<String> memberPubkeys,
    required List<String> adminPubkeys,
    required String groupName,
    required String groupDescription,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(creatorPubkey, serializer);
          sse_encode_list_String(memberPubkeys, serializer);
          sse_encode_list_String(adminPubkeys, serializer);
          sse_encode_String(groupName, serializer);
          sse_encode_String(groupDescription, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsCreateGroupConstMeta,
        argValues: [
          creatorPubkey,
          memberPubkeys,
          adminPubkeys,
          groupName,
          groupDescription,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsCreateGroupConstMeta => const TaskConstMeta(
    debugName: 'create_group',
    argNames: [
      'creatorPubkey',
      'memberPubkeys',
      'adminPubkeys',
      'groupName',
      'groupDescription',
    ],
  );

  @override
  Future<Account> crateApiAccountsCreateIdentity() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_account,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsCreateIdentityConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsCreateIdentityConstMeta =>
      const TaskConstMeta(
        debugName: 'create_identity',
        argNames: [],
      );

  @override
  Future<WhitenoiseConfig> crateApiCreateWhitenoiseConfig({
    required String dataDir,
    required String logsDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dataDir, serializer);
          sse_encode_String(logsDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_whitenoise_config,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCreateWhitenoiseConfigConstMeta,
        argValues: [dataDir, logsDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCreateWhitenoiseConfigConstMeta =>
      const TaskConstMeta(
        debugName: 'create_whitenoise_config',
        argNames: ['dataDir', 'logsDir'],
      );

  @override
  Future<ApiResult> crateApiWelcomesDeclineWelcome({
    required String pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWelcomesDeclineWelcomeConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesDeclineWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: 'decline_welcome',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<ApiResult> crateApiDeleteAllData() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeleteAllDataConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeleteAllDataConstMeta => const TaskConstMeta(
    debugName: 'delete_all_data',
    argNames: [],
  );

  @override
  Future<String> crateApiAccountsExportAccountNsec({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsExportAccountNsecConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsExportAccountNsecConstMeta =>
      const TaskConstMeta(
        debugName: 'export_account_nsec',
        argNames: ['pubkey'],
      );

  @override
  Future<ApiResultVecChatMessage>
  crateApiMessagesFetchAggregatedMessagesForGroup({
    required String pubkey,
    required String groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMessagesFetchAggregatedMessagesForGroupConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesFetchAggregatedMessagesForGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_aggregated_messages_for_group',
        argNames: ['pubkey', 'groupId'],
      );

  @override
  Future<ApiResultVecStringString> crateApiRelaysFetchRelayStatus({
    required String pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysFetchRelayStatusConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysFetchRelayStatusConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_relay_status',
        argNames: ['pubkey'],
      );

  @override
  Future<ApiResultWelcome> crateApiWelcomesFindWeclcomeByEventId({
    required String pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWelcomesFindWeclcomeByEventIdConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesFindWeclcomeByEventIdConstMeta =>
      const TaskConstMeta(
        debugName: 'find_weclcome_by_event_id',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<void> crateApiAccountsFollowUser({
    required String accountPubkey,
    required String userToFollowPubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(accountPubkey, serializer);
          sse_encode_String(userToFollowPubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsFollowUserConstMeta,
        argValues: [accountPubkey, userToFollowPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsFollowUserConstMeta => const TaskConstMeta(
    debugName: 'follow_user',
    argNames: ['accountPubkey', 'userToFollowPubkey'],
  );

  @override
  Future<Account> crateApiAccountsGetAccount({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_account,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsGetAccountConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsGetAccountConstMeta => const TaskConstMeta(
    debugName: 'get_account',
    argNames: ['pubkey'],
  );

  @override
  Future<List<Account>> crateApiAccountsGetAccounts() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_account,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsGetAccountsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsGetAccountsConstMeta =>
      const TaskConstMeta(
        debugName: 'get_accounts',
        argNames: [],
      );

  @override
  Future<List<Account>> crateApiAccountsGetAccountsWithApiError() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_account,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsGetAccountsWithApiErrorConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsGetAccountsWithApiErrorConstMeta =>
      const TaskConstMeta(
        debugName: 'get_accounts_with_api_error',
        argNames: [],
      );

  @override
  Future<ApiResultAppSettings> crateApiGetAppSettings() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGetAppSettingsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGetAppSettingsConstMeta => const TaskConstMeta(
    debugName: 'get_app_settings',
    argNames: [],
  );

  @override
  Future<String> crateApiUtilsGetDefaultBlossomServerUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsGetDefaultBlossomServerUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsGetDefaultBlossomServerUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'get_default_blossom_server_url',
        argNames: [],
      );

  @override
  Future<ApiResultUser> crateApiUsersGetUser({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUsersGetUserConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUsersGetUserConstMeta => const TaskConstMeta(
    debugName: 'get_user',
    argNames: ['pubkey'],
  );

  @override
  Future<ApiResultVecString> crateApiGroupsGroupAdmins({
    required String pubkey,
    required String groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupAdminsConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupAdminsConstMeta => const TaskConstMeta(
    debugName: 'group_admins',
    argNames: ['pubkey', 'groupId'],
  );

  @override
  Future<ApiResultGroupType> crateApiGroupsGroupGroupType({
    required Group that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_group(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupGroupTypeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupGroupTypeConstMeta =>
      const TaskConstMeta(
        debugName: 'group_group_type',
        argNames: ['that'],
      );

  @override
  Future<ApiResultGroupId> crateApiUtilsGroupIdFromString({
    required String groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(groupId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsGroupIdFromStringConstMeta,
        argValues: [groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsGroupIdFromStringConstMeta =>
      const TaskConstMeta(
        debugName: 'group_id_from_string',
        argNames: ['groupId'],
      );

  @override
  Future<String> crateApiUtilsGroupIdToString({required GroupId groupId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsGroupIdToStringConstMeta,
        argValues: [groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsGroupIdToStringConstMeta =>
      const TaskConstMeta(
        debugName: 'group_id_to_string',
        argNames: ['groupId'],
      );

  @override
  Future<ApiResultBool> crateApiGroupsGroupIsDirectMessageType({
    required Group that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_group(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupIsDirectMessageTypeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupIsDirectMessageTypeConstMeta =>
      const TaskConstMeta(
        debugName: 'group_is_direct_message_type',
        argNames: ['that'],
      );

  @override
  Future<ApiResultBool> crateApiGroupsGroupIsGroupType({required Group that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_group(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupIsGroupTypeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupIsGroupTypeConstMeta =>
      const TaskConstMeta(
        debugName: 'group_is_group_type',
        argNames: ['that'],
      );

  @override
  Future<ApiResultVecString> crateApiGroupsGroupMembers({
    required String pubkey,
    required String groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupMembersConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupMembersConstMeta => const TaskConstMeta(
    debugName: 'group_members',
    argNames: ['pubkey', 'groupId'],
  );

  @override
  Future<ApiResultString> crateApiUtilsHexPubkeyFromNpub({
    required String npub,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(npub, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsHexPubkeyFromNpubConstMeta,
        argValues: [npub],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsHexPubkeyFromNpubConstMeta =>
      const TaskConstMeta(
        debugName: 'hex_pubkey_from_npub',
        argNames: ['npub'],
      );

  @override
  Future<ApiResultString> crateApiUtilsHexPubkeyFromPublicKey({
    required PublicKey publicKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            publicKey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsHexPubkeyFromPublicKeyConstMeta,
        argValues: [publicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsHexPubkeyFromPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: 'hex_pubkey_from_public_key',
        argNames: ['publicKey'],
      );

  @override
  Future<ApiResult> crateApiInitializeWhitenoise({
    required WhitenoiseConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_whitenoise_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitializeWhitenoiseConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeWhitenoiseConstMeta =>
      const TaskConstMeta(
        debugName: 'initialize_whitenoise',
        argNames: ['config'],
      );

  @override
  Future<Account> crateApiAccountsLogin({required String nsecOrHexPrivkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(nsecOrHexPrivkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_account,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsLoginConstMeta,
        argValues: [nsecOrHexPrivkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsLoginConstMeta => const TaskConstMeta(
    debugName: 'login',
    argNames: ['nsecOrHexPrivkey'],
  );

  @override
  Future<void> crateApiAccountsLogout({required String pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsLogoutConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsLogoutConstMeta => const TaskConstMeta(
    debugName: 'logout',
    argNames: ['pubkey'],
  );

  @override
  Future<ApiResultString> crateApiUtilsNpubFromHexPubkey({
    required String hexPubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hexPubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsNpubFromHexPubkeyConstMeta,
        argValues: [hexPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsNpubFromHexPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: 'npub_from_hex_pubkey',
        argNames: ['hexPubkey'],
      );

  @override
  Future<ApiResultString> crateApiUtilsNpubFromPublicKey({
    required PublicKey publicKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            publicKey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsNpubFromPublicKeyConstMeta,
        argValues: [publicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsNpubFromPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: 'npub_from_public_key',
        argNames: ['publicKey'],
      );

  @override
  Future<ApiResultVecWelcome> crateApiWelcomesPendingWelcomes({
    required String pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWelcomesPendingWelcomesConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesPendingWelcomesConstMeta =>
      const TaskConstMeta(
        debugName: 'pending_welcomes',
        argNames: ['pubkey'],
      );

  @override
  Future<RelayType> crateApiRelaysRelayTypeInbox() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeInboxConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeInboxConstMeta =>
      const TaskConstMeta(
        debugName: 'relay_type_inbox',
        argNames: [],
      );

  @override
  Future<RelayType> crateApiRelaysRelayTypeKeyPackage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeKeyPackageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeKeyPackageConstMeta =>
      const TaskConstMeta(
        debugName: 'relay_type_key_package',
        argNames: [],
      );

  @override
  Future<RelayType> crateApiRelaysRelayTypeNip65() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeNip65ConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeNip65ConstMeta =>
      const TaskConstMeta(
        debugName: 'relay_type_nip65',
        argNames: [],
      );

  @override
  Future<ApiResultRelayUrl> crateApiUtilsRelayUrlFromString({
    required String url,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsRelayUrlFromStringConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsRelayUrlFromStringConstMeta =>
      const TaskConstMeta(
        debugName: 'relay_url_from_string',
        argNames: ['url'],
      );

  @override
  Future<void> crateApiAccountsRemoveAccountRelay({
    required String pubkey,
    required String url,
    required RelayType relayType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(url, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsRemoveAccountRelayConstMeta,
        argValues: [pubkey, url, relayType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsRemoveAccountRelayConstMeta =>
      const TaskConstMeta(
        debugName: 'remove_account_relay',
        argNames: ['pubkey', 'url', 'relayType'],
      );

  @override
  Future<ApiResult> crateApiGroupsRemoveMembersFromGroup({
    required String pubkey,
    required String groupId,
    required List<String> memberPubkeys,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          sse_encode_list_String(memberPubkeys, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsRemoveMembersFromGroupConstMeta,
        argValues: [pubkey, groupId, memberPubkeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsRemoveMembersFromGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'remove_members_from_group',
        argNames: ['pubkey', 'groupId', 'memberPubkeys'],
      );

  @override
  Future<ApiResultMessageWithTokens> crateApiMessagesSendMessageToGroup({
    required String pubkey,
    required String groupId,
    required String message,
    required int kind,
    List<Tag>? tags,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(groupId, serializer);
          sse_encode_String(message, serializer);
          sse_encode_u_16(kind, serializer);
          sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
            tags,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMessagesSendMessageToGroupConstMeta,
        argValues: [pubkey, groupId, message, kind, tags],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesSendMessageToGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'send_message_to_group',
        argNames: ['pubkey', 'groupId', 'message', 'kind', 'tags'],
      );

  @override
  Future<String> crateApiUtilsStringFromRelayUrl({required RelayUrl relayUrl}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
            relayUrl,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsStringFromRelayUrlConstMeta,
        argValues: [relayUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsStringFromRelayUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'string_from_relay_url',
        argNames: ['relayUrl'],
      );

  @override
  Future<ApiResultTag> crateApiUtilsTagFromVec({required List<String> vec}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(vec, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsTagFromVecConstMeta,
        argValues: [vec],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsTagFromVecConstMeta => const TaskConstMeta(
    debugName: 'tag_from_vec',
    argNames: ['vec'],
  );

  @override
  Future<void> crateApiAccountsUnfollowUser({
    required String accountPubkey,
    required String userToUnfollowPubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(accountPubkey, serializer);
          sse_encode_String(userToUnfollowPubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsUnfollowUserConstMeta,
        argValues: [accountPubkey, userToUnfollowPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsUnfollowUserConstMeta =>
      const TaskConstMeta(
        debugName: 'unfollow_user',
        argNames: ['accountPubkey', 'userToUnfollowPubkey'],
      );

  @override
  Future<void> crateApiAccountsUpdateAccountMetadata({
    required String pubkey,
    required FlutterMetadata metadata,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_box_autoadd_flutter_metadata(metadata, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 52,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsUpdateAccountMetadataConstMeta,
        argValues: [pubkey, metadata],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsUpdateAccountMetadataConstMeta =>
      const TaskConstMeta(
        debugName: 'update_account_metadata',
        argNames: ['pubkey', 'metadata'],
      );

  @override
  Future<ApiResult> crateApiUpdateThemeMode({required ThemeMode themeMode}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
            themeMode,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 53,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUpdateThemeModeConstMeta,
        argValues: [themeMode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUpdateThemeModeConstMeta => const TaskConstMeta(
    debugName: 'update_theme_mode',
    argNames: ['themeMode'],
  );

  @override
  Future<String> crateApiAccountsUploadAccountProfilePicture({
    required String pubkey,
    required String serverUrl,
    required String filePath,
    required String imageType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_String(serverUrl, serializer);
          sse_encode_String(filePath, serializer);
          sse_encode_String(imageType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 54,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_api_error,
        ),
        constMeta: kCrateApiAccountsUploadAccountProfilePictureConstMeta,
        argValues: [pubkey, serverUrl, filePath, imageType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsUploadAccountProfilePictureConstMeta =>
      const TaskConstMeta(
        debugName: 'upload_account_profile_picture',
        argNames: ['pubkey', 'serverUrl', 'filePath', 'imageType'],
      );

  @override
  Future<ApiResultFlutterMetadata> crateApiUsersUserMetadata({
    required String pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 55,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUsersUserMetadataConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUsersUserMetadataConstMeta => const TaskConstMeta(
    debugName: 'user_metadata',
    argNames: ['pubkey'],
  );

  @override
  Future<ApiResultVecRelay> crateApiUsersUserRelays({
    required String pubkey,
    required RelayType relayType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pubkey, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 56,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUsersUserRelaysConstMeta,
        argValues: [pubkey, relayType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUsersUserRelaysConstMeta => const TaskConstMeta(
    debugName: 'user_relays',
    argNames: ['pubkey', 'relayType'],
  );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResult =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResult =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultAppSettings =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultAppSettings =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultFlutterMetadata =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultFlutterMetadata =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroup =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroup =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroupId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroupId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultGroupType =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultGroupType =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultMessageWithTokens =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultMessageWithTokens =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultRelayUrl =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultRelayUrl =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultString =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultString =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultTag =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultTag =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultUser =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultUser =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecChatMessage =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecChatMessage =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecGroup =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecGroup =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecRelay =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecRelay =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecString =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecString =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecStringString =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecStringString =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultVecWelcome =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultVecWelcome =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultWelcome =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultWelcome =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ApiResultBool =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ApiResultBool =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayType =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayType =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayUrl =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayUrl =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ThemeMode =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ThemeMode =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode;

  @protected
  ApiResult
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultAppSettings
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultAppSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultFlutterMetadata
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultFlutterMetadataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultGroup
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultGroupId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultGroupType
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultMessageWithTokens
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultMessageWithTokensImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultRelayUrl
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultRelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultTag
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultTagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultUser
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecChatMessage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecChatMessageImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultVecGroup
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecRelay
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecRelayImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecStringString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecStringStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultVecWelcome
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecWelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultWelcome
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultWelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultBool
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultBoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayType
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ThemeMode
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThemeModeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayUrl
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ApiResult
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultAppSettings
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultAppSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultFlutterMetadata
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultFlutterMetadataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultGroup
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultGroupId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultGroupType
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultGroupTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultMessageWithTokens
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultMessageWithTokensImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultRelayUrl
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultRelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultTag
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultTagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultUser
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecChatMessage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecChatMessageImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultVecGroup
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecRelay
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecRelayImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultVecStringString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecStringStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ApiResultVecWelcome
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultVecWelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultWelcome
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultWelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiResultBool
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiResultBoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayType
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayUrl
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ThemeMode
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThemeModeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Account dco_decode_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Account(
      pubkey: dco_decode_String(arr[0]),
      lastSyncedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[1]),
      createdAt: dco_decode_Chrono_Utc(arr[2]),
      updatedAt: dco_decode_Chrono_Utc(arr[3]),
    );
  }

  @protected
  ApiError dco_decode_api_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiError_Whitenoise(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return ApiError_InvalidKey(
          message: dco_decode_String(raw[1]),
        );
      case 2:
        return ApiError_NostrUrl(
          message: dco_decode_String(raw[1]),
        );
      case 3:
        return ApiError_NostrTag(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return ApiError_NostrEvent(
          message: dco_decode_String(raw[1]),
        );
      case 5:
        return ApiError_NostrParse(
          message: dco_decode_String(raw[1]),
        );
      case 6:
        return ApiError_NostrHex(
          message: dco_decode_String(raw[1]),
        );
      case 7:
        return ApiError_Other(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  Event
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      raw,
    );
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  ApiError dco_decode_box_autoadd_api_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_error(raw);
  }

  @protected
  FlutterMetadata dco_decode_box_autoadd_flutter_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_metadata(raw);
  }

  @protected
  Group dco_decode_box_autoadd_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_group(raw);
  }

  @protected
  WhitenoiseConfig dco_decode_box_autoadd_whitenoise_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_whitenoise_config(raw);
  }

  @protected
  FlutterMetadata dco_decode_flutter_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return FlutterMetadata(
      name: dco_decode_opt_String(arr[0]),
      displayName: dco_decode_opt_String(arr[1]),
      about: dco_decode_opt_String(arr[2]),
      picture: dco_decode_opt_String(arr[3]),
      banner: dco_decode_opt_String(arr[4]),
      website: dco_decode_opt_String(arr[5]),
      nip05: dco_decode_opt_String(arr[6]),
      lud06: dco_decode_opt_String(arr[7]),
      lud16: dco_decode_opt_String(arr[8]),
      custom: dco_decode_Map_String_String_None(arr[9]),
    );
  }

  @protected
  Group dco_decode_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Group(
      mlsGroupId: dco_decode_String(arr[0]),
      nostrGroupId: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      description: dco_decode_String(arr[3]),
      imageUrl: dco_decode_opt_String(arr[4]),
      imageKey: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      adminPubkeys: dco_decode_list_String(arr[6]),
      lastMessageId: dco_decode_opt_String(arr[7]),
      lastMessageAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[8]),
      epoch: dco_decode_u_64(arr[9]),
      state: dco_decode_group_state(arr[10]),
    );
  }

  @protected
  GroupState dco_decode_group_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupState.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Tag>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Account> dco_decode_list_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Relay> dco_decode_list_relay(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_relay).toList();
  }

  @protected
  List<User> dco_decode_list_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_user).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Event?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
          raw,
        );
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  List<Tag>?
  dco_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
          raw,
        );
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Relay dco_decode_relay(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Relay(
      url: dco_decode_String(arr[0]),
      createdAt: dco_decode_Chrono_Utc(arr[1]),
      updatedAt: dco_decode_Chrono_Utc(arr[2]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  User dco_decode_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return User(
      pubkey: dco_decode_String(arr[0]),
      metadata: dco_decode_flutter_metadata(arr[1]),
      createdAt: dco_decode_Chrono_Utc(arr[2]),
      updatedAt: dco_decode_Chrono_Utc(arr[3]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WhitenoiseConfig dco_decode_whitenoise_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WhitenoiseConfig(
      dataDir: dco_decode_String(arr[0]),
      logsDir: dco_decode_String(arr[1]),
    );
  }

  @protected
  ApiResult
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultAppSettings
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultAppSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultFlutterMetadata
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultFlutterMetadataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroup
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroupId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroupType
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultMessageWithTokens
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultMessageWithTokensImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultRelayUrl
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultRelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultTag
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultTagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultUser
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultUserImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecChatMessage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecChatMessageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecGroup
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecRelay
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecRelayImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecStringString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecStringStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecWelcome
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecWelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultWelcome
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultWelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultBool
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultBoolImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Event
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayType
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Tag
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ThemeMode
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThemeModeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayUrl
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ApiResult
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultAppSettings
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultAppSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultFlutterMetadata
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultFlutterMetadataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroup
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroupId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultGroupType
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultGroupTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultMessageWithTokens
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultMessageWithTokensImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultRelayUrl
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultRelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultTag
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultTagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultUser
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultUserImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecChatMessage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecChatMessageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecGroup
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecRelay
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecRelayImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecStringString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecStringStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultVecWelcome
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultVecWelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultWelcome
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultWelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ApiResultBool
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiResultBoolImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Event
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayType
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayUrl
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Tag
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ThemeMode
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThemeModeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Account sse_decode_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_pubkey = sse_decode_String(deserializer);
    final var_lastSyncedAt = sse_decode_opt_box_autoadd_Chrono_Utc(
      deserializer,
    );
    final var_createdAt = sse_decode_Chrono_Utc(deserializer);
    final var_updatedAt = sse_decode_Chrono_Utc(deserializer);
    return Account(
      pubkey: var_pubkey,
      lastSyncedAt: var_lastSyncedAt,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  ApiError sse_decode_api_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        final var_message = sse_decode_String(deserializer);
        return ApiError_Whitenoise(message: var_message);
      case 1:
        final var_message = sse_decode_String(deserializer);
        return ApiError_InvalidKey(message: var_message);
      case 2:
        final var_message = sse_decode_String(deserializer);
        return ApiError_NostrUrl(message: var_message);
      case 3:
        final var_message = sse_decode_String(deserializer);
        return ApiError_NostrTag(message: var_message);
      case 4:
        final var_message = sse_decode_String(deserializer);
        return ApiError_NostrEvent(message: var_message);
      case 5:
        final var_message = sse_decode_String(deserializer);
        return ApiError_NostrParse(message: var_message);
      case 6:
        final var_message = sse_decode_String(deserializer);
        return ApiError_NostrHex(message: var_message);
      case 7:
        final var_message = sse_decode_String(deserializer);
        return ApiError_Other(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Event
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      deserializer,
    ));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  ApiError sse_decode_box_autoadd_api_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_error(deserializer));
  }

  @protected
  FlutterMetadata sse_decode_box_autoadd_flutter_metadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_metadata(deserializer));
  }

  @protected
  Group sse_decode_box_autoadd_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_group(deserializer));
  }

  @protected
  WhitenoiseConfig sse_decode_box_autoadd_whitenoise_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_whitenoise_config(deserializer));
  }

  @protected
  FlutterMetadata sse_decode_flutter_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_opt_String(deserializer);
    final var_displayName = sse_decode_opt_String(deserializer);
    final var_about = sse_decode_opt_String(deserializer);
    final var_picture = sse_decode_opt_String(deserializer);
    final var_banner = sse_decode_opt_String(deserializer);
    final var_website = sse_decode_opt_String(deserializer);
    final var_nip05 = sse_decode_opt_String(deserializer);
    final var_lud06 = sse_decode_opt_String(deserializer);
    final var_lud16 = sse_decode_opt_String(deserializer);
    final var_custom = sse_decode_Map_String_String_None(deserializer);
    return FlutterMetadata(
      name: var_name,
      displayName: var_displayName,
      about: var_about,
      picture: var_picture,
      banner: var_banner,
      website: var_website,
      nip05: var_nip05,
      lud06: var_lud06,
      lud16: var_lud16,
      custom: var_custom,
    );
  }

  @protected
  Group sse_decode_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_mlsGroupId = sse_decode_String(deserializer);
    final var_nostrGroupId = sse_decode_String(deserializer);
    final var_name = sse_decode_String(deserializer);
    final var_description = sse_decode_String(deserializer);
    final var_imageUrl = sse_decode_opt_String(deserializer);
    final var_imageKey = sse_decode_opt_list_prim_u_8_strict(deserializer);
    final var_adminPubkeys = sse_decode_list_String(deserializer);
    final var_lastMessageId = sse_decode_opt_String(deserializer);
    final var_lastMessageAt = sse_decode_opt_box_autoadd_Chrono_Utc(
      deserializer,
    );
    final var_epoch = sse_decode_u_64(deserializer);
    final var_state = sse_decode_group_state(deserializer);
    return Group(
      mlsGroupId: var_mlsGroupId,
      nostrGroupId: var_nostrGroupId,
      name: var_name,
      description: var_description,
      imageUrl: var_imageUrl,
      imageKey: var_imageKey,
      adminPubkeys: var_adminPubkeys,
      lastMessageId: var_lastMessageId,
      lastMessageAt: var_lastMessageAt,
      epoch: var_epoch,
      state: var_state,
    );
  }

  @protected
  GroupState sse_decode_group_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return GroupState.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Tag>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Account> sse_decode_list_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Account>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Relay> sse_decode_list_relay(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Relay>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_relay(deserializer));
    }
    return ans_;
  }

  @protected
  List<User> sse_decode_list_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <User>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_user(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Event?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Tag>?
  sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Relay sse_decode_relay(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_url = sse_decode_String(deserializer);
    final var_createdAt = sse_decode_Chrono_Utc(deserializer);
    final var_updatedAt = sse_decode_Chrono_Utc(deserializer);
    return Relay(
      url: var_url,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  User sse_decode_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_pubkey = sse_decode_String(deserializer);
    final var_metadata = sse_decode_flutter_metadata(deserializer);
    final var_createdAt = sse_decode_Chrono_Utc(deserializer);
    final var_updatedAt = sse_decode_Chrono_Utc(deserializer);
    return User(
      pubkey: var_pubkey,
      metadata: var_metadata,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WhitenoiseConfig sse_decode_whitenoise_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_dataDir = sse_decode_String(deserializer);
    final var_logsDir = sse_decode_String(deserializer);
    return WhitenoiseConfig(dataDir: var_dataDir, logsDir: var_logsDir);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    ApiResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    ApiResultAppSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultAppSettingsImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    ApiResultFlutterMetadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultFlutterMetadataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    ApiResultGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    ApiResultGroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    ApiResultGroupType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupTypeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    ApiResultMessageWithTokens self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultMessageWithTokensImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    ApiResultRelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultRelayUrlImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    ApiResultString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultStringImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    ApiResultTag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultTagImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    ApiResultUser self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultUserImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    ApiResultVecChatMessage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecChatMessageImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    ApiResultVecGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecGroupImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    ApiResultVecRelay self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecRelayImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    ApiResultVecString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecStringImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    ApiResultVecStringString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecStringStringImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    ApiResultVecWelcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecWelcomeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    ApiResultWelcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultWelcomeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    ApiResultBool self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultBoolImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    RelayType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayTypeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    Tag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TagImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    ThemeMode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThemeModeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    GroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    RelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayUrlImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
      PlatformInt64Util.from(self.microsecondsSinceEpoch),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResult(
    ApiResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultAppSettings(
    ApiResultAppSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultAppSettingsImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultFlutterMetadata(
    ApiResultFlutterMetadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultFlutterMetadataImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroup(
    ApiResultGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupId(
    ApiResultGroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupIdImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultGroupType(
    ApiResultGroupType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultGroupTypeImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultMessageWithTokens(
    ApiResultMessageWithTokens self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultMessageWithTokensImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultRelayUrl(
    ApiResultRelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultRelayUrlImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultString(
    ApiResultString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultStringImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultTag(
    ApiResultTag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultTagImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultUser(
    ApiResultUser self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultUserImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecChatMessage(
    ApiResultVecChatMessage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecChatMessageImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecGroup(
    ApiResultVecGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecGroupImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecRelay(
    ApiResultVecRelay self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecRelayImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecString(
    ApiResultVecString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecStringImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecStringString(
    ApiResultVecStringString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecStringStringImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultVecWelcome(
    ApiResultVecWelcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultVecWelcomeImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultWelcome(
    ApiResultWelcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultWelcomeImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiResultbool(
    ApiResultBool self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ApiResultBoolImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as EventImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    GroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as GroupIdImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicKeyImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    RelayType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayTypeImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    RelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RelayUrlImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    Tag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as TagImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThemeMode(
    ThemeMode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThemeModeImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pubkey, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.lastSyncedAt, serializer);
    sse_encode_Chrono_Utc(self.createdAt, serializer);
    sse_encode_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_api_error(ApiError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiError_Whitenoise(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case ApiError_InvalidKey(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_String(message, serializer);
      case ApiError_NostrUrl(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
      case ApiError_NostrTag(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case ApiError_NostrEvent(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
      case ApiError_NostrParse(message: final message):
        sse_encode_i_32(5, serializer);
        sse_encode_String(message, serializer);
      case ApiError_NostrHex(message: final message):
        sse_encode_i_32(6, serializer);
        sse_encode_String(message, serializer);
      case ApiError_Other(message: final message):
        sse_encode_i_32(7, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
    DateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_error(
    ApiError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flutter_metadata(
    FlutterMetadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_group(Group self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_group(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_whitenoise_config(
    WhitenoiseConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_whitenoise_config(self, serializer);
  }

  @protected
  void sse_encode_flutter_metadata(
    FlutterMetadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_opt_String(self.about, serializer);
    sse_encode_opt_String(self.picture, serializer);
    sse_encode_opt_String(self.banner, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.nip05, serializer);
    sse_encode_opt_String(self.lud06, serializer);
    sse_encode_opt_String(self.lud16, serializer);
    sse_encode_Map_String_String_None(self.custom, serializer);
  }

  @protected
  void sse_encode_group(Group self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mlsGroupId, serializer);
    sse_encode_String(self.nostrGroupId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_opt_String(self.imageUrl, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.imageKey, serializer);
    sse_encode_list_String(self.adminPubkeys, serializer);
    sse_encode_opt_String(self.lastMessageId, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.lastMessageAt, serializer);
    sse_encode_u_64(self.epoch, serializer);
    sse_encode_group_state(self.state, serializer);
  }

  @protected
  void sse_encode_group_state(GroupState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    List<Tag> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account(List<Account> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_relay(List<Relay> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_relay(item, serializer);
    }
  }

  @protected
  void sse_encode_list_user(List<User> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_user(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
    DateTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    List<Tag>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_relay(Relay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_Chrono_Utc(self.createdAt, serializer);
    sse_encode_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pubkey, serializer);
    sse_encode_flutter_metadata(self.metadata, serializer);
    sse_encode_Chrono_Utc(self.createdAt, serializer);
    sse_encode_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_whitenoise_config(
    WhitenoiseConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dataDir, serializer);
    sse_encode_String(self.logsDir, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ApiResultAppSettingsImpl extends RustOpaque
    implements ApiResultAppSettings {
  // Not to be used by end users
  ApiResultAppSettingsImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultAppSettingsImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultAppSettings,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultAppSettings,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultAppSettingsPtr,
  );
}

@sealed
class ApiResultBoolImpl extends RustOpaque implements ApiResultBool {
  // Not to be used by end users
  ApiResultBoolImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultBoolImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultBool,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultBool,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultBoolPtr,
  );
}

@sealed
class ApiResultFlutterMetadataImpl extends RustOpaque
    implements ApiResultFlutterMetadata {
  // Not to be used by end users
  ApiResultFlutterMetadataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultFlutterMetadataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultFlutterMetadata,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultFlutterMetadata,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultFlutterMetadataPtr,
  );
}

@sealed
class ApiResultGroupIdImpl extends RustOpaque implements ApiResultGroupId {
  // Not to be used by end users
  ApiResultGroupIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultGroupIdImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultGroupId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultGroupId,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultGroupIdPtr,
  );
}

@sealed
class ApiResultGroupImpl extends RustOpaque implements ApiResultGroup {
  // Not to be used by end users
  ApiResultGroupImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultGroupImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultGroup,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultGroup,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultGroupPtr,
  );
}

@sealed
class ApiResultGroupTypeImpl extends RustOpaque implements ApiResultGroupType {
  // Not to be used by end users
  ApiResultGroupTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultGroupTypeImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultGroupType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultGroupType,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultGroupTypePtr,
  );
}

@sealed
class ApiResultImpl extends RustOpaque implements ApiResult {
  // Not to be used by end users
  ApiResultImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResult,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResult,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultPtr,
  );
}

@sealed
class ApiResultMessageWithTokensImpl extends RustOpaque
    implements ApiResultMessageWithTokens {
  // Not to be used by end users
  ApiResultMessageWithTokensImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultMessageWithTokensImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultMessageWithTokens,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultMessageWithTokens,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultMessageWithTokensPtr,
  );
}

@sealed
class ApiResultRelayUrlImpl extends RustOpaque implements ApiResultRelayUrl {
  // Not to be used by end users
  ApiResultRelayUrlImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultRelayUrlImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultRelayUrl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultRelayUrl,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultRelayUrlPtr,
  );
}

@sealed
class ApiResultStringImpl extends RustOpaque implements ApiResultString {
  // Not to be used by end users
  ApiResultStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultStringPtr,
  );
}

@sealed
class ApiResultTagImpl extends RustOpaque implements ApiResultTag {
  // Not to be used by end users
  ApiResultTagImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultTagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultTag,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultTag,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultTagPtr,
  );
}

@sealed
class ApiResultUserImpl extends RustOpaque implements ApiResultUser {
  // Not to be used by end users
  ApiResultUserImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultUserImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultUser,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultUser,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultUserPtr,
  );
}

@sealed
class ApiResultVecChatMessageImpl extends RustOpaque
    implements ApiResultVecChatMessage {
  // Not to be used by end users
  ApiResultVecChatMessageImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecChatMessageImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultVecChatMessage,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecChatMessage,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecChatMessagePtr,
  );
}

@sealed
class ApiResultVecGroupImpl extends RustOpaque implements ApiResultVecGroup {
  // Not to be used by end users
  ApiResultVecGroupImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecGroupImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultVecGroup,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultVecGroup,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecGroupPtr,
  );
}

@sealed
class ApiResultVecRelayImpl extends RustOpaque implements ApiResultVecRelay {
  // Not to be used by end users
  ApiResultVecRelayImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecRelayImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultVecRelay,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultVecRelay,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecRelayPtr,
  );
}

@sealed
class ApiResultVecStringImpl extends RustOpaque implements ApiResultVecString {
  // Not to be used by end users
  ApiResultVecStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecStringImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultVecString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultVecString,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecStringPtr,
  );
}

@sealed
class ApiResultVecStringStringImpl extends RustOpaque
    implements ApiResultVecStringString {
  // Not to be used by end users
  ApiResultVecStringStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecStringStringImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultVecStringString,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecStringString,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecStringStringPtr,
  );
}

@sealed
class ApiResultVecWelcomeImpl extends RustOpaque
    implements ApiResultVecWelcome {
  // Not to be used by end users
  ApiResultVecWelcomeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultVecWelcomeImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ApiResultVecWelcome,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecWelcome,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultVecWelcomePtr,
  );
}

@sealed
class ApiResultWelcomeImpl extends RustOpaque implements ApiResultWelcome {
  // Not to be used by end users
  ApiResultWelcomeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiResultWelcomeImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiResultWelcome,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiResultWelcome,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ApiResultWelcomePtr,
  );
}

@sealed
class EventImpl extends RustOpaque implements Event {
  // Not to be used by end users
  EventImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Event,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Event,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventPtr,
  );
}

@sealed
class GroupIdImpl extends RustOpaque implements GroupId {
  // Not to be used by end users
  GroupIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupIdPtr,
  );
}

@sealed
class PublicKeyImpl extends RustOpaque implements PublicKey {
  // Not to be used by end users
  PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PublicKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicKeyPtr,
  );
}

@sealed
class RelayTypeImpl extends RustOpaque implements RelayType {
  // Not to be used by end users
  RelayTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayTypePtr,
  );
}

@sealed
class RelayUrlImpl extends RustOpaque implements RelayUrl {
  // Not to be used by end users
  RelayUrlImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayUrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayUrl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayUrl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayUrlPtr,
  );
}

@sealed
class TagImpl extends RustOpaque implements Tag {
  // Not to be used by end users
  TagImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Tag,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Tag,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TagPtr,
  );
}

@sealed
class ThemeModeImpl extends RustOpaque implements ThemeMode {
  // Not to be used by end users
  ThemeModeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ThemeModeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ThemeMode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ThemeMode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ThemeModePtr,
  );
}
