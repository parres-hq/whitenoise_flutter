// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api/error.dart';
import 'frb_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `from`

/// Creates a `WhitenoiseConfig` object from string directory paths.
///
/// This function bridges the gap between Flutter's string-based paths and Rust's
/// `Path` types, creating a proper configuration object for Whitenoise initialization.
///
/// # Parameters
/// * `data_dir` - Path string for data directory where app data will be stored
/// * `logs_dir` - Path string for logs directory where log files will be written
///
/// # Returns
/// A WhitenoiseConfig object ready for initialization
///
/// # Example
/// ```rust
/// let config = create_whitenoise_config(
///     "/path/to/data".to_string(),
///     "/path/to/logs".to_string()
/// );
/// ```
Future<WhitenoiseConfig> createWhitenoiseConfig({
  required String dataDir,
  required String logsDir,
}) => RustLib.instance.api.crateApiCreateWhitenoiseConfig(
  dataDir: dataDir,
  logsDir: logsDir,
);

Future<void> initializeWhitenoise({required WhitenoiseConfig config}) =>
    RustLib.instance.api.crateApiInitializeWhitenoise(config: config);

Future<void> deleteAllData() => RustLib.instance.api.crateApiDeleteAllData();

Future<AppSettings> getAppSettings() =>
    RustLib.instance.api.crateApiGetAppSettings();

Future<void> updateThemeMode({required ThemeMode themeMode}) =>
    RustLib.instance.api.crateApiUpdateThemeMode(themeMode: themeMode);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AppSettings>>
abstract class AppSettings implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ThemeMode>>
abstract class ThemeMode implements RustOpaqueInterface {}

/// Flutter-compatible configuration structure that holds directory paths as strings.
///
/// This struct is used to pass configuration data from Flutter to Rust, as flutter_rust_bridge
/// cannot directly handle `Path` types. The paths are converted to proper `Path` objects
/// internally when creating a `WhitenoiseConfig`.
class WhitenoiseConfig {
  /// Path to the directory where application data will be stored
  final String dataDir;

  /// Path to the directory where log files will be written
  final String logsDir;

  const WhitenoiseConfig({
    required this.dataDir,
    required this.logsDir,
  });

  @override
  int get hashCode => dataDir.hashCode ^ logsDir.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WhitenoiseConfig &&
          runtimeType == other.runtimeType &&
          dataDir == other.dataDir &&
          logsDir == other.logsDir;
}
