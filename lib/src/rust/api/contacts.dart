// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../api.dart';
import '../frb_generated.dart';
import 'accounts.dart';
import 'utils.dart';

/// Fetches all contacts associated with an account.
///
/// This function retrieves the complete contact list for a specified account,
/// including metadata information for each contact when available. The contacts
/// are returned as a HashMap where keys are contact public keys and values are
/// optional metadata. This uses the `fetch_contacts` method of the Whitenoise
/// library, which will go to relays to fetch the contacts and their metadata.
///
/// # Parameters
/// * `pubkey` - The public key of the account whose contacts to fetch
///
/// # Returns
/// * `Ok(HashMap<PublicKey, Option<MetadataData>>)` - Map of contact public keys to their metadata
/// * `Err(WhitenoiseError)` - If there was an error fetching contacts or account not found
///
/// # Example
/// ```rust
/// let contacts = fetch_contacts(account_pubkey).await?;
/// println!("Found {} contacts", contacts.len());
/// ```
Future<Map<PublicKey, MetadataData?>> fetchContacts({
  required PublicKey pubkey,
}) => RustLib.instance.api.crateApiContactsFetchContacts(pubkey: pubkey);

/// Queries all contacts associated with an account.
///
/// This function retrieves the complete contact list for a specified account,
/// including metadata information for each contact when available. The contacts
/// are returned as a HashMap where keys are contact public keys and values are
/// optional metadata. This uses the `query_contacts` method of the Whitenoise
/// library, which just hits the local nostr database cache to fetch the contacts and their metadata.
///
/// # Parameters
/// * `pubkey` - The public key of the account whose contacts to fetch
///
/// # Returns
/// * `Ok(HashMap<PublicKey, Option<MetadataData>>)` - Map of contact public keys to their metadata
/// * `Err(WhitenoiseError)` - If there was an error fetching contacts or account not found
///
/// # Example
/// ```rust
/// let contacts = fetch_contacts(account_pubkey).await?;
/// println!("Found {} contacts", contacts.len());
/// ```
Future<Map<PublicKey, MetadataData?>> queryContacts({
  required PublicKey pubkey,
}) => RustLib.instance.api.crateApiContactsQueryContacts(pubkey: pubkey);

/// Adds a new contact to an account's contact list.
///
/// This function adds the specified contact public key to the account's contact list.
/// The contact will be persisted and synchronized across the account's relays.
///
/// # Parameters
/// * `pubkey` - The public key of the account to add the contact to
/// * `contact_pubkey` - The public key of the contact to add
///
/// # Returns
/// * `Ok(())` - If the contact was successfully added
/// * `Err(WhitenoiseError)` - If there was an error adding the contact (e.g., account not found, network error)
///
/// # Example
/// ```rust
/// add_contact(&my_pubkey, contact_pubkey).await?;
/// println!("Contact added successfully");
/// ```
Future<void> addContact({
  required PublicKey pubkey,
  required PublicKey contactPubkey,
}) => RustLib.instance.api.crateApiContactsAddContact(
  pubkey: pubkey,
  contactPubkey: contactPubkey,
);

/// Removes a contact from an account's contact list.
///
/// This function removes the specified contact public key from the account's contact list.
/// The change will be persisted and synchronized across the account's relays.
///
/// # Parameters
/// * `pubkey` - The public key of the account to remove the contact from
/// * `contact_pubkey` - The public key of the contact to remove
///
/// # Returns
/// * `Ok(())` - If the contact was successfully removed
/// * `Err(WhitenoiseError)` - If there was an error removing the contact (e.g., account not found, contact not in list)
///
/// # Example
/// ```rust
/// remove_contact(&my_pubkey, unwanted_contact).await?;
/// println!("Contact removed successfully");
/// ```
Future<void> removeContact({
  required PublicKey pubkey,
  required PublicKey contactPubkey,
}) => RustLib.instance.api.crateApiContactsRemoveContact(
  pubkey: pubkey,
  contactPubkey: contactPubkey,
);

/// Completely replaces an account's contact list with a new set of contacts.
///
/// This function overwrites the entire contact list with the provided public keys.
/// This is useful for bulk updates or synchronization operations. All existing
/// contacts not in the new list will be removed.
///
/// # Parameters
/// * `pubkey` - The public key of the account whose contact list to update
/// * `contact_pubkeys` - Vector of public keys representing the new complete contact list
///
/// # Returns
/// * `Ok(())` - If the contact list was successfully updated
/// * `Err(WhitenoiseError)` - If there was an error updating the contacts
///
/// # Warning
/// This operation completely replaces the existing contact list. Use with caution.
///
/// # Example
/// ```rust
/// let new_contacts = vec![contact1, contact2, contact3];
/// update_contacts(&my_pubkey, new_contacts).await?;
/// println!("Contact list updated");
/// ```
Future<void> updateContacts({
  required PublicKey pubkey,
  required List<PublicKey> contactPubkeys,
}) => RustLib.instance.api.crateApiContactsUpdateContacts(
  pubkey: pubkey,
  contactPubkeys: contactPubkeys,
);
