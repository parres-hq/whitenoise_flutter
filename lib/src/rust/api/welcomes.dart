// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import 'groups.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `from`, `from`, `from`

Future<List<Welcome>> pendingWelcomes({required String pubkey}) =>
    RustLib.instance.api.crateApiWelcomesPendingWelcomes(pubkey: pubkey);

Future<Welcome> findWeclcomeByEventId({
  required String pubkey,
  required String welcomeEventId,
}) => RustLib.instance.api.crateApiWelcomesFindWeclcomeByEventId(
  pubkey: pubkey,
  welcomeEventId: welcomeEventId,
);

Future<void> acceptWelcome({
  required String pubkey,
  required String welcomeEventId,
}) => RustLib.instance.api.crateApiWelcomesAcceptWelcome(
  pubkey: pubkey,
  welcomeEventId: welcomeEventId,
);

Future<void> declineWelcome({
  required String pubkey,
  required String welcomeEventId,
}) => RustLib.instance.api.crateApiWelcomesDeclineWelcome(
  pubkey: pubkey,
  welcomeEventId: welcomeEventId,
);

/// Converts a GroupId to a hex string representation.
///
/// This function provides a consistent way to convert MLS group IDs to strings
/// for use in the Flutter bridge layer.
///
/// # Parameters
/// * `group_id` - Reference to a GroupId object
///
/// # Returns
/// Hexadecimal string representation of the group ID
class Welcome {
  final String id;
  final String mlsGroupId;
  final String nostrGroupId;
  final String groupName;
  final String groupDescription;
  final List<String> groupAdminPubkeys;
  final List<String> groupRelays;
  final String welcomer;
  final int memberCount;
  final WelcomeState state;
  final BigInt createdAt;

  const Welcome({
    required this.id,
    required this.mlsGroupId,
    required this.nostrGroupId,
    required this.groupName,
    required this.groupDescription,
    required this.groupAdminPubkeys,
    required this.groupRelays,
    required this.welcomer,
    required this.memberCount,
    required this.state,
    required this.createdAt,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      mlsGroupId.hashCode ^
      nostrGroupId.hashCode ^
      groupName.hashCode ^
      groupDescription.hashCode ^
      groupAdminPubkeys.hashCode ^
      groupRelays.hashCode ^
      welcomer.hashCode ^
      memberCount.hashCode ^
      state.hashCode ^
      createdAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Welcome &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          mlsGroupId == other.mlsGroupId &&
          nostrGroupId == other.nostrGroupId &&
          groupName == other.groupName &&
          groupDescription == other.groupDescription &&
          groupAdminPubkeys == other.groupAdminPubkeys &&
          groupRelays == other.groupRelays &&
          welcomer == other.welcomer &&
          memberCount == other.memberCount &&
          state == other.state &&
          createdAt == other.createdAt;
}

enum WelcomeState {
  pending,
  accepted,
  declined,
  ignored,
}
