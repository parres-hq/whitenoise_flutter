// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import 'error.dart';
import 'metadata.dart';
import 'relays.dart';
import 'users.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `from`

Future<List<Account>> getAccounts() => RustLib.instance.api.crateApiAccountsGetAccounts();

Future<Account> getAccount({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsGetAccount(pubkey: pubkey);

Future<Account> createIdentity() => RustLib.instance.api.crateApiAccountsCreateIdentity();

Future<Account> login({required String nsecOrHexPrivkey}) =>
    RustLib.instance.api.crateApiAccountsLogin(nsecOrHexPrivkey: nsecOrHexPrivkey);

Future<void> logout({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsLogout(pubkey: pubkey);

Future<String> exportAccountNsec({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsExportAccountNsec(pubkey: pubkey);

Future<FlutterMetadata> accountMetadata({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsAccountMetadata(pubkey: pubkey);

Future<void> updateAccountMetadata({
  required String pubkey,
  required FlutterMetadata metadata,
}) => RustLib.instance.api.crateApiAccountsUpdateAccountMetadata(
  pubkey: pubkey,
  metadata: metadata,
);

Future<String> uploadAccountProfilePicture({
  required String pubkey,
  required String serverUrl,
  required String filePath,
  required String imageType,
}) => RustLib.instance.api.crateApiAccountsUploadAccountProfilePicture(
  pubkey: pubkey,
  serverUrl: serverUrl,
  filePath: filePath,
  imageType: imageType,
);

Future<List<Relay>> accountRelays({
  required String pubkey,
  required RelayType relayType,
}) => RustLib.instance.api.crateApiAccountsAccountRelays(
  pubkey: pubkey,
  relayType: relayType,
);

Future<void> addAccountRelay({
  required String pubkey,
  required String url,
  required RelayType relayType,
}) => RustLib.instance.api.crateApiAccountsAddAccountRelay(
  pubkey: pubkey,
  url: url,
  relayType: relayType,
);

Future<void> removeAccountRelay({
  required String pubkey,
  required String url,
  required RelayType relayType,
}) => RustLib.instance.api.crateApiAccountsRemoveAccountRelay(
  pubkey: pubkey,
  url: url,
  relayType: relayType,
);

Future<Event?> accountKeyPackage({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsAccountKeyPackage(pubkey: pubkey);

Future<List<User>> accountFollows({required String pubkey}) =>
    RustLib.instance.api.crateApiAccountsAccountFollows(pubkey: pubkey);

Future<void> followUser({
  required String accountPubkey,
  required String userToFollowPubkey,
}) => RustLib.instance.api.crateApiAccountsFollowUser(
  accountPubkey: accountPubkey,
  userToFollowPubkey: userToFollowPubkey,
);

Future<void> unfollowUser({
  required String accountPubkey,
  required String userToUnfollowPubkey,
}) => RustLib.instance.api.crateApiAccountsUnfollowUser(
  accountPubkey: accountPubkey,
  userToUnfollowPubkey: userToUnfollowPubkey,
);

/// Example function demonstrating the new ApiError usage pattern.
/// When you specify the return type as Result<T, ApiError>, the ? operator
/// automatically converts ApiError to ApiError using .into()
Future<List<Account>> getAccountsWithApiError() =>
    RustLib.instance.api.crateApiAccountsGetAccountsWithApiError();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>
abstract class Event implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RelayType>>
abstract class RelayType implements RustOpaqueInterface {}

class Account {
  final String pubkey;
  final DateTime? lastSyncedAt;
  final DateTime createdAt;
  final DateTime updatedAt;

  const Account({
    required this.pubkey,
    this.lastSyncedAt,
    required this.createdAt,
    required this.updatedAt,
  });

  @override
  int get hashCode =>
      pubkey.hashCode ^ lastSyncedAt.hashCode ^ createdAt.hashCode ^ updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Account &&
          runtimeType == other.runtimeType &&
          pubkey == other.pubkey &&
          lastSyncedAt == other.lastSyncedAt &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}
