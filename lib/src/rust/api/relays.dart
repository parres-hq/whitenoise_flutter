// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import 'accounts.dart';
import 'error.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `from`

Future<RelayType> relayTypeNip65() => RustLib.instance.api.crateApiRelaysRelayTypeNip65();

Future<RelayType> relayTypeInbox() => RustLib.instance.api.crateApiRelaysRelayTypeInbox();

Future<RelayType> relayTypeKeyPackage() => RustLib.instance.api.crateApiRelaysRelayTypeKeyPackage();

Future<List<(String, String)>> getAccountRelayStatuses({
  required String pubkey,
}) => RustLib.instance.api.crateApiRelaysGetAccountRelayStatuses(pubkey: pubkey);

/// Ensures all subscriptions (global and all accounts) are operational.
///
/// This method is designed for periodic background tasks that need to ensure
/// the entire subscription system is functioning. It checks and refreshes
/// global subscriptions first, then iterates through all accounts.
///
/// Uses a best-effort strategy: if one subscription check fails, logs the error
/// and continues with the remaining checks. This maximizes the number of working
/// subscriptions even when some fail due to transient network issues.
///
/// # Error Handling
///
/// - **Subscription errors**: Logged and ignored, processing continues
/// - **Database errors**: Propagated immediately (catastrophic failure)
///
/// # Returns
///
/// - `Ok(())`: Completed all checks (some may have failed, check logs)
/// - `Err(_)`: Only on catastrophic failures (e.g., database connection lost)
Future<void> ensureAllSubscriptions() =>
    RustLib.instance.api.crateApiRelaysEnsureAllSubscriptions();

class Relay {
  final String url;
  final DateTime createdAt;
  final DateTime updatedAt;

  const Relay({
    required this.url,
    required this.createdAt,
    required this.updatedAt,
  });

  @override
  int get hashCode => url.hashCode ^ createdAt.hashCode ^ updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Relay &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}
